
capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d998  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800db68  0800db68  0000eb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd90  0800dd90  0000f2a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd98  0800dd98  0000f2a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd98  0800dd98  0000ed98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd9c  0800dd9c  0000ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  0800dda0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002830  200002a0  0800e040  0000f2a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ad0  0800e040  0000fad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee10  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442d  00000000  00000000  0002e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001523  00000000  00000000  00034018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266fe  00000000  00000000  0003553b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ada  00000000  00000000  0005bc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db8ce  00000000  00000000  0007d713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158fe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000799c  00000000  00000000  00159024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001609c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a0 	.word	0x200002a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800db50 	.word	0x0800db50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002a4 	.word	0x200002a4
 800020c:	0800db50 	.word	0x0800db50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <_DoInit+0xa0>)
 8000de4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000de6:	22a8      	movs	r2, #168	@ 0xa8
 8000de8:	2100      	movs	r1, #0
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f00c fa30 	bl	800d250 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2203      	movs	r2, #3
 8000df4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4a20      	ldr	r2, [pc, #128]	@ (8000e80 <_DoInit+0xa4>)
 8000e00:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <_DoInit+0xa8>)
 8000e06:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <_DoInit+0xa4>)
 8000e26:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <_DoInit+0xac>)
 8000e2c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2210      	movs	r2, #16
 8000e32:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2200      	movs	r2, #0
 8000e38:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000e46:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	e00c      	b.n	8000e6a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1c3 030f 	rsb	r3, r3, #15
 8000e56:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <_DoInit+0xb0>)
 8000e58:	5cd1      	ldrb	r1, [r2, r3]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	460a      	mov	r2, r1
 8000e62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3301      	adds	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d9ef      	bls.n	8000e50 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000e70:	f3bf 8f5f 	dmb	sy
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002bc 	.word	0x200002bc
 8000e80:	0800db68 	.word	0x0800db68
 8000e84:	20000364 	.word	0x20000364
 8000e88:	20000764 	.word	0x20000764
 8000e8c:	0800dd20 	.word	0x0800dd20

08000e90 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d905      	bls.n	8000ec0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ebe:	e007      	b.n	8000ed0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69b9      	ldr	r1, [r7, #24]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eda:	4293      	cmp	r3, r2
 8000edc:	bf28      	it	cs
 8000ede:	4613      	movcs	r3, r2
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bf28      	it	cs
 8000eea:	4613      	movcs	r3, r2
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f00c f9db 	bl	800d2b8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000f02:	6a3a      	ldr	r2, [r7, #32]
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	4413      	add	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1e:	4413      	add	r3, r2
 8000f20:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d101      	bne.n	8000f30 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000f30:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1b2      	bne.n	8000ea6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000f40:	6a3b      	ldr	r3, [r7, #32]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b088      	sub	sp, #32
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d911      	bls.n	8000f92 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	4413      	add	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6938      	ldr	r0, [r7, #16]
 8000f7e:	f00c f99b 	bl	800d2b8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000f82:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000f90:	e01f      	b.n	8000fd2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	6938      	ldr	r0, [r7, #16]
 8000fa6:	f00c f987 	bl	800d2b8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	f00c f978 	bl	800d2b8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000fc8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000fda:	b480      	push	{r7}
 8000fdc:	b087      	sub	sp, #28
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d808      	bhi.n	8001008 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4413      	add	r3, r2
 8001002:	3b01      	subs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e004      	b.n	8001012 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	3b01      	subs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001012:	697b      	ldr	r3, [r7, #20]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <SEGGER_RTT_WriteNoLock+0x9c>)
 800103e:	4413      	add	r3, r2
 8001040:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d029      	beq.n	800109e <SEGGER_RTT_WriteNoLock+0x7e>
 800104a:	2b02      	cmp	r3, #2
 800104c:	d82e      	bhi.n	80010ac <SEGGER_RTT_WriteNoLock+0x8c>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <SEGGER_RTT_WriteNoLock+0x38>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d013      	beq.n	800107e <SEGGER_RTT_WriteNoLock+0x5e>
 8001056:	e029      	b.n	80010ac <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001058:	6978      	ldr	r0, [r7, #20]
 800105a:	f7ff ffbe 	bl	8000fda <_GetAvailWriteSpace>
 800105e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d202      	bcs.n	800106e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800106c:	e021      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	69b9      	ldr	r1, [r7, #24]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff67 	bl	8000f4a <_WriteNoCheck>
    break;
 800107c:	e019      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ffab 	bl	8000fda <_GetAvailWriteSpace>
 8001084:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4293      	cmp	r3, r2
 800108c:	bf28      	it	cs
 800108e:	4613      	movcs	r3, r2
 8001090:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff57 	bl	8000f4a <_WriteNoCheck>
    break;
 800109c:	e009      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	69b9      	ldr	r1, [r7, #24]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff fef4 	bl	8000e90 <_WriteBlocking>
 80010a8:	61f8      	str	r0, [r7, #28]
    break;
 80010aa:	e002      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    break;
 80010b0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80010b2:	69fb      	ldr	r3, [r7, #28]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002bc 	.word	0x200002bc

080010c0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <SEGGER_RTT_Write+0x48>)
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <SEGGER_RTT_Write+0x1e>
 80010da:	f7ff fe7f 	bl	8000ddc <_DoInit>
  SEGGER_RTT_LOCK();
 80010de:	f3ef 8311 	mrs	r3, BASEPRI
 80010e2:	f04f 0120 	mov.w	r1, #32
 80010e6:	f381 8811 	msr	BASEPRI, r1
 80010ea:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff95 	bl	8001020 <SEGGER_RTT_WriteNoLock>
 80010f6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80010fe:	697b      	ldr	r3, [r7, #20]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200002bc 	.word	0x200002bc

0800110c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d80e      	bhi.n	8001148 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	78fa      	ldrb	r2, [r7, #3]
 8001134:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d115      	bne.n	8001180 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6918      	ldr	r0, [r3, #16]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	461a      	mov	r2, r3
 8001162:	f7ff ffad 	bl	80010c0 <SEGGER_RTT_Write>
 8001166:	4602      	mov	r2, r0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d004      	beq.n	800117a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001176:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8001178:	e002      	b.n	8001180 <_StoreChar+0x74>
      p->Cnt = 0u;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800119a:	2301      	movs	r3, #1
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80011a2:	e007      	b.n	80011b4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ac:	623b      	str	r3, [r7, #32]
    Width++;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d2f3      	bcs.n	80011a4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d901      	bls.n	80011c8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80011c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d125      	bne.n	800121e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80011d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d022      	beq.n	800121e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80011d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <_PrintUnsigned+0x66>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_PrintUnsigned+0x66>
        c = '0';
 80011e8:	2330      	movs	r3, #48	@ 0x30
 80011ea:	76fb      	strb	r3, [r7, #27]
 80011ec:	e001      	b.n	80011f2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80011ee:	2320      	movs	r3, #32
 80011f0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80011f2:	e00b      	b.n	800120c <_PrintUnsigned+0x84>
        FieldWidth--;
 80011f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f6:	3b01      	subs	r3, #1
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80011fa:	7efb      	ldrb	r3, [r7, #27]
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff ff84 	bl	800110c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db07      	blt.n	800121c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800120c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <_PrintUnsigned+0x96>
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	429a      	cmp	r2, r3
 8001218:	d3ec      	bcc.n	80011f4 <_PrintUnsigned+0x6c>
 800121a:	e000      	b.n	800121e <_PrintUnsigned+0x96>
          break;
 800121c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db55      	blt.n	80012d2 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d903      	bls.n	8001234 <_PrintUnsigned+0xac>
        NumDigits--;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	e009      	b.n	8001248 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d200      	bcs.n	8001248 <_PrintUnsigned+0xc0>
          break;
 8001246:	e005      	b.n	8001254 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001252:	e7e8      	b.n	8001226 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <_PrintUnsigned+0x154>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff ff48 	bl	800110c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db08      	blt.n	8001296 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8001284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	fbb2 f3f3 	udiv	r3, r2, r3
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1df      	bne.n	8001254 <_PrintUnsigned+0xcc>
 8001294:	e000      	b.n	8001298 <_PrintUnsigned+0x110>
        break;
 8001296:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8001298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d017      	beq.n	80012d2 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80012a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d014      	beq.n	80012d2 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80012a8:	e00a      	b.n	80012c0 <_PrintUnsigned+0x138>
          FieldWidth--;
 80012aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ac:	3b01      	subs	r3, #1
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80012b0:	2120      	movs	r1, #32
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff2a 	bl	800110c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db07      	blt.n	80012d0 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80012c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <_PrintUnsigned+0x14a>
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3ed      	bcc.n	80012aa <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80012ce:	e000      	b.n	80012d2 <_PrintUnsigned+0x14a>
            break;
 80012d0:	bf00      	nop
}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	@ 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	0800dd34 	.word	0x0800dd34

080012e0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bfb8      	it	lt
 80012f4:	425b      	neglt	r3, r3
 80012f6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80012fc:	e007      	b.n	800130e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	fb92 f3f3 	sdiv	r3, r2, r3
 8001306:	613b      	str	r3, [r7, #16]
    Width++;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	429a      	cmp	r2, r3
 8001314:	daf3      	bge.n	80012fe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	429a      	cmp	r2, r3
 800131c:	d901      	bls.n	8001322 <_PrintInt+0x42>
    Width = NumDigits;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00a      	beq.n	800133e <_PrintInt+0x5e>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db04      	blt.n	8001338 <_PrintInt+0x58>
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <_PrintInt+0x5e>
    FieldWidth--;
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	3b01      	subs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <_PrintInt+0x6e>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01c      	beq.n	8001388 <_PrintInt+0xa8>
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d117      	bne.n	8001388 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d014      	beq.n	8001388 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800135e:	e00a      	b.n	8001376 <_PrintInt+0x96>
        FieldWidth--;
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	3b01      	subs	r3, #1
 8001364:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8001366:	2120      	movs	r1, #32
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff fecf 	bl	800110c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db07      	blt.n	8001386 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <_PrintInt+0xa8>
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3ed      	bcc.n	8001360 <_PrintInt+0x80>
 8001384:	e000      	b.n	8001388 <_PrintInt+0xa8>
          break;
 8001386:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db4a      	blt.n	8001426 <_PrintInt+0x146>
    if (v < 0) {
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da07      	bge.n	80013a6 <_PrintInt+0xc6>
      v = -v;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	425b      	negs	r3, r3
 800139a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 800139c:	212d      	movs	r1, #45	@ 0x2d
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff feb4 	bl	800110c <_StoreChar>
 80013a4:	e008      	b.n	80013b8 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80013b0:	212b      	movs	r1, #43	@ 0x2b
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff feaa 	bl	800110c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db32      	blt.n	8001426 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01f      	beq.n	800140a <_PrintInt+0x12a>
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11a      	bne.n	800140a <_PrintInt+0x12a>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d117      	bne.n	800140a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80013e0:	e00a      	b.n	80013f8 <_PrintInt+0x118>
            FieldWidth--;
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80013e8:	2130      	movs	r1, #48	@ 0x30
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff fe8e 	bl	800110c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db07      	blt.n	8001408 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <_PrintInt+0x12a>
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3ed      	bcc.n	80013e2 <_PrintInt+0x102>
 8001406:	e000      	b.n	800140a <_PrintInt+0x12a>
              break;
 8001408:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db09      	blt.n	8001426 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff feb1 	bl	8001188 <_PrintUnsigned>
      }
    }
  }
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b0a2      	sub	sp, #136	@ 0x88
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8001442:	2340      	movs	r3, #64	@ 0x40
 8001444:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt            = 0u;
 8001446:	2300      	movs	r3, #0
 8001448:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue    = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8001460:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 819f 	beq.w	80017a8 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 800146a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800146e:	2b25      	cmp	r3, #37	@ 0x25
 8001470:	f040 818d 	bne.w	800178e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8001474:	2300      	movs	r3, #0
 8001476:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8001478:	2301      	movs	r3, #1
 800147a:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8001484:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001488:	3b23      	subs	r3, #35	@ 0x23
 800148a:	2b0d      	cmp	r3, #13
 800148c:	d83e      	bhi.n	800150c <SEGGER_RTT_vprintf+0xdc>
 800148e:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <SEGGER_RTT_vprintf+0x64>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	080014fd 	.word	0x080014fd
 8001498:	0800150d 	.word	0x0800150d
 800149c:	0800150d 	.word	0x0800150d
 80014a0:	0800150d 	.word	0x0800150d
 80014a4:	0800150d 	.word	0x0800150d
 80014a8:	0800150d 	.word	0x0800150d
 80014ac:	0800150d 	.word	0x0800150d
 80014b0:	0800150d 	.word	0x0800150d
 80014b4:	080014ed 	.word	0x080014ed
 80014b8:	0800150d 	.word	0x0800150d
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	0800150d 	.word	0x0800150d
 80014c4:	0800150d 	.word	0x0800150d
 80014c8:	080014dd 	.word	0x080014dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80014cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	e01a      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80014dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	e012      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80014ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e00a      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80014fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	673b      	str	r3, [r7, #112]	@ 0x70
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	e002      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 800150c:	2300      	movs	r3, #0
 800150e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001510:	bf00      	nop
        }
      } while (v);
 8001512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1b1      	bne.n	800147c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8001518:	2300      	movs	r3, #0
 800151a:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8001524:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001528:	2b2f      	cmp	r3, #47	@ 0x2f
 800152a:	d912      	bls.n	8001552 <SEGGER_RTT_vprintf+0x122>
 800152c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001530:	2b39      	cmp	r3, #57	@ 0x39
 8001532:	d80e      	bhi.n	8001552 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800153a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	461a      	mov	r2, r3
 8001546:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800154a:	4413      	add	r3, r2
 800154c:	3b30      	subs	r3, #48	@ 0x30
 800154e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8001550:	e7e4      	b.n	800151c <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8001552:	2300      	movs	r3, #0
 8001554:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 800155e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001562:	2b2e      	cmp	r3, #46	@ 0x2e
 8001564:	d11d      	bne.n	80015a2 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8001574:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001578:	2b2f      	cmp	r3, #47	@ 0x2f
 800157a:	d912      	bls.n	80015a2 <SEGGER_RTT_vprintf+0x172>
 800157c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001580:	2b39      	cmp	r3, #57	@ 0x39
 8001582:	d80e      	bhi.n	80015a2 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3301      	adds	r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800158a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	461a      	mov	r2, r3
 8001596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800159a:	4413      	add	r3, r2
 800159c:	3b30      	subs	r3, #48	@ 0x30
 800159e:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 80015a0:	e7e4      	b.n	800156c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80015aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80015ae:	2b6c      	cmp	r3, #108	@ 0x6c
 80015b0:	d003      	beq.n	80015ba <SEGGER_RTT_vprintf+0x18a>
 80015b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80015b6:	2b68      	cmp	r3, #104	@ 0x68
 80015b8:	d107      	bne.n	80015ca <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 80015c8:	e7ef      	b.n	80015aa <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80015ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80015ce:	2b25      	cmp	r3, #37	@ 0x25
 80015d0:	f000 80d1 	beq.w	8001776 <SEGGER_RTT_vprintf+0x346>
 80015d4:	2b25      	cmp	r3, #37	@ 0x25
 80015d6:	f2c0 80d5 	blt.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015da:	2b78      	cmp	r3, #120	@ 0x78
 80015dc:	f300 80d2 	bgt.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015e0:	2b58      	cmp	r3, #88	@ 0x58
 80015e2:	f2c0 80cf 	blt.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015e6:	3b58      	subs	r3, #88	@ 0x58
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	f200 80cb 	bhi.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015ee:	a201      	add	r2, pc, #4	@ (adr r2, 80015f4 <SEGGER_RTT_vprintf+0x1c4>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	080016eb 	.word	0x080016eb
 80015f8:	08001785 	.word	0x08001785
 80015fc:	08001785 	.word	0x08001785
 8001600:	08001785 	.word	0x08001785
 8001604:	08001785 	.word	0x08001785
 8001608:	08001785 	.word	0x08001785
 800160c:	08001785 	.word	0x08001785
 8001610:	08001785 	.word	0x08001785
 8001614:	08001785 	.word	0x08001785
 8001618:	08001785 	.word	0x08001785
 800161c:	08001785 	.word	0x08001785
 8001620:	08001679 	.word	0x08001679
 8001624:	0800169f 	.word	0x0800169f
 8001628:	08001785 	.word	0x08001785
 800162c:	08001785 	.word	0x08001785
 8001630:	08001785 	.word	0x08001785
 8001634:	08001785 	.word	0x08001785
 8001638:	08001785 	.word	0x08001785
 800163c:	08001785 	.word	0x08001785
 8001640:	08001785 	.word	0x08001785
 8001644:	08001785 	.word	0x08001785
 8001648:	08001785 	.word	0x08001785
 800164c:	08001785 	.word	0x08001785
 8001650:	08001785 	.word	0x08001785
 8001654:	08001751 	.word	0x08001751
 8001658:	08001785 	.word	0x08001785
 800165c:	08001785 	.word	0x08001785
 8001660:	08001711 	.word	0x08001711
 8001664:	08001785 	.word	0x08001785
 8001668:	080016c5 	.word	0x080016c5
 800166c:	08001785 	.word	0x08001785
 8001670:	08001785 	.word	0x08001785
 8001674:	080016eb 	.word	0x080016eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1d19      	adds	r1, r3, #4
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6011      	str	r1, [r2, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	67bb      	str	r3, [r7, #120]	@ 0x78
        c0 = (char)v;
 8001686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        _StoreChar(&BufferDesc, c0);
 800168c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001690:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd38 	bl	800110c <_StoreChar>
        break;
 800169c:	e073      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1d19      	adds	r1, r3, #4
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6011      	str	r1, [r2, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80016ac:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80016b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ba:	220a      	movs	r2, #10
 80016bc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016be:	f7ff fe0f 	bl	80012e0 <_PrintInt>
        break;
 80016c2:	e060      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1d19      	adds	r1, r3, #4
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6011      	str	r1, [r2, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80016d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016d4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80016d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e2:	220a      	movs	r2, #10
 80016e4:	f7ff fd50 	bl	8001188 <_PrintUnsigned>
        break;
 80016e8:	e04d      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1d19      	adds	r1, r3, #4
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6011      	str	r1, [r2, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80016f8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016fa:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80016fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001708:	2210      	movs	r2, #16
 800170a:	f7ff fd3d 	bl	8001188 <_PrintUnsigned>
        break;
 800170e:	e03a      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	1d19      	adds	r1, r3, #4
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6011      	str	r1, [r2, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	66bb      	str	r3, [r7, #104]	@ 0x68
          do {
            c = *s;
 800171e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8001726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001728:	3301      	adds	r3, #1
 800172a:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 800172c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8001734:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001738:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fce4 	bl	800110c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8001744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001746:	2b00      	cmp	r3, #0
 8001748:	dae9      	bge.n	800171e <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 800174a:	e01c      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
              break;
 800174c:	bf00      	nop
        break;
 800174e:	e01a      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	1d19      	adds	r1, r3, #4
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800175e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001760:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001764:	2300      	movs	r3, #0
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	2308      	movs	r3, #8
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2308      	movs	r3, #8
 800176e:	2210      	movs	r2, #16
 8001770:	f7ff fd0a 	bl	8001188 <_PrintUnsigned>
        break;
 8001774:	e007      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8001776:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800177a:	2125      	movs	r1, #37	@ 0x25
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fcc5 	bl	800110c <_StoreChar>
        break;
 8001782:	e000      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8001784:	bf00      	nop
      }
      sFormat++;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3301      	adds	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	e007      	b.n	800179e <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 800178e:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001792:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fcb7 	bl	800110c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800179e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f6bf ae56 	bge.w	8001452 <SEGGER_RTT_vprintf+0x22>
 80017a6:	e000      	b.n	80017aa <SEGGER_RTT_vprintf+0x37a>
      break;
 80017a8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80017aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd0d      	ble.n	80017cc <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80017b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80017b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fc7e 	bl	80010c0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80017c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017c8:	4413      	add	r3, r2
 80017ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3780      	adds	r7, #128	@ 0x80
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop

080017d8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80017d8:	b40e      	push	{r1, r2, r3}
 80017da:	b580      	push	{r7, lr}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	461a      	mov	r2, r3
 80017ee:	69f9      	ldr	r1, [r7, #28]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe1d 	bl	8001430 <SEGGER_RTT_vprintf>
 80017f6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001804:	b003      	add	sp, #12
 8001806:	4770      	bx	lr

08001808 <accWrite>:
**************************************************************/

gpio_Pin imuInt = { .gpioGroup = GPIOC, .gpioPin = GPIO_PIN_13 };          //IMU_INR
gpio_Pin imuCS = { .gpioGroup = GPIOC, .gpioPin = GPIO_PIN_5};            //CS

void accWrite(uint8_t add, uint8_t *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <accWrite+0x4c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <accWrite+0x4c>)
 800181a:	8891      	ldrh	r1, [r2, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f002 faf0 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &add, 1, 100);
 8001824:	1df9      	adds	r1, r7, #7
 8001826:	2364      	movs	r3, #100	@ 0x64
 8001828:	2201      	movs	r2, #1
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <accWrite+0x50>)
 800182c:	f004 fffb 	bl	8006826 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, 1, 100);
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	2201      	movs	r2, #1
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	4808      	ldr	r0, [pc, #32]	@ (8001858 <accWrite+0x50>)
 8001838:	f004 fff5 	bl	8006826 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <accWrite+0x4c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <accWrite+0x4c>)
 8001842:	8891      	ldrh	r1, [r2, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fadc 	bl	8003e04 <HAL_GPIO_WritePin>
	return;
 800184c:	bf00      	nop
}
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000013c 	.word	0x2000013c
 8001858:	200007c8 	.word	0x200007c8

0800185c <accRead>:


uint8_t accRead(uint8_t add){
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	uint8_t buff;
  uint8_t data = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	73bb      	strb	r3, [r7, #14]
	buff = add | 0x80;
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <accRead+0x60>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a10      	ldr	r2, [pc, #64]	@ (80018bc <accRead+0x60>)
 800187a:	8891      	ldrh	r1, [r2, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fac0 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &buff, sizeof buff, 100);
 8001884:	f107 010f 	add.w	r1, r7, #15
 8001888:	2364      	movs	r3, #100	@ 0x64
 800188a:	2201      	movs	r2, #1
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <accRead+0x64>)
 800188e:	f004 ffca 	bl	8006826 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, sizeof data, 100);
 8001892:	f107 010e 	add.w	r1, r7, #14
 8001896:	2364      	movs	r3, #100	@ 0x64
 8001898:	2201      	movs	r2, #1
 800189a:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <accRead+0x64>)
 800189c:	f005 f907 	bl	8006aae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <accRead+0x60>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <accRead+0x60>)
 80018a6:	8891      	ldrh	r1, [r2, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 faaa 	bl	8003e04 <HAL_GPIO_WritePin>
	return data;
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000013c 	.word	0x2000013c
 80018c0:	200007c8 	.word	0x200007c8

080018c4 <accInit>:

void accInit(void){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  uint8_t changeState;
  uint8_t ret;

  SEGGER_RTT_printf(0, "\nAccelerometer Sensor Check... \n");
 80018ca:	494c      	ldr	r1, [pc, #304]	@ (80019fc <accInit+0x138>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ff83 	bl	80017d8 <SEGGER_RTT_printf>
  SEGGER_RTT_printf(0, "______________________ \n");
 80018d2:	494b      	ldr	r1, [pc, #300]	@ (8001a00 <accInit+0x13c>)
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff ff7f 	bl	80017d8 <SEGGER_RTT_printf>
  //accelerometer Control Reg

  ret = accRead(0x0F);
 80018da:	200f      	movs	r0, #15
 80018dc:	f7ff ffbe 	bl	800185c <accRead>
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "CHIP ID: 0x%02X\n", ret);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4946      	ldr	r1, [pc, #280]	@ (8001a04 <accInit+0x140>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff ff74 	bl	80017d8 <SEGGER_RTT_printf>
  // we are expecting 0x6C here

  ret = accRead(0x10);
 80018f0:	2010      	movs	r0, #16
 80018f2:	f7ff ffb3 	bl	800185c <accRead>
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "ACCELEROMETER CONTROL REG: 0x%02X\n", ret);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4942      	ldr	r1, [pc, #264]	@ (8001a08 <accInit+0x144>)
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff ff69 	bl	80017d8 <SEGGER_RTT_printf>
  changeState = ret | 0b10100000;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800190c:	b2db      	uxtb	r3, r3
 800190e:	71bb      	strb	r3, [r7, #6]
  accWrite(0x10, &changeState);
 8001910:	1dbb      	adds	r3, r7, #6
 8001912:	4619      	mov	r1, r3
 8001914:	2010      	movs	r0, #16
 8001916:	f7ff ff77 	bl	8001808 <accWrite>
  ret = accRead(0x10);
 800191a:	2010      	movs	r0, #16
 800191c:	f7ff ff9e 	bl	800185c <accRead>
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "ACCELEROMETER CONTROL REG UPDATED: 0x%02X\n", ret);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	461a      	mov	r2, r3
 8001928:	4938      	ldr	r1, [pc, #224]	@ (8001a0c <accInit+0x148>)
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff ff54 	bl	80017d8 <SEGGER_RTT_printf>

  //GyroControl Reg
  ret = accRead(0x11);
 8001930:	2011      	movs	r0, #17
 8001932:	f7ff ff93 	bl	800185c <accRead>
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "GYRO CONTROL REG: 0x%02X\n", ret);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	461a      	mov	r2, r3
 800193e:	4934      	ldr	r1, [pc, #208]	@ (8001a10 <accInit+0x14c>)
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ff49 	bl	80017d8 <SEGGER_RTT_printf>
  changeState = ret | 0b01010000;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800194c:	b2db      	uxtb	r3, r3
 800194e:	71bb      	strb	r3, [r7, #6]
  accWrite(0x11, &changeState);
 8001950:	1dbb      	adds	r3, r7, #6
 8001952:	4619      	mov	r1, r3
 8001954:	2011      	movs	r0, #17
 8001956:	f7ff ff57 	bl	8001808 <accWrite>
  ret = accRead(0x11);
 800195a:	2011      	movs	r0, #17
 800195c:	f7ff ff7e 	bl	800185c <accRead>
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "GYRO CONTROL REG UPDATED: 0x%02X\n", ret);
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	461a      	mov	r2, r3
 8001968:	492a      	ldr	r1, [pc, #168]	@ (8001a14 <accInit+0x150>)
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff ff34 	bl	80017d8 <SEGGER_RTT_printf>

  //
  ret = accRead(0x13);
 8001970:	2013      	movs	r0, #19
 8001972:	f7ff ff73 	bl	800185c <accRead>
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  changeState = ret | 0b01000000;
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	b2db      	uxtb	r3, r3
 8001982:	71bb      	strb	r3, [r7, #6]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	461a      	mov	r2, r3
 8001988:	4923      	ldr	r1, [pc, #140]	@ (8001a18 <accInit+0x154>)
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff ff24 	bl	80017d8 <SEGGER_RTT_printf>
  accWrite(0x13, &changeState);
 8001990:	1dbb      	adds	r3, r7, #6
 8001992:	4619      	mov	r1, r3
 8001994:	2013      	movs	r0, #19
 8001996:	f7ff ff37 	bl	8001808 <accWrite>
  ret = accRead(0x13);
 800199a:	2013      	movs	r0, #19
 800199c:	f7ff ff5e 	bl	800185c <accRead>
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	461a      	mov	r2, r3
 80019a8:	491b      	ldr	r1, [pc, #108]	@ (8001a18 <accInit+0x154>)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff ff14 	bl	80017d8 <SEGGER_RTT_printf>

  // Control Register 7
  ret = accRead(0x16);
 80019b0:	2016      	movs	r0, #22
 80019b2:	f7ff ff53 	bl	800185c <accRead>
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  changeState = ret | 0b00000000;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	71bb      	strb	r3, [r7, #6]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4915      	ldr	r1, [pc, #84]	@ (8001a18 <accInit+0x154>)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ff07 	bl	80017d8 <SEGGER_RTT_printf>
  accWrite(0x16, &changeState);
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	4619      	mov	r1, r3
 80019ce:	2016      	movs	r0, #22
 80019d0:	f7ff ff1a 	bl	8001808 <accWrite>
  ret = accRead(0x16);
 80019d4:	2016      	movs	r0, #22
 80019d6:	f7ff ff41 	bl	800185c <accRead>
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	461a      	mov	r2, r3
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <accInit+0x154>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fef7 	bl	80017d8 <SEGGER_RTT_printf>


  // Control Register 7
  accWrite(0x12, 0x01);
 80019ea:	2101      	movs	r1, #1
 80019ec:	2012      	movs	r0, #18
 80019ee:	f7ff ff0b 	bl	8001808 <accWrite>

}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0800db74 	.word	0x0800db74
 8001a00:	0800db98 	.word	0x0800db98
 8001a04:	0800dbb4 	.word	0x0800dbb4
 8001a08:	0800dbc8 	.word	0x0800dbc8
 8001a0c:	0800dbec 	.word	0x0800dbec
 8001a10:	0800dc18 	.word	0x0800dc18
 8001a14:	0800dc34 	.word	0x0800dc34
 8001a18:	0800dc58 	.word	0x0800dc58

08001a1c <accTask>:

void accTask(void){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  uint8_t LSB;
  uint16_t combinedZ;
  uint16_t combinedY;
  uint16_t combinedX;

  MSB = accRead(0x2D);
 8001a22:	202d      	movs	r0, #45	@ 0x2d
 8001a24:	f7ff ff1a 	bl	800185c <accRead>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  LSB = accRead(0x2C);
 8001a2c:	202c      	movs	r0, #44	@ 0x2c
 8001a2e:	f7ff ff15 	bl	800185c <accRead>
 8001a32:	4603      	mov	r3, r0
 8001a34:	71bb      	strb	r3, [r7, #6]
  combinedZ = (MSB << 8) | LSB;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	80bb      	strh	r3, [r7, #4]

  MSB = accRead(0x2B);
 8001a46:	202b      	movs	r0, #43	@ 0x2b
 8001a48:	f7ff ff08 	bl	800185c <accRead>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  LSB = accRead(0x2A);
 8001a50:	202a      	movs	r0, #42	@ 0x2a
 8001a52:	f7ff ff03 	bl	800185c <accRead>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71bb      	strb	r3, [r7, #6]
  combinedY = (MSB << 8) | LSB;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	807b      	strh	r3, [r7, #2]

  MSB = accRead(0x29);
 8001a6a:	2029      	movs	r0, #41	@ 0x29
 8001a6c:	f7ff fef6 	bl	800185c <accRead>
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  LSB = accRead(0x28);
 8001a74:	2028      	movs	r0, #40	@ 0x28
 8001a76:	f7ff fef1 	bl	800185c <accRead>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
  combinedX = (MSB << 8) | LSB;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	803b      	strh	r3, [r7, #0]

  // +- 4g

  zAcceleration = 4.0f * gravity * ((float)combinedZ / 65536.0f);
 8001a8e:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <accTask+0x14c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa6:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8001b6c <accTask+0x150>
 8001aaa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <accTask+0x154>)
 8001ab4:	edc3 7a00 	vstr	s15, [r3]
  yAcceleration = 4.0f * gravity * ((float)combinedY / 65536.0f);
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <accTask+0x14c>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001ac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ad0:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8001b6c <accTask+0x150>
 8001ad4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <accTask+0x158>)
 8001ade:	edc3 7a00 	vstr	s15, [r3]
  xAcceleration = 4.0f * gravity * ((float)combinedX / 65536.0f);
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <accTask+0x14c>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af0:	883b      	ldrh	r3, [r7, #0]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001afa:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8001b6c <accTask+0x150>
 8001afe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <accTask+0x15c>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]

  firFilterUpdate(&lpfAccZ, zAcceleration, 'A');
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <accTask+0x154>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	2141      	movs	r1, #65	@ 0x41
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	4818      	ldr	r0, [pc, #96]	@ (8001b7c <accTask+0x160>)
 8001b1a:	f000 f893 	bl	8001c44 <firFilterUpdate>
  firFilterUpdate(&lpfAccY, yAcceleration, 'A');
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <accTask+0x158>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	2141      	movs	r1, #65	@ 0x41
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	4815      	ldr	r0, [pc, #84]	@ (8001b80 <accTask+0x164>)
 8001b2c:	f000 f88a 	bl	8001c44 <firFilterUpdate>
  firFilterUpdate(&lpfAccX, xAcceleration, 'A');
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <accTask+0x15c>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	2141      	movs	r1, #65	@ 0x41
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <accTask+0x168>)
 8001b3e:	f000 f881 	bl	8001c44 <firFilterUpdate>

  avgZAcceleration = lpfAccZ.out;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <accTask+0x160>)
 8001b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <accTask+0x16c>)
 8001b4a:	6013      	str	r3, [r2, #0]
  avgYAcceleration = lpfAccY.out;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <accTask+0x164>)
 8001b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b52:	4a0e      	ldr	r2, [pc, #56]	@ (8001b8c <accTask+0x170>)
 8001b54:	6013      	str	r3, [r2, #0]
  avgXAcceleration = lpfAccX.out;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <accTask+0x168>)
 8001b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <accTask+0x174>)
 8001b5e:	6013      	str	r3, [r2, #0]

  return;
 8001b60:	bf00      	nop
}
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000138 	.word	0x20000138
 8001b6c:	47800000 	.word	0x47800000
 8001b70:	20000a9c 	.word	0x20000a9c
 8001b74:	20000a94 	.word	0x20000a94
 8001b78:	20000a98 	.word	0x20000a98
 8001b7c:	20000aac 	.word	0x20000aac
 8001b80:	20000b50 	.word	0x20000b50
 8001b84:	20000bf4 	.word	0x20000bf4
 8001b88:	20000aa8 	.word	0x20000aa8
 8001b8c:	20000aa4 	.word	0x20000aa4
 8001b90:	20000aa0 	.word	0x20000aa0

08001b94 <readTemp>:


void readTemp(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	uint8_t MSB;
	uint8_t LSB;
	uint16_t combinedTemperature;
	MSB = accRead(0x21);
 8001b9a:	2021      	movs	r0, #33	@ 0x21
 8001b9c:	f7ff fe5e 	bl	800185c <accRead>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
	LSB = accRead(0x20);
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f7ff fe59 	bl	800185c <accRead>
 8001baa:	4603      	mov	r3, r0
 8001bac:	71bb      	strb	r3, [r7, #6]

	combinedTemperature = (MSB << 8) | LSB;
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	80bb      	strh	r3, [r7, #4]
	temperature = 4.0f * gravity * ((float)combinedTemperature / 65536.0f);
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <readTemp+0x5c>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	88bb      	ldrh	r3, [r7, #4]
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bd6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8001bf4 <readTemp+0x60>
 8001bda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <readTemp+0x64>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000138 	.word	0x20000138
 8001bf4:	47800000 	.word	0x47800000
 8001bf8:	20000a90 	.word	0x20000a90

08001bfc <firFilterInit>:
        output[i] = y0;
    }
}


void firFilterInit(FIRFilter * fir){
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e009      	b.n	8001c1e <firFilterInit+0x22>
    fir->buf[n] = 0.0f;
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b26      	cmp	r3, #38	@ 0x26
 8001c22:	ddf2      	ble.n	8001c0a <firFilterInit+0xe>
  }
  fir->bufIndex = 0;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  fir->out      = 0.0f;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <firFilterUpdate>:

float firFilterUpdate(FIRFilter * fir, float inp, char sensor){
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c50:	460b      	mov	r3, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
  fir->buf[fir->bufIndex] = inp;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	601a      	str	r2, [r3, #0]
  fir->bufIndex++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  if(fir->bufIndex == FIR_FILTER_LENGTH){
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c78:	2b27      	cmp	r3, #39	@ 0x27
 8001c7a:	d103      	bne.n	8001c84 <firFilterUpdate+0x40>
    fir->bufIndex = 0;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }
  fir->out = 0.0f;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  int sumIndex = fir->bufIndex;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c94:	617b      	str	r3, [r7, #20]

  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e03e      	b.n	8001d1a <firFilterUpdate+0xd6>
    if(sumIndex > 0){
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dd03      	ble.n	8001caa <firFilterUpdate+0x66>
      sumIndex--;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e001      	b.n	8001cae <firFilterUpdate+0x6a>
    }
    else{
      sumIndex = FIR_FILTER_LENGTH - 1;
 8001caa:	2326      	movs	r3, #38	@ 0x26
 8001cac:	617b      	str	r3, [r7, #20]
    }
    if(sensor == 'A'){
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b41      	cmp	r3, #65	@ 0x41
 8001cb2:	d116      	bne.n	8001ce2 <firFilterUpdate+0x9e>
        fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 8001cba:	4a1f      	ldr	r2, [pc, #124]	@ (8001d38 <firFilterUpdate+0xf4>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edd3 6a00 	vldr	s13, [r3]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
 8001ce0:	e018      	b.n	8001d14 <firFilterUpdate+0xd0>
    }
    else if (sensor == 'G'){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b47      	cmp	r3, #71	@ 0x47
 8001ce6:	d115      	bne.n	8001d14 <firFilterUpdate+0xd0>
        fir->out += FIR_HIGH_PASS[n] * fir->buf[sumIndex];
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <firFilterUpdate+0xf8>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	edd3 6a00 	vldr	s13, [r3]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	3301      	adds	r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2b26      	cmp	r3, #38	@ 0x26
 8001d1e:	ddbd      	ble.n	8001c9c <firFilterUpdate+0x58>
    }
  }
  return fir->out;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001d26:	ee07 3a90 	vmov	s15, r3
}
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	2000009c 	.word	0x2000009c

08001d40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d102      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x16>
		accTask();
 8001d50:	f7ff fe64 	bl	8001a1c <accTask>
//		HCSR04_Read_Right();
//		HCSR04_Read_Left();
//		HCSR04_Read_Front();

	}
}
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x22>
	else if(htim == &htim10){
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x22>
		readTemp();
 8001d5e:	f7ff ff19 	bl	8001b94 <readTemp>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200008f8 	.word	0x200008f8
 8001d70:	20000940 	.word	0x20000940

08001d74 <calculate_checksum>:
 * 				|			|			|				|			|			|			|
 *		0XFF  	|	0XFF	|	0X??	|	PARAM + 2	|	 0X03	|	X19		|	0X01	|	0XDC
 *				|			|			|				|			|			|			|
 * ------------------------------------------------------------------------------------------------------
 * **/
uint8_t calculate_checksum(uint8_t *packet, int length) {
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    unsigned int sum = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
    for(int i = 2; i < length - 1; i++) {  // Start from ID (skip 0xFF 0xFF)
 8001d82:	2302      	movs	r3, #2
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	e00a      	b.n	8001d9e <calculate_checksum+0x2a>
        sum += packet[i];
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
    for(int i = 2; i < length - 1; i++) {  // Start from ID (skip 0xFF 0xFF)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbef      	blt.n	8001d88 <calculate_checksum+0x14>
    }
    return (uint8_t)(255 - (sum % 256));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <setServoPosition>:
    HAL_Delay(1);
    setServoPosition(motors[2], motor8Angle);
    return;
}

void setServoPosition(uint8_t address, uint16_t position) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	80bb      	strh	r3, [r7, #4]
    uint8_t sendBuffer[9] = {0xFF, 0xFF, address, 0x05, 0x03, 0x1E,
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	733b      	strb	r3, [r7, #12]
 8001dd0:	23ff      	movs	r3, #255	@ 0xff
 8001dd2:	737b      	strb	r3, [r7, #13]
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	73bb      	strb	r3, [r7, #14]
 8001dd8:	2305      	movs	r3, #5
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	2303      	movs	r3, #3
 8001dde:	743b      	strb	r3, [r7, #16]
 8001de0:	231e      	movs	r3, #30
 8001de2:	747b      	strb	r3, [r7, #17]
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	74bb      	strb	r3, [r7, #18]
 8001dea:	88bb      	ldrh	r3, [r7, #4]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	74fb      	strb	r3, [r7, #19]
 8001df4:	2300      	movs	r3, #0
 8001df6:	753b      	strb	r3, [r7, #20]
                            position & 0xFF,        // Low byte
                            (position >> 8) & 0xFF, // High byte
                            0x00};
    sendBuffer[8] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2109      	movs	r1, #9
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ffb8 	bl	8001d74 <calculate_checksum>
 8001e04:	4603      	mov	r3, r0
 8001e06:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <setServoPosition+0x78>)
 8001e0e:	f001 fff9 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8001e12:	f107 010c 	add.w	r1, r7, #12
 8001e16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e1a:	2209      	movs	r2, #9
 8001e1c:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <setServoPosition+0x7c>)
 8001e1e:	f006 fcff 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2110      	movs	r1, #16
 8001e26:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <setServoPosition+0x78>)
 8001e28:	f001 ffec 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40020400 	.word	0x40020400
 8001e38:	20000a18 	.word	0x20000a18

08001e3c <turnServoLed>:

void turnServoLed(uint8_t address) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
    uint8_t sendBuffer[8]= {0xFF, 0xFF, address, 0x04, 0x03, 0x19, 0x01, 0x00};
 8001e46:	23ff      	movs	r3, #255	@ 0xff
 8001e48:	723b      	strb	r3, [r7, #8]
 8001e4a:	23ff      	movs	r3, #255	@ 0xff
 8001e4c:	727b      	strb	r3, [r7, #9]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	72bb      	strb	r3, [r7, #10]
 8001e52:	2304      	movs	r3, #4
 8001e54:	72fb      	strb	r3, [r7, #11]
 8001e56:	2303      	movs	r3, #3
 8001e58:	733b      	strb	r3, [r7, #12]
 8001e5a:	2319      	movs	r3, #25
 8001e5c:	737b      	strb	r3, [r7, #13]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73bb      	strb	r3, [r7, #14]
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
    sendBuffer[7] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	2108      	movs	r1, #8
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff81 	bl	8001d74 <calculate_checksum>
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001e76:	2201      	movs	r2, #1
 8001e78:	2110      	movs	r1, #16
 8001e7a:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <turnServoLed+0x68>)
 8001e7c:	f001 ffc2 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8001e80:	f107 0108 	add.w	r1, r7, #8
 8001e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e88:	2208      	movs	r2, #8
 8001e8a:	4807      	ldr	r0, [pc, #28]	@ (8001ea8 <turnServoLed+0x6c>)
 8001e8c:	f006 fcc8 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2110      	movs	r1, #16
 8001e94:	4803      	ldr	r0, [pc, #12]	@ (8001ea4 <turnServoLed+0x68>)
 8001e96:	f001 ffb5 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	20000a18 	.word	0x20000a18

08001eac <setCWAngleLimit>:

void setCWAngleLimit(uint8_t address, uint16_t angle) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	80bb      	strh	r3, [r7, #4]
    uint8_t sendBuffer[9] = {0xFF, 0xFF, address, 0x05, 0x03, 0x06,
 8001ebc:	23ff      	movs	r3, #255	@ 0xff
 8001ebe:	733b      	strb	r3, [r7, #12]
 8001ec0:	23ff      	movs	r3, #255	@ 0xff
 8001ec2:	737b      	strb	r3, [r7, #13]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	73bb      	strb	r3, [r7, #14]
 8001ec8:	2305      	movs	r3, #5
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	2303      	movs	r3, #3
 8001ece:	743b      	strb	r3, [r7, #16]
 8001ed0:	2306      	movs	r3, #6
 8001ed2:	747b      	strb	r3, [r7, #17]
 8001ed4:	88bb      	ldrh	r3, [r7, #4]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	74bb      	strb	r3, [r7, #18]
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	74fb      	strb	r3, [r7, #19]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	753b      	strb	r3, [r7, #20]
                            angle & 0xFF,        // Low byte
                            (angle >> 8) & 0xFF, // High byte
                            0x00};
    sendBuffer[8] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2109      	movs	r1, #9
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff40 	bl	8001d74 <calculate_checksum>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2110      	movs	r1, #16
 8001efc:	4809      	ldr	r0, [pc, #36]	@ (8001f24 <setCWAngleLimit+0x78>)
 8001efe:	f001 ff81 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8001f02:	f107 010c 	add.w	r1, r7, #12
 8001f06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0a:	2209      	movs	r2, #9
 8001f0c:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <setCWAngleLimit+0x7c>)
 8001f0e:	f006 fc87 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2110      	movs	r1, #16
 8001f16:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <setCWAngleLimit+0x78>)
 8001f18:	f001 ff74 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40020400 	.word	0x40020400
 8001f28:	20000a18 	.word	0x20000a18

08001f2c <setCCWAngleLimit>:

void setCCWAngleLimit(uint8_t address, uint16_t angle) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	80bb      	strh	r3, [r7, #4]
    uint8_t sendBuffer[9] = {0xFF, 0xFF, address, 0x05, 0x03, 0x08,
 8001f3c:	23ff      	movs	r3, #255	@ 0xff
 8001f3e:	733b      	strb	r3, [r7, #12]
 8001f40:	23ff      	movs	r3, #255	@ 0xff
 8001f42:	737b      	strb	r3, [r7, #13]
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	73bb      	strb	r3, [r7, #14]
 8001f48:	2305      	movs	r3, #5
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	743b      	strb	r3, [r7, #16]
 8001f50:	2308      	movs	r3, #8
 8001f52:	747b      	strb	r3, [r7, #17]
 8001f54:	88bb      	ldrh	r3, [r7, #4]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	74bb      	strb	r3, [r7, #18]
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	74fb      	strb	r3, [r7, #19]
 8001f64:	2300      	movs	r3, #0
 8001f66:	753b      	strb	r3, [r7, #20]
                            angle & 0xFF,        // Low byte
                            (angle >> 8) & 0xFF, // High byte
                            0x00};
    sendBuffer[8] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2109      	movs	r1, #9
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff00 	bl	8001d74 <calculate_checksum>
 8001f74:	4603      	mov	r3, r0
 8001f76:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <setCCWAngleLimit+0x78>)
 8001f7e:	f001 ff41 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8001f82:	f107 010c 	add.w	r1, r7, #12
 8001f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f8a:	2209      	movs	r2, #9
 8001f8c:	4806      	ldr	r0, [pc, #24]	@ (8001fa8 <setCCWAngleLimit+0x7c>)
 8001f8e:	f006 fc47 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2110      	movs	r1, #16
 8001f96:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <setCCWAngleLimit+0x78>)
 8001f98:	f001 ff34 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	20000a18 	.word	0x20000a18

08001fac <setMovingSpeed>:

void setMovingSpeed(uint8_t address, uint16_t speed) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	71fb      	strb	r3, [r7, #7]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	80bb      	strh	r3, [r7, #4]
    uint8_t sendBuffer[9] = {0xFF, 0xFF, address, 0x05, 0x03, 0x20,
 8001fbc:	23ff      	movs	r3, #255	@ 0xff
 8001fbe:	733b      	strb	r3, [r7, #12]
 8001fc0:	23ff      	movs	r3, #255	@ 0xff
 8001fc2:	737b      	strb	r3, [r7, #13]
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	73bb      	strb	r3, [r7, #14]
 8001fc8:	2305      	movs	r3, #5
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	2303      	movs	r3, #3
 8001fce:	743b      	strb	r3, [r7, #16]
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	747b      	strb	r3, [r7, #17]
 8001fd4:	88bb      	ldrh	r3, [r7, #4]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	74bb      	strb	r3, [r7, #18]
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	74fb      	strb	r3, [r7, #19]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	753b      	strb	r3, [r7, #20]
                            speed & 0xFF,        // Low byte
                            (speed >> 8) & 0xFF, // High byte
                            0x00};
    sendBuffer[8] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2109      	movs	r1, #9
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fec0 	bl	8001d74 <calculate_checksum>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4809      	ldr	r0, [pc, #36]	@ (8002024 <setMovingSpeed+0x78>)
 8001ffe:	f001 ff01 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8002002:	f107 010c 	add.w	r1, r7, #12
 8002006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800200a:	2209      	movs	r2, #9
 800200c:	4806      	ldr	r0, [pc, #24]	@ (8002028 <setMovingSpeed+0x7c>)
 800200e:	f006 fc07 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2110      	movs	r1, #16
 8002016:	4803      	ldr	r0, [pc, #12]	@ (8002024 <setMovingSpeed+0x78>)
 8002018:	f001 fef4 	bl	8003e04 <HAL_GPIO_WritePin>
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40020400 	.word	0x40020400
 8002028:	20000a18 	.word	0x20000a18

0800202c <setTorqueLimit>:

void setTorqueLimit(uint8_t address, uint16_t torque) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	80bb      	strh	r3, [r7, #4]
    uint8_t sendBuffer[9] = {0xFF, 0xFF, address, 0x05, 0x03, 0x22,
 800203c:	23ff      	movs	r3, #255	@ 0xff
 800203e:	733b      	strb	r3, [r7, #12]
 8002040:	23ff      	movs	r3, #255	@ 0xff
 8002042:	737b      	strb	r3, [r7, #13]
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	73bb      	strb	r3, [r7, #14]
 8002048:	2305      	movs	r3, #5
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	2303      	movs	r3, #3
 800204e:	743b      	strb	r3, [r7, #16]
 8002050:	2322      	movs	r3, #34	@ 0x22
 8002052:	747b      	strb	r3, [r7, #17]
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	74bb      	strb	r3, [r7, #18]
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	74fb      	strb	r3, [r7, #19]
 8002064:	2300      	movs	r3, #0
 8002066:	753b      	strb	r3, [r7, #20]
                            torque & 0xFF,        // Low byte
                            (torque >> 8) & 0xFF, // High byte
                            0x00};
    sendBuffer[8] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2109      	movs	r1, #9
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fe80 	bl	8001d74 <calculate_checksum>
 8002074:	4603      	mov	r3, r0
 8002076:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2110      	movs	r1, #16
 800207c:	4809      	ldr	r0, [pc, #36]	@ (80020a4 <setTorqueLimit+0x78>)
 800207e:	f001 fec1 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8002082:	f107 010c 	add.w	r1, r7, #12
 8002086:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800208a:	2209      	movs	r2, #9
 800208c:	4806      	ldr	r0, [pc, #24]	@ (80020a8 <setTorqueLimit+0x7c>)
 800208e:	f006 fbc7 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2110      	movs	r1, #16
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <setTorqueLimit+0x78>)
 8002098:	f001 feb4 	bl	8003e04 <HAL_GPIO_WritePin>
}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020400 	.word	0x40020400
 80020a8:	20000a18 	.word	0x20000a18

080020ac <setMaxTorque>:

void setMaxTorque(uint8_t address, uint16_t maxTorque) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	460a      	mov	r2, r1
 80020b6:	71fb      	strb	r3, [r7, #7]
 80020b8:	4613      	mov	r3, r2
 80020ba:	80bb      	strh	r3, [r7, #4]
    uint8_t sendBuffer[9] = {0xFF, 0xFF, address, 0x05, 0x03, 0x0E,
 80020bc:	23ff      	movs	r3, #255	@ 0xff
 80020be:	733b      	strb	r3, [r7, #12]
 80020c0:	23ff      	movs	r3, #255	@ 0xff
 80020c2:	737b      	strb	r3, [r7, #13]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	73bb      	strb	r3, [r7, #14]
 80020c8:	2305      	movs	r3, #5
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	2303      	movs	r3, #3
 80020ce:	743b      	strb	r3, [r7, #16]
 80020d0:	230e      	movs	r3, #14
 80020d2:	747b      	strb	r3, [r7, #17]
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	74bb      	strb	r3, [r7, #18]
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	74fb      	strb	r3, [r7, #19]
 80020e4:	2300      	movs	r3, #0
 80020e6:	753b      	strb	r3, [r7, #20]
                            maxTorque & 0xFF,        // Low byte
                            (maxTorque >> 8) & 0xFF, // High byte
                            0x00};
    sendBuffer[8] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	2109      	movs	r1, #9
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fe40 	bl	8001d74 <calculate_checksum>
 80020f4:	4603      	mov	r3, r0
 80020f6:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2110      	movs	r1, #16
 80020fc:	4809      	ldr	r0, [pc, #36]	@ (8002124 <setMaxTorque+0x78>)
 80020fe:	f001 fe81 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8002102:	f107 010c 	add.w	r1, r7, #12
 8002106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800210a:	2209      	movs	r2, #9
 800210c:	4806      	ldr	r0, [pc, #24]	@ (8002128 <setMaxTorque+0x7c>)
 800210e:	f006 fb87 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	2110      	movs	r1, #16
 8002116:	4803      	ldr	r0, [pc, #12]	@ (8002124 <setMaxTorque+0x78>)
 8002118:	f001 fe74 	bl	8003e04 <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40020400 	.word	0x40020400
 8002128:	20000a18 	.word	0x20000a18

0800212c <setTorqueEnable>:

void setTorqueEnable(uint8_t address, uint8_t enable) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	460a      	mov	r2, r1
 8002136:	71fb      	strb	r3, [r7, #7]
 8002138:	4613      	mov	r3, r2
 800213a:	71bb      	strb	r3, [r7, #6]
    uint8_t sendBuffer[8] = {0xFF, 0xFF, address, 0x04, 0x03, 0x18, enable, 0x00};
 800213c:	23ff      	movs	r3, #255	@ 0xff
 800213e:	723b      	strb	r3, [r7, #8]
 8002140:	23ff      	movs	r3, #255	@ 0xff
 8002142:	727b      	strb	r3, [r7, #9]
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	72bb      	strb	r3, [r7, #10]
 8002148:	2304      	movs	r3, #4
 800214a:	72fb      	strb	r3, [r7, #11]
 800214c:	2303      	movs	r3, #3
 800214e:	733b      	strb	r3, [r7, #12]
 8002150:	2318      	movs	r3, #24
 8002152:	737b      	strb	r3, [r7, #13]
 8002154:	79bb      	ldrb	r3, [r7, #6]
 8002156:	73bb      	strb	r3, [r7, #14]
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
    sendBuffer[7] = calculate_checksum(sendBuffer, sizeof(sendBuffer));
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	2108      	movs	r1, #8
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fe06 	bl	8001d74 <calculate_checksum>
 8002168:	4603      	mov	r3, r0
 800216a:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800216c:	2201      	movs	r2, #1
 800216e:	2110      	movs	r1, #16
 8002170:	4809      	ldr	r0, [pc, #36]	@ (8002198 <setTorqueEnable+0x6c>)
 8002172:	f001 fe47 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), 0xFFFF);
 8002176:	f107 0108 	add.w	r1, r7, #8
 800217a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800217e:	2208      	movs	r2, #8
 8002180:	4806      	ldr	r0, [pc, #24]	@ (800219c <setTorqueEnable+0x70>)
 8002182:	f006 fb4d 	bl	8008820 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2110      	movs	r1, #16
 800218a:	4803      	ldr	r0, [pc, #12]	@ (8002198 <setTorqueEnable+0x6c>)
 800218c:	f001 fe3a 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40020400 	.word	0x40020400
 800219c:	20000a18 	.word	0x20000a18

080021a0 <HAL_TIM_IC_CaptureCallback>:
static uint8_t Is_First_Captured_Left = 0;
static uint8_t Is_First_Captured_Back = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    uint32_t Difference = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

    // Front Sensor - Channel 1
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7f1b      	ldrb	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f040 8082 	bne.w	80022ba <HAL_TIM_IC_CaptureCallback+0x11a>
    {
        if (Is_First_Captured_Front == 0) // First rising edge
 80021b6:	4b98      	ldr	r3, [pc, #608]	@ (8002418 <HAL_TIM_IC_CaptureCallback+0x278>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11a      	bne.n	80021f4 <HAL_TIM_IC_CaptureCallback+0x54>
        {
            IC_Val1_Front = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f005 fda5 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4a94      	ldr	r2, [pc, #592]	@ (800241c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80021ca:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Front = 1;
 80021cc:	4b92      	ldr	r3, [pc, #584]	@ (8002418 <HAL_TIM_IC_CaptureCallback+0x278>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
            // Change polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 020a 	bic.w	r2, r2, #10
 80021e0:	621a      	str	r2, [r3, #32]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0202 	orr.w	r2, r2, #2
 80021f0:	621a      	str	r2, [r3, #32]

            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_4);
        }
    }
}
 80021f2:	e20c      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
        else if (Is_First_Captured_Front == 1) // Falling edge
 80021f4:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <HAL_TIM_IC_CaptureCallback+0x278>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 8208 	bne.w	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
            IC_Val2_Front = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021fe:	2100      	movs	r1, #0
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f005 fd85 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 8002206:	4603      	mov	r3, r0
 8002208:	4a85      	ldr	r2, [pc, #532]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0x280>)
 800220a:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2_Front > IC_Val1_Front)
 8002214:	4b82      	ldr	r3, [pc, #520]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b80      	ldr	r3, [pc, #512]	@ (800241c <HAL_TIM_IC_CaptureCallback+0x27c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d906      	bls.n	800222e <HAL_TIM_IC_CaptureCallback+0x8e>
                Difference = IC_Val2_Front - IC_Val1_Front;
 8002220:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b7d      	ldr	r3, [pc, #500]	@ (800241c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00e      	b.n	800224c <HAL_TIM_IC_CaptureCallback+0xac>
            else if (IC_Val1_Front > IC_Val2_Front)
 800222e:	4b7b      	ldr	r3, [pc, #492]	@ (800241c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b7b      	ldr	r3, [pc, #492]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d908      	bls.n	800224c <HAL_TIM_IC_CaptureCallback+0xac>
                Difference = (0xffff - IC_Val1_Front) + IC_Val2_Front;
 800223a:	4b79      	ldr	r3, [pc, #484]	@ (8002420 <HAL_TIM_IC_CaptureCallback+0x280>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b77      	ldr	r3, [pc, #476]	@ (800241c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002248:	33ff      	adds	r3, #255	@ 0xff
 800224a:	60fb      	str	r3, [r7, #12]
            Distance_Front = (float)Difference * .034/2;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002256:	ee17 0a90 	vmov	r0, s15
 800225a:	f7fe f98d 	bl	8000578 <__aeabi_f2d>
 800225e:	a36c      	add	r3, pc, #432	@ (adr r3, 8002410 <HAL_TIM_IC_CaptureCallback+0x270>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f9e0 	bl	8000628 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002278:	f7fe fb00 	bl	800087c <__aeabi_ddiv>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fbe2 	bl	8000a4c <__aeabi_d2f>
 8002288:	4603      	mov	r3, r0
 800228a:	4a66      	ldr	r2, [pc, #408]	@ (8002424 <HAL_TIM_IC_CaptureCallback+0x284>)
 800228c:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Front = 0;
 800228e:	4b62      	ldr	r3, [pc, #392]	@ (8002418 <HAL_TIM_IC_CaptureCallback+0x278>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020a 	bic.w	r2, r2, #10
 80022a2:	621a      	str	r2, [r3, #32]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a12      	ldr	r2, [r2, #32]
 80022ae:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 f968 	bl	8007588 <HAL_TIM_IC_Stop_IT>
}
 80022b8:	e1a9      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7f1b      	ldrb	r3, [r3, #28]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	f040 8082 	bne.w	80023c8 <HAL_TIM_IC_CaptureCallback+0x228>
        if (Is_First_Captured_Right == 0)
 80022c4:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <HAL_TIM_IC_CaptureCallback+0x288>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11a      	bne.n	8002302 <HAL_TIM_IC_CaptureCallback+0x162>
            IC_Val1_Right = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80022cc:	2104      	movs	r1, #4
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f005 fd1e 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a55      	ldr	r2, [pc, #340]	@ (800242c <HAL_TIM_IC_CaptureCallback+0x28c>)
 80022d8:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Right = 1;
 80022da:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_TIM_IC_CaptureCallback+0x288>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022ee:	621a      	str	r2, [r3, #32]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0220 	orr.w	r2, r2, #32
 80022fe:	621a      	str	r2, [r3, #32]
}
 8002300:	e185      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
        else if (Is_First_Captured_Right == 1)
 8002302:	4b49      	ldr	r3, [pc, #292]	@ (8002428 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 8181 	bne.w	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
            IC_Val2_Right = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800230c:	2104      	movs	r1, #4
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 fcfe 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 8002314:	4603      	mov	r3, r0
 8002316:	4a46      	ldr	r2, [pc, #280]	@ (8002430 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002318:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2_Right > IC_Val1_Right)
 8002322:	4b43      	ldr	r3, [pc, #268]	@ (8002430 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d906      	bls.n	800233c <HAL_TIM_IC_CaptureCallback+0x19c>
                Difference = IC_Val2_Right - IC_Val1_Right;
 800232e:	4b40      	ldr	r3, [pc, #256]	@ (8002430 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	e00e      	b.n	800235a <HAL_TIM_IC_CaptureCallback+0x1ba>
            else if (IC_Val1_Right > IC_Val2_Right)
 800233c:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_TIM_IC_CaptureCallback+0x290>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d908      	bls.n	800235a <HAL_TIM_IC_CaptureCallback+0x1ba>
                Difference = (0xffff - IC_Val1_Right) + IC_Val2_Right;
 8002348:	4b39      	ldr	r3, [pc, #228]	@ (8002430 <HAL_TIM_IC_CaptureCallback+0x290>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b37      	ldr	r3, [pc, #220]	@ (800242c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002356:	33ff      	adds	r3, #255	@ 0xff
 8002358:	60fb      	str	r3, [r7, #12]
            Distance_Right = (float)Difference * .034/2;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002364:	ee17 0a90 	vmov	r0, s15
 8002368:	f7fe f906 	bl	8000578 <__aeabi_f2d>
 800236c:	a328      	add	r3, pc, #160	@ (adr r3, 8002410 <HAL_TIM_IC_CaptureCallback+0x270>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe f959 	bl	8000628 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002386:	f7fe fa79 	bl	800087c <__aeabi_ddiv>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fb5b 	bl	8000a4c <__aeabi_d2f>
 8002396:	4603      	mov	r3, r0
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <HAL_TIM_IC_CaptureCallback+0x294>)
 800239a:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Right = 0;
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_TIM_IC_CaptureCallback+0x288>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023b0:	621a      	str	r2, [r3, #32]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a12      	ldr	r2, [r2, #32]
 80023bc:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 80023be:	2104      	movs	r1, #4
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f005 f8e1 	bl	8007588 <HAL_TIM_IC_Stop_IT>
}
 80023c6:	e122      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7f1b      	ldrb	r3, [r3, #28]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	f040 809a 	bne.w	8002506 <HAL_TIM_IC_CaptureCallback+0x366>
        if (Is_First_Captured_Left == 0)
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_TIM_IC_CaptureCallback+0x298>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d132      	bne.n	8002440 <HAL_TIM_IC_CaptureCallback+0x2a0>
            IC_Val1_Left = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80023da:	2108      	movs	r1, #8
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 fc97 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a15      	ldr	r2, [pc, #84]	@ (800243c <HAL_TIM_IC_CaptureCallback+0x29c>)
 80023e6:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Left = 1;
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_TIM_IC_CaptureCallback+0x298>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	e0fe      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
 8002410:	b020c49c 	.word	0xb020c49c
 8002414:	3fa16872 	.word	0x3fa16872
 8002418:	20000d98 	.word	0x20000d98
 800241c:	20000a70 	.word	0x20000a70
 8002420:	20000a74 	.word	0x20000a74
 8002424:	20000a8c 	.word	0x20000a8c
 8002428:	20000d99 	.word	0x20000d99
 800242c:	20000a68 	.word	0x20000a68
 8002430:	20000a6c 	.word	0x20000a6c
 8002434:	20000a84 	.word	0x20000a84
 8002438:	20000d9a 	.word	0x20000d9a
 800243c:	20000a60 	.word	0x20000a60
        else if (Is_First_Captured_Left == 1)
 8002440:	4b77      	ldr	r3, [pc, #476]	@ (8002620 <HAL_TIM_IC_CaptureCallback+0x480>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 80e2 	bne.w	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
            IC_Val2_Left = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800244a:	2108      	movs	r1, #8
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f005 fc5f 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 8002452:	4603      	mov	r3, r0
 8002454:	4a73      	ldr	r2, [pc, #460]	@ (8002624 <HAL_TIM_IC_CaptureCallback+0x484>)
 8002456:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2_Left > IC_Val1_Left)
 8002460:	4b70      	ldr	r3, [pc, #448]	@ (8002624 <HAL_TIM_IC_CaptureCallback+0x484>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b70      	ldr	r3, [pc, #448]	@ (8002628 <HAL_TIM_IC_CaptureCallback+0x488>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d906      	bls.n	800247a <HAL_TIM_IC_CaptureCallback+0x2da>
                Difference = IC_Val2_Left - IC_Val1_Left;
 800246c:	4b6d      	ldr	r3, [pc, #436]	@ (8002624 <HAL_TIM_IC_CaptureCallback+0x484>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b6d      	ldr	r3, [pc, #436]	@ (8002628 <HAL_TIM_IC_CaptureCallback+0x488>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e00e      	b.n	8002498 <HAL_TIM_IC_CaptureCallback+0x2f8>
            else if (IC_Val1_Left > IC_Val2_Left)
 800247a:	4b6b      	ldr	r3, [pc, #428]	@ (8002628 <HAL_TIM_IC_CaptureCallback+0x488>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b69      	ldr	r3, [pc, #420]	@ (8002624 <HAL_TIM_IC_CaptureCallback+0x484>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d908      	bls.n	8002498 <HAL_TIM_IC_CaptureCallback+0x2f8>
                Difference = (0xffff - IC_Val1_Left) + IC_Val2_Left;
 8002486:	4b67      	ldr	r3, [pc, #412]	@ (8002624 <HAL_TIM_IC_CaptureCallback+0x484>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <HAL_TIM_IC_CaptureCallback+0x488>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002494:	33ff      	adds	r3, #255	@ 0xff
 8002496:	60fb      	str	r3, [r7, #12]
            Distance_Left = (float)Difference * .034/2;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	ee17 0a90 	vmov	r0, s15
 80024a6:	f7fe f867 	bl	8000578 <__aeabi_f2d>
 80024aa:	a35b      	add	r3, pc, #364	@ (adr r3, 8002618 <HAL_TIM_IC_CaptureCallback+0x478>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8ba 	bl	8000628 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024c4:	f7fe f9da 	bl	800087c <__aeabi_ddiv>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fabc 	bl	8000a4c <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a55      	ldr	r2, [pc, #340]	@ (800262c <HAL_TIM_IC_CaptureCallback+0x48c>)
 80024d8:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Left = 0;
 80024da:	4b51      	ldr	r3, [pc, #324]	@ (8002620 <HAL_TIM_IC_CaptureCallback+0x480>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80024ee:	621a      	str	r2, [r3, #32]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a12      	ldr	r2, [r2, #32]
 80024fa:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_3);
 80024fc:	2108      	movs	r1, #8
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f005 f842 	bl	8007588 <HAL_TIM_IC_Stop_IT>
}
 8002504:	e083      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7f1b      	ldrb	r3, [r3, #28]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d17f      	bne.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
        if (Is_First_Captured_Back == 0)
 800250e:	4b48      	ldr	r3, [pc, #288]	@ (8002630 <HAL_TIM_IC_CaptureCallback+0x490>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11a      	bne.n	800254c <HAL_TIM_IC_CaptureCallback+0x3ac>
            IC_Val1_Back = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002516:	210c      	movs	r1, #12
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f005 fbf9 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 800251e:	4603      	mov	r3, r0
 8002520:	4a44      	ldr	r2, [pc, #272]	@ (8002634 <HAL_TIM_IC_CaptureCallback+0x494>)
 8002522:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Back = 1;
 8002524:	4b42      	ldr	r3, [pc, #264]	@ (8002630 <HAL_TIM_IC_CaptureCallback+0x490>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002538:	621a      	str	r2, [r3, #32]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002548:	621a      	str	r2, [r3, #32]
}
 800254a:	e060      	b.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
        else if (Is_First_Captured_Back == 1)
 800254c:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_TIM_IC_CaptureCallback+0x490>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d15c      	bne.n	800260e <HAL_TIM_IC_CaptureCallback+0x46e>
            IC_Val2_Back = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002554:	210c      	movs	r1, #12
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f005 fbda 	bl	8007d10 <HAL_TIM_ReadCapturedValue>
 800255c:	4603      	mov	r3, r0
 800255e:	4a36      	ldr	r2, [pc, #216]	@ (8002638 <HAL_TIM_IC_CaptureCallback+0x498>)
 8002560:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2_Back > IC_Val1_Back)
 800256a:	4b33      	ldr	r3, [pc, #204]	@ (8002638 <HAL_TIM_IC_CaptureCallback+0x498>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_TIM_IC_CaptureCallback+0x494>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d906      	bls.n	8002584 <HAL_TIM_IC_CaptureCallback+0x3e4>
                Difference = IC_Val2_Back - IC_Val1_Back;
 8002576:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <HAL_TIM_IC_CaptureCallback+0x498>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <HAL_TIM_IC_CaptureCallback+0x494>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e00e      	b.n	80025a2 <HAL_TIM_IC_CaptureCallback+0x402>
            else if (IC_Val1_Back > IC_Val2_Back)
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <HAL_TIM_IC_CaptureCallback+0x494>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_TIM_IC_CaptureCallback+0x498>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d908      	bls.n	80025a2 <HAL_TIM_IC_CaptureCallback+0x402>
                Difference = (0xffff - IC_Val1_Back) + IC_Val2_Back;
 8002590:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <HAL_TIM_IC_CaptureCallback+0x498>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <HAL_TIM_IC_CaptureCallback+0x494>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800259e:	33ff      	adds	r3, #255	@ 0xff
 80025a0:	60fb      	str	r3, [r7, #12]
            Distance_Back = (float)Difference * .034/2;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ac:	ee17 0a90 	vmov	r0, s15
 80025b0:	f7fd ffe2 	bl	8000578 <__aeabi_f2d>
 80025b4:	a318      	add	r3, pc, #96	@ (adr r3, 8002618 <HAL_TIM_IC_CaptureCallback+0x478>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f7fe f835 	bl	8000628 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80025ce:	f7fe f955 	bl	800087c <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fa37 	bl	8000a4c <__aeabi_d2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a16      	ldr	r2, [pc, #88]	@ (800263c <HAL_TIM_IC_CaptureCallback+0x49c>)
 80025e2:	6013      	str	r3, [r2, #0]
            Is_First_Captured_Back = 0;
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_TIM_IC_CaptureCallback+0x490>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a1a      	ldr	r2, [r3, #32]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80025f8:	621a      	str	r2, [r3, #32]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a12      	ldr	r2, [r2, #32]
 8002604:	621a      	str	r2, [r3, #32]
            HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_4);
 8002606:	210c      	movs	r1, #12
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f004 ffbd 	bl	8007588 <HAL_TIM_IC_Stop_IT>
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	b020c49c 	.word	0xb020c49c
 800261c:	3fa16872 	.word	0x3fa16872
 8002620:	20000d9a 	.word	0x20000d9a
 8002624:	20000a64 	.word	0x20000a64
 8002628:	20000a60 	.word	0x20000a60
 800262c:	20000a80 	.word	0x20000a80
 8002630:	20000d9b 	.word	0x20000d9b
 8002634:	20000a78 	.word	0x20000a78
 8002638:	20000a7c 	.word	0x20000a7c
 800263c:	20000a88 	.word	0x20000a88

08002640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b0df      	sub	sp, #380	@ 0x17c
 8002644:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002646:	f001 f8a1 	bl	800378c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800264a:	f000 f9b5 	bl	80029b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800264e:	f000 fca9 	bl	8002fa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002652:	f000 fa4b 	bl	8002aec <MX_SPI1_Init>
  MX_TIM1_Init();
 8002656:	f000 fa7f 	bl	8002b58 <MX_TIM1_Init>
  MX_TIM2_Init();
 800265a:	f000 facd 	bl	8002bf8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800265e:	f000 fb5b 	bl	8002d18 <MX_TIM4_Init>
  MX_I2C3_Init();
 8002662:	f000 fa15 	bl	8002a90 <MX_I2C3_Init>
  MX_TIM7_Init();
 8002666:	f000 fbd1 	bl	8002e0c <MX_TIM7_Init>
  MX_TIM14_Init();
 800266a:	f000 fc4d 	bl	8002f08 <MX_TIM14_Init>
  MX_TIM10_Init();
 800266e:	f000 fc03 	bl	8002e78 <MX_TIM10_Init>
  MX_TIM13_Init();
 8002672:	f000 fc25 	bl	8002ec0 <MX_TIM13_Init>
  MX_USB_DEVICE_Init();
 8002676:	f009 ffcd 	bl	800c614 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800267a:	f000 fc69 	bl	8002f50 <MX_USART1_UART_Init>
  char rxBuffer[8];

  char txBuffer[8];

//  motorInit();
  accInit();
 800267e:	f7ff f921 	bl	80018c4 <accInit>
  firFilterInit(&lpfAccZ);
 8002682:	48be      	ldr	r0, [pc, #760]	@ (800297c <main+0x33c>)
 8002684:	f7ff faba 	bl	8001bfc <firFilterInit>
  firFilterInit(&lpfAccY);
 8002688:	48bd      	ldr	r0, [pc, #756]	@ (8002980 <main+0x340>)
 800268a:	f7ff fab7 	bl	8001bfc <firFilterInit>
  firFilterInit(&lpfAccX);
 800268e:	48bd      	ldr	r0, [pc, #756]	@ (8002984 <main+0x344>)
 8002690:	f7ff fab4 	bl	8001bfc <firFilterInit>

//  HAL_TIM_Base_Start(&htim14); // ultrasonic timing
  HAL_TIM_Base_Start_IT(&htim7); // accelerometer sampling timer
 8002694:	48bc      	ldr	r0, [pc, #752]	@ (8002988 <main+0x348>)
 8002696:	f004 fe5f 	bl	8007358 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim10); // gyro sampling timer
//  HAL_TIM_Base_Start_IT(&htim13); // ultrasonic sampling timer

  char * newData[64];
  int blink = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  char * updated;
  uint8_t returnValue[6];


  uint8_t motors[] = {0x02, 0x06, 0x08};  // Array of motor IDs
 80026a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80026a8:	4ab8      	ldr	r2, [pc, #736]	@ (800298c <main+0x34c>)
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4611      	mov	r1, r2
 80026ae:	8019      	strh	r1, [r3, #0]
 80026b0:	3302      	adds	r3, #2
 80026b2:	0c12      	lsrs	r2, r2, #16
 80026b4:	701a      	strb	r2, [r3, #0]

  // Set limits for each motor
  for(int i = 0; i < 3; i++) {
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80026bc:	e061      	b.n	8002782 <main+0x142>
      // Set CW (minimum) limit to 0
      setCWAngleLimit(motors[i], 0);
 80026be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c2:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80026c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fbeb 	bl	8001eac <setCWAngleLimit>
	  HAL_Delay (50);
 80026d6:	2032      	movs	r0, #50	@ 0x32
 80026d8:	f001 f8ca 	bl	8003870 <HAL_Delay>

      // Set CCW (maximum) limit to 1023 (300 degrees)
      setCCWAngleLimit(motors[i], 1023);
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80026e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fc1b 	bl	8001f2c <setCCWAngleLimit>
	  HAL_Delay (50);
 80026f6:	2032      	movs	r0, #50	@ 0x32
 80026f8:	f001 f8ba 	bl	8003870 <HAL_Delay>
      setTorqueLimit(motors[i], 1023);
 80026fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002700:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002704:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fc8b 	bl	800202c <setTorqueLimit>
	  HAL_Delay (50);
 8002716:	2032      	movs	r0, #50	@ 0x32
 8002718:	f001 f8aa 	bl	8003870 <HAL_Delay>
      setTorqueEnable(motors[i], 1);
 800271c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002720:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002724:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002728:	4413      	add	r3, r2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fcfc 	bl	800212c <setTorqueEnable>
	  HAL_Delay (50);
 8002734:	2032      	movs	r0, #50	@ 0x32
 8002736:	f001 f89b 	bl	8003870 <HAL_Delay>
      setMaxTorque(motors[i], 1023);
 800273a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800273e:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002742:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002746:	4413      	add	r3, r2
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fcac 	bl	80020ac <setMaxTorque>
	  HAL_Delay (50);
 8002754:	2032      	movs	r0, #50	@ 0x32
 8002756:	f001 f88b 	bl	8003870 <HAL_Delay>
      setMovingSpeed(motors[i], 0x002F);
 800275a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800275e:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002762:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	212f      	movs	r1, #47	@ 0x2f
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fc1d 	bl	8001fac <setMovingSpeed>
	  HAL_Delay (50);
 8002772:	2032      	movs	r0, #50	@ 0x32
 8002774:	f001 f87c 	bl	8003870 <HAL_Delay>
  for(int i = 0; i < 3; i++) {
 8002778:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800277c:	3301      	adds	r3, #1
 800277e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002782:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002786:	2b02      	cmp	r3, #2
 8002788:	dd99      	ble.n	80026be <main+0x7e>
    /* USER CODE BEGIN 3 */
//	  for(int i = 0; i < 3; i++) {
//
//		  setTorqueEnable(motors[i], 1, returnValue);
//	  }
	  turnServoLed(0x06);
 800278a:	2006      	movs	r0, #6
 800278c:	f7ff fb56 	bl	8001e3c <turnServoLed>
	  HAL_Delay (50);
 8002790:	2032      	movs	r0, #50	@ 0x32
 8002792:	f001 f86d 	bl	8003870 <HAL_Delay>
	  turnServoLed(0x02);
 8002796:	2002      	movs	r0, #2
 8002798:	f7ff fb50 	bl	8001e3c <turnServoLed>
	  HAL_Delay (50);
 800279c:	2032      	movs	r0, #50	@ 0x32
 800279e:	f001 f867 	bl	8003870 <HAL_Delay>
	  turnServoLed(0x08);
 80027a2:	2008      	movs	r0, #8
 80027a4:	f7ff fb4a 	bl	8001e3c <turnServoLed>
	  HAL_Delay (50);
 80027a8:	2032      	movs	r0, #50	@ 0x32
 80027aa:	f001 f861 	bl	8003870 <HAL_Delay>
	  //
	  int result;
	  memset(data, 0, BUFFER_SIZE);
 80027ae:	2280      	movs	r2, #128	@ 0x80
 80027b0:	2100      	movs	r1, #0
 80027b2:	4877      	ldr	r0, [pc, #476]	@ (8002990 <main+0x350>)
 80027b4:	f00a fd4c 	bl	800d250 <memset>
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 80027b8:	4b76      	ldr	r3, [pc, #472]	@ (8002994 <main+0x354>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	eefd 6ae7 	vcvt.s32.f32	s13, s15
			  	  	  	 (int)avgXAcceleration,
			  	         (int)((avgXAcceleration - (int)avgXAcceleration) * 100),
 80027c2:	4b74      	ldr	r3, [pc, #464]	@ (8002994 <main+0x354>)
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	4b72      	ldr	r3, [pc, #456]	@ (8002994 <main+0x354>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027da:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8002998 <main+0x358>
 80027de:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 80027e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e6:	ee17 2a90 	vmov	r2, s15
 80027ea:	4b6c      	ldr	r3, [pc, #432]	@ (800299c <main+0x35c>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027f4:	ee17 1a90 	vmov	r1, s15
			  	  	  	 (int)avgYAcceleration,
			  	         (int)((avgYAcceleration - (int)avgYAcceleration) * 100),
 80027f8:	4b68      	ldr	r3, [pc, #416]	@ (800299c <main+0x35c>)
 80027fa:	ed93 7a00 	vldr	s14, [r3]
 80027fe:	4b67      	ldr	r3, [pc, #412]	@ (800299c <main+0x35c>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002810:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002998 <main+0x358>
 8002814:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 8002818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281c:	ee17 0a90 	vmov	r0, s15
 8002820:	4b5f      	ldr	r3, [pc, #380]	@ (80029a0 <main+0x360>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800282a:	ee17 4a90 	vmov	r4, s15
	                     (int)avgZAcceleration,
	                     (int)((avgZAcceleration - (int)avgZAcceleration) * 100),
 800282e:	4b5c      	ldr	r3, [pc, #368]	@ (80029a0 <main+0x360>)
 8002830:	ed93 7a00 	vldr	s14, [r3]
 8002834:	4b5a      	ldr	r3, [pc, #360]	@ (80029a0 <main+0x360>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002998 <main+0x358>
 800284a:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 800284e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002852:	ee17 5a90 	vmov	r5, s15
 8002856:	4b53      	ldr	r3, [pc, #332]	@ (80029a4 <main+0x364>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002860:	ee17 6a90 	vmov	r6, s15
	                     (int)Distance_Front,
	                     (int)((Distance_Front - (int)Distance_Front) * 100),
 8002864:	4b4f      	ldr	r3, [pc, #316]	@ (80029a4 <main+0x364>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <main+0x364>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002998 <main+0x358>
 8002880:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 8002884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002888:	edc7 7a05 	vstr	s15, [r7, #20]
 800288c:	4b46      	ldr	r3, [pc, #280]	@ (80029a8 <main+0x368>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002896:	edc7 7a04 	vstr	s15, [r7, #16]
	                     (int)Distance_Left,
	                     (int)((Distance_Left - (int)Distance_Left) * 100),
 800289a:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <main+0x368>)
 800289c:	ed93 7a00 	vldr	s14, [r3]
 80028a0:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <main+0x368>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b2:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002998 <main+0x358>
 80028b6:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 80028ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028be:	edc7 7a03 	vstr	s15, [r7, #12]
 80028c2:	4b3a      	ldr	r3, [pc, #232]	@ (80029ac <main+0x36c>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028cc:	edc7 7a02 	vstr	s15, [r7, #8]
	                     (int)Distance_Right,
	                     (int)((Distance_Right - (int)Distance_Right) * 100),
 80028d0:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <main+0x36c>)
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <main+0x36c>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002998 <main+0x358>
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 80028f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <main+0x370>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002902:	edc7 7a00 	vstr	s15, [r7]
	                     (int)Distance_Back,
	                     (int)((Distance_Back - (int)Distance_Back) * 100));
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <main+0x370>)
 8002908:	ed93 7a00 	vldr	s14, [r3]
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <main+0x370>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002998 <main+0x358>
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d, F: %d.%02d, L: %d.%02d, R: %d.%02d, B: %d.%02d\n",
 8002926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292a:	ee17 3a90 	vmov	r3, s15
 800292e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	930a      	str	r3, [sp, #40]	@ 0x28
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	9309      	str	r3, [sp, #36]	@ 0x24
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	9308      	str	r3, [sp, #32]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	9307      	str	r3, [sp, #28]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	9306      	str	r3, [sp, #24]
 8002948:	9605      	str	r6, [sp, #20]
 800294a:	9504      	str	r5, [sp, #16]
 800294c:	9403      	str	r4, [sp, #12]
 800294e:	9002      	str	r0, [sp, #8]
 8002950:	9101      	str	r1, [sp, #4]
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	ee16 3a90 	vmov	r3, s13
 8002958:	4a16      	ldr	r2, [pc, #88]	@ (80029b4 <main+0x374>)
 800295a:	2180      	movs	r1, #128	@ 0x80
 800295c:	480c      	ldr	r0, [pc, #48]	@ (8002990 <main+0x350>)
 800295e:	f00a fc43 	bl	800d1e8 <sniprintf>
 8002962:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134


	  CDC_Transmit_FS(data, sizeof(data));
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	4809      	ldr	r0, [pc, #36]	@ (8002990 <main+0x350>)
 800296a:	f009 ff6b 	bl	800c844 <CDC_Transmit_FS>
	  HAL_Delay (1000);
 800296e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002972:	f000 ff7d 	bl	8003870 <HAL_Delay>
  {
 8002976:	bf00      	nop
 8002978:	e707      	b.n	800278a <main+0x14a>
 800297a:	bf00      	nop
 800297c:	20000aac 	.word	0x20000aac
 8002980:	20000b50 	.word	0x20000b50
 8002984:	20000bf4 	.word	0x20000bf4
 8002988:	200008f8 	.word	0x200008f8
 800298c:	0800dc70 	.word	0x0800dc70
 8002990:	20000c98 	.word	0x20000c98
 8002994:	20000aa0 	.word	0x20000aa0
 8002998:	42c80000 	.word	0x42c80000
 800299c:	20000aa4 	.word	0x20000aa4
 80029a0:	20000aa8 	.word	0x20000aa8
 80029a4:	20000a8c 	.word	0x20000a8c
 80029a8:	20000a80 	.word	0x20000a80
 80029ac:	20000a84 	.word	0x20000a84
 80029b0:	20000a88 	.word	0x20000a88
 80029b4:	0800dc74 	.word	0x0800dc74

080029b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b094      	sub	sp, #80	@ 0x50
 80029bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	2234      	movs	r2, #52	@ 0x34
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f00a fc42 	bl	800d250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029cc:	f107 0308 	add.w	r3, r7, #8
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	4b29      	ldr	r3, [pc, #164]	@ (8002a88 <SystemClock_Config+0xd0>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	4a28      	ldr	r2, [pc, #160]	@ (8002a88 <SystemClock_Config+0xd0>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ec:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <SystemClock_Config+0xd0>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029f8:	2300      	movs	r3, #0
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <SystemClock_Config+0xd4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a04:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <SystemClock_Config+0xd4>)
 8002a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <SystemClock_Config+0xd4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a20:	2310      	movs	r3, #16
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a24:	2302      	movs	r3, #2
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 24;
 8002a2c:	2318      	movs	r3, #24
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002a30:	23d8      	movs	r3, #216	@ 0xd8
 8002a32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a34:	2302      	movs	r3, #2
 8002a36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fbc7 	bl	80061d8 <HAL_RCC_OscConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a50:	f000 fb42 	bl	80030d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a54:	230f      	movs	r3, #15
 8002a56:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a68:	f107 0308 	add.w	r3, r7, #8
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 fdc4 	bl	80055fc <HAL_RCC_ClockConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a7a:	f000 fb2d 	bl	80030d8 <Error_Handler>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3750      	adds	r7, #80	@ 0x50
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000

08002a90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a94:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002a96:	4a13      	ldr	r2, [pc, #76]	@ (8002ae4 <MX_I2C3_Init+0x54>)
 8002a98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002a9c:	4a12      	ldr	r2, [pc, #72]	@ (8002ae8 <MX_I2C3_Init+0x58>)
 8002a9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ab2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002aba:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac0:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002acc:	4804      	ldr	r0, [pc, #16]	@ (8002ae0 <MX_I2C3_Init+0x50>)
 8002ace:	f001 f9b3 	bl	8003e38 <HAL_I2C_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ad8:	f000 fafe 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000774 	.word	0x20000774
 8002ae4:	40005c00 	.word	0x40005c00
 8002ae8:	000186a0 	.word	0x000186a0

08002aec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002af0:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <MX_SPI1_Init+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002af8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002afe:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b38:	220a      	movs	r2, #10
 8002b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b3c:	4804      	ldr	r0, [pc, #16]	@ (8002b50 <MX_SPI1_Init+0x64>)
 8002b3e:	f003 fde9 	bl	8006714 <HAL_SPI_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b48:	f000 fac6 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200007c8 	.word	0x200007c8
 8002b54:	40013000 	.word	0x40013000

08002b58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b74:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b76:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <MX_TIM1_Init+0x9c>)
 8002b78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b94:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ba0:	4813      	ldr	r0, [pc, #76]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002ba2:	f004 fb89 	bl	80072b8 <HAL_TIM_Base_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002bac:	f000 fa94 	bl	80030d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002bbe:	f004 ffdf 	bl	8007b80 <HAL_TIM_ConfigClockSource>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002bc8:	f000 fa86 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <MX_TIM1_Init+0x98>)
 8002bda:	f005 fd41 	bl	8008660 <HAL_TIMEx_MasterConfigSynchronization>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002be4:	f000 fa78 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000820 	.word	0x20000820
 8002bf4:	40010000 	.word	0x40010000

08002bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	f107 0318 	add.w	r3, r7, #24
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c16:	463b      	mov	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c22:	4b3c      	ldr	r3, [pc, #240]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c30:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002c36:	4b37      	ldr	r3, [pc, #220]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3e:	4b35      	ldr	r3, [pc, #212]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	4b33      	ldr	r3, [pc, #204]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c4a:	4832      	ldr	r0, [pc, #200]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c4c:	f004 fb34 	bl	80072b8 <HAL_TIM_Base_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002c56:	f000 fa3f 	bl	80030d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	4619      	mov	r1, r3
 8002c66:	482b      	ldr	r0, [pc, #172]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c68:	f004 ff8a 	bl	8007b80 <HAL_TIM_ConfigClockSource>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002c72:	f000 fa31 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002c76:	4827      	ldr	r0, [pc, #156]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c78:	f004 fc2d 	bl	80074d6 <HAL_TIM_IC_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c82:	f000 fa29 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	4619      	mov	r1, r3
 8002c94:	481f      	ldr	r0, [pc, #124]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002c96:	f005 fce3 	bl	8008660 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002ca0:	f000 fa1a 	bl	80030d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4816      	ldr	r0, [pc, #88]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002cbc:	f004 fe02 	bl	80078c4 <HAL_TIM_IC_ConfigChannel>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002cc6:	f000 fa07 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4810      	ldr	r0, [pc, #64]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002cd2:	f004 fdf7 	bl	80078c4 <HAL_TIM_IC_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002cdc:	f000 f9fc 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	480b      	ldr	r0, [pc, #44]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002ce8:	f004 fdec 	bl	80078c4 <HAL_TIM_IC_ConfigChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8002cf2:	f000 f9f1 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002cf6:	463b      	mov	r3, r7
 8002cf8:	220c      	movs	r2, #12
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4805      	ldr	r0, [pc, #20]	@ (8002d14 <MX_TIM2_Init+0x11c>)
 8002cfe:	f004 fde1 	bl	80078c4 <HAL_TIM_IC_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8002d08:	f000 f9e6 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	3728      	adds	r7, #40	@ 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000868 	.word	0x20000868

08002d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d3a:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d3c:	4a32      	ldr	r2, [pc, #200]	@ (8002e08 <MX_TIM4_Init+0xf0>)
 8002d3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8002d40:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d42:	2210      	movs	r2, #16
 8002d44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d4e:	22ff      	movs	r2, #255	@ 0xff
 8002d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d52:	4b2c      	ldr	r3, [pc, #176]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d5e:	4829      	ldr	r0, [pc, #164]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d60:	f004 fb6a 	bl	8007438 <HAL_TIM_PWM_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002d6a:	f000 f9b5 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4821      	ldr	r0, [pc, #132]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d7e:	f005 fc6f 	bl	8008660 <HAL_TIMEx_MasterConfigSynchronization>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002d88:	f000 f9a6 	bl	80030d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8c:	2360      	movs	r3, #96	@ 0x60
 8002d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4818      	ldr	r0, [pc, #96]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002da4:	f004 fe2a 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002dae:	f000 f993 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	2204      	movs	r2, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4812      	ldr	r0, [pc, #72]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002dba:	f004 fe1f 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002dc4:	f000 f988 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2208      	movs	r2, #8
 8002dcc:	4619      	mov	r1, r3
 8002dce:	480d      	ldr	r0, [pc, #52]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002dd0:	f004 fe14 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8002dda:	f000 f97d 	bl	80030d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	220c      	movs	r2, #12
 8002de2:	4619      	mov	r1, r3
 8002de4:	4807      	ldr	r0, [pc, #28]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002de6:	f004 fe09 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002df0:	f000 f972 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002df4:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002df6:	f000 fb6f 	bl	80034d8 <HAL_TIM_MspPostInit>

}
 8002dfa:	bf00      	nop
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200008b0 	.word	0x200008b0
 8002e08:	40000800 	.word	0x40000800

08002e0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e12:	463b      	mov	r3, r7
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e1c:	4a15      	ldr	r2, [pc, #84]	@ (8002e74 <MX_TIM7_Init+0x68>)
 8002e1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e22:	2264      	movs	r2, #100	@ 0x64
 8002e24:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e26:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 800;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e2e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e34:	4b0e      	ldr	r3, [pc, #56]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e3c:	f004 fa3c 	bl	80072b8 <HAL_TIM_Base_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002e46:	f000 f947 	bl	80030d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	4619      	mov	r1, r3
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <MX_TIM7_Init+0x64>)
 8002e58:	f005 fc02 	bl	8008660 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002e62:	f000 f939 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200008f8 	.word	0x200008f8
 8002e74:	40001400 	.word	0x40001400

08002e78 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ebc <MX_TIM10_Init+0x44>)
 8002e80:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002e84:	2264      	movs	r2, #100	@ 0x64
 8002e86:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002e90:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e94:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <MX_TIM10_Init+0x40>)
 8002ea4:	f004 fa08 	bl	80072b8 <HAL_TIM_Base_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002eae:	f000 f913 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000940 	.word	0x20000940
 8002ebc:	40014400 	.word	0x40014400

08002ec0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <MX_TIM13_Init+0x44>)
 8002ec8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200;
 8002eca:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002ecc:	22c8      	movs	r2, #200	@ 0xc8
 8002ece:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 800;
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002ed8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002edc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ede:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002eea:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <MX_TIM13_Init+0x40>)
 8002eec:	f004 f9e4 	bl	80072b8 <HAL_TIM_Base_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002ef6:	f000 f8ef 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000988 	.word	0x20000988
 8002f04:	40001c00 	.word	0x40001c00

08002f08 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f4c <MX_TIM14_Init+0x44>)
 8002f10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16;
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f14:	2210      	movs	r2, #16
 8002f16:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f24:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <MX_TIM14_Init+0x40>)
 8002f34:	f004 f9c0 	bl	80072b8 <HAL_TIM_Base_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002f3e:	f000 f8cb 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200009d0 	.word	0x200009d0
 8002f4c:	40002000 	.word	0x40002000

08002f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f54:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <MX_USART1_UART_Init+0x4c>)
 8002f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f5c:	4a10      	ldr	r2, [pc, #64]	@ (8002fa0 <MX_USART1_UART_Init+0x50>)
 8002f5e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f60:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f66:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f74:	220c      	movs	r2, #12
 8002f76:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f78:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f84:	4804      	ldr	r0, [pc, #16]	@ (8002f98 <MX_USART1_UART_Init+0x48>)
 8002f86:	f005 fbfb 	bl	8008780 <HAL_UART_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002f90:	f000 f8a2 	bl	80030d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000a18 	.word	0x20000a18
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	000f4240 	.word	0x000f4240

08002fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	4b42      	ldr	r3, [pc, #264]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4a41      	ldr	r2, [pc, #260]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fca:	4b3f      	ldr	r3, [pc, #252]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a3a      	ldr	r2, [pc, #232]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b38      	ldr	r3, [pc, #224]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	4b34      	ldr	r3, [pc, #208]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a33      	ldr	r2, [pc, #204]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b31      	ldr	r3, [pc, #196]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	4b2d      	ldr	r3, [pc, #180]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a2c      	ldr	r2, [pc, #176]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <MX_GPIO_Init+0x124>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800302a:	2200      	movs	r2, #0
 800302c:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8003030:	4826      	ldr	r0, [pc, #152]	@ (80030cc <MX_GPIO_Init+0x128>)
 8003032:	f000 fee7 	bl	8003e04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	2110      	movs	r1, #16
 800303a:	4825      	ldr	r0, [pc, #148]	@ (80030d0 <MX_GPIO_Init+0x12c>)
 800303c:	f000 fee2 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003040:	2200      	movs	r2, #0
 8003042:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003046:	4823      	ldr	r0, [pc, #140]	@ (80030d4 <MX_GPIO_Init+0x130>)
 8003048:	f000 fedc 	bl	8003e04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC5 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800304c:	f640 432f 	movw	r3, #3119	@ 0xc2f
 8003050:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	4819      	ldr	r0, [pc, #100]	@ (80030cc <MX_GPIO_Init+0x128>)
 8003066:	f000 fd39 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800306a:	2310      	movs	r3, #16
 800306c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	2301      	movs	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	4813      	ldr	r0, [pc, #76]	@ (80030d0 <MX_GPIO_Init+0x12c>)
 8003082:	f000 fd2b 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8003086:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800308a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308c:	2301      	movs	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	480d      	ldr	r0, [pc, #52]	@ (80030d4 <MX_GPIO_Init+0x130>)
 80030a0:	f000 fd1c 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	4804      	ldr	r0, [pc, #16]	@ (80030cc <MX_GPIO_Init+0x128>)
 80030bc:	f000 fd0e 	bl	8003adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030c0:	bf00      	nop
 80030c2:	3728      	adds	r7, #40	@ 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400

080030d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030dc:	b672      	cpsid	i
}
 80030de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <Error_Handler+0x8>

080030e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_MspInit+0x4c>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003130 <HAL_MspInit+0x4c>)
 80030f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_MspInit+0x4c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_MspInit+0x4c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <HAL_MspInit+0x4c>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	@ 0x40
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_MspInit+0x4c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a29      	ldr	r2, [pc, #164]	@ (80031f8 <HAL_I2C_MspInit+0xc4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d14b      	bne.n	80031ee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	4b28      	ldr	r3, [pc, #160]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a27      	ldr	r2, [pc, #156]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b21      	ldr	r3, [pc, #132]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4a20      	ldr	r2, [pc, #128]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6313      	str	r3, [r2, #48]	@ 0x30
 8003182:	4b1e      	ldr	r3, [pc, #120]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800318e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003194:	2312      	movs	r3, #18
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031a0:	2304      	movs	r3, #4
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	4815      	ldr	r0, [pc, #84]	@ (8003200 <HAL_I2C_MspInit+0xcc>)
 80031ac:	f000 fc96 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b6:	2312      	movs	r3, #18
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031c2:	2304      	movs	r3, #4
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	480d      	ldr	r0, [pc, #52]	@ (8003204 <HAL_I2C_MspInit+0xd0>)
 80031ce:	f000 fc85 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	4a08      	ldr	r2, [pc, #32]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 80031dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_I2C_MspInit+0xc8>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80031ee:	bf00      	nop
 80031f0:	3728      	adds	r7, #40	@ 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40005c00 	.word	0x40005c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020800 	.word	0x40020800
 8003204:	40020000 	.word	0x40020000

08003208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a19      	ldr	r2, [pc, #100]	@ (800328c <HAL_SPI_MspInit+0x84>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d12b      	bne.n	8003282 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	4b18      	ldr	r3, [pc, #96]	@ (8003290 <HAL_SPI_MspInit+0x88>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <HAL_SPI_MspInit+0x88>)
 8003234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003238:	6453      	str	r3, [r2, #68]	@ 0x44
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <HAL_SPI_MspInit+0x88>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_SPI_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a10      	ldr	r2, [pc, #64]	@ (8003290 <HAL_SPI_MspInit+0x88>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <HAL_SPI_MspInit+0x88>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003262:	23e0      	movs	r3, #224	@ 0xe0
 8003264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326e:	2303      	movs	r3, #3
 8003270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003272:	2305      	movs	r3, #5
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	4619      	mov	r1, r3
 800327c:	4805      	ldr	r0, [pc, #20]	@ (8003294 <HAL_SPI_MspInit+0x8c>)
 800327e:	f000 fc2d 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003282:	bf00      	nop
 8003284:	3728      	adds	r7, #40	@ 0x28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40013000 	.word	0x40013000
 8003290:	40023800 	.word	0x40023800
 8003294:	40020000 	.word	0x40020000

08003298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b090      	sub	sp, #64	@ 0x40
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6f      	ldr	r2, [pc, #444]	@ (8003474 <HAL_TIM_Base_MspInit+0x1dc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d116      	bne.n	80032e8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032be:	4b6e      	ldr	r3, [pc, #440]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2019      	movs	r0, #25
 80032dc:	f000 fbc7 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032e0:	2019      	movs	r0, #25
 80032e2:	f000 fbe0 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032e6:	e0c0      	b.n	800346a <HAL_TIM_Base_MspInit+0x1d2>
  else if(htim_base->Instance==TIM2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f0:	d154      	bne.n	800339c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f6:	4b60      	ldr	r3, [pc, #384]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b5d      	ldr	r3, [pc, #372]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	4b59      	ldr	r3, [pc, #356]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a58      	ldr	r2, [pc, #352]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b56      	ldr	r3, [pc, #344]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	4b52      	ldr	r3, [pc, #328]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	4a51      	ldr	r2, [pc, #324]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6313      	str	r3, [r2, #48]	@ 0x30
 800333a:	4b4f      	ldr	r3, [pc, #316]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3;
 8003346:	f240 430c 	movw	r3, #1036	@ 0x40c
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003358:	2301      	movs	r3, #1
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003360:	4619      	mov	r1, r3
 8003362:	4846      	ldr	r0, [pc, #280]	@ (800347c <HAL_TIM_Base_MspInit+0x1e4>)
 8003364:	f000 fbba 	bl	8003adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003376:	2300      	movs	r3, #0
 8003378:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800337a:	2301      	movs	r3, #1
 800337c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003382:	4619      	mov	r1, r3
 8003384:	483e      	ldr	r0, [pc, #248]	@ (8003480 <HAL_TIM_Base_MspInit+0x1e8>)
 8003386:	f000 fba9 	bl	8003adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	201c      	movs	r0, #28
 8003390:	f000 fb6d 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003394:	201c      	movs	r0, #28
 8003396:	f000 fb86 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 800339a:	e066      	b.n	800346a <HAL_TIM_Base_MspInit+0x1d2>
  else if(htim_base->Instance==TIM7)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a38      	ldr	r2, [pc, #224]	@ (8003484 <HAL_TIM_Base_MspInit+0x1ec>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d116      	bne.n	80033d4 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	4a32      	ldr	r2, [pc, #200]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80033b0:	f043 0320 	orr.w	r3, r3, #32
 80033b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b6:	4b30      	ldr	r3, [pc, #192]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2037      	movs	r0, #55	@ 0x37
 80033c8:	f000 fb51 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033cc:	2037      	movs	r0, #55	@ 0x37
 80033ce:	f000 fb6a 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 80033d2:	e04a      	b.n	800346a <HAL_TIM_Base_MspInit+0x1d2>
  else if(htim_base->Instance==TIM10)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003488 <HAL_TIM_Base_MspInit+0x1f0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d116      	bne.n	800340c <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	4a24      	ldr	r2, [pc, #144]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ee:	4b22      	ldr	r3, [pc, #136]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2100      	movs	r1, #0
 80033fe:	2019      	movs	r0, #25
 8003400:	f000 fb35 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003404:	2019      	movs	r0, #25
 8003406:	f000 fb4e 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 800340a:	e02e      	b.n	800346a <HAL_TIM_Base_MspInit+0x1d2>
  else if(htim_base->Instance==TIM13)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1e      	ldr	r2, [pc, #120]	@ (800348c <HAL_TIM_Base_MspInit+0x1f4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d116      	bne.n	8003444 <HAL_TIM_Base_MspInit+0x1ac>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	4a16      	ldr	r2, [pc, #88]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003424:	6413      	str	r3, [r2, #64]	@ 0x40
 8003426:	4b14      	ldr	r3, [pc, #80]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	202c      	movs	r0, #44	@ 0x2c
 8003438:	f000 fb19 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800343c:	202c      	movs	r0, #44	@ 0x2c
 800343e:	f000 fb32 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 8003442:	e012      	b.n	800346a <HAL_TIM_Base_MspInit+0x1d2>
  else if(htim_base->Instance==TIM14)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a11      	ldr	r2, [pc, #68]	@ (8003490 <HAL_TIM_Base_MspInit+0x1f8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	4a08      	ldr	r2, [pc, #32]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345c:	6413      	str	r3, [r2, #64]	@ 0x40
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_TIM_Base_MspInit+0x1e0>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	bf00      	nop
 800346c:	3740      	adds	r7, #64	@ 0x40
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40023800 	.word	0x40023800
 800347c:	40020400 	.word	0x40020400
 8003480:	40020000 	.word	0x40020000
 8003484:	40001400 	.word	0x40001400
 8003488:	40014400 	.word	0x40014400
 800348c:	40001c00 	.word	0x40001c00
 8003490:	40002000 	.word	0x40002000

08003494 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0b      	ldr	r2, [pc, #44]	@ (80034d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <HAL_TIM_PWM_MspInit+0x40>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_TIM_PWM_MspInit+0x40>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b6:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <HAL_TIM_PWM_MspInit+0x40>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_TIM_MspPostInit+0x68>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11e      	bne.n	8003538 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_TIM_MspPostInit+0x6c>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_TIM_MspPostInit+0x6c>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_TIM_MspPostInit+0x6c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003516:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800351a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003528:	2302      	movs	r3, #2
 800352a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	4619      	mov	r1, r3
 8003532:	4805      	ldr	r0, [pc, #20]	@ (8003548 <HAL_TIM_MspPostInit+0x70>)
 8003534:	f000 fad2 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003538:	bf00      	nop
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40000800 	.word	0x40000800
 8003544:	40023800 	.word	0x40023800
 8003548:	40020400 	.word	0x40020400

0800354c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	@ 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a19      	ldr	r2, [pc, #100]	@ (80035d0 <HAL_UART_MspInit+0x84>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12c      	bne.n	80035c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <HAL_UART_MspInit+0x88>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_UART_MspInit+0x88>)
 8003578:	f043 0310 	orr.w	r3, r3, #16
 800357c:	6453      	str	r3, [r2, #68]	@ 0x44
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <HAL_UART_MspInit+0x88>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <HAL_UART_MspInit+0x88>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <HAL_UART_MspInit+0x88>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6313      	str	r3, [r2, #48]	@ 0x30
 800359a:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_UART_MspInit+0x88>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b4:	2303      	movs	r3, #3
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035b8:	2307      	movs	r3, #7
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4805      	ldr	r0, [pc, #20]	@ (80035d8 <HAL_UART_MspInit+0x8c>)
 80035c4:	f000 fa8a 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80035c8:	bf00      	nop
 80035ca:	3728      	adds	r7, #40	@ 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40020000 	.word	0x40020000

080035dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <NMI_Handler+0x4>

080035e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <HardFault_Handler+0x4>

080035ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <MemManage_Handler+0x4>

080035f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <BusFault_Handler+0x4>

080035fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <UsageFault_Handler+0x4>

08003604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003632:	f000 f8fd 	bl	8003830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003640:	4803      	ldr	r0, [pc, #12]	@ (8003650 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003642:	f004 f84f 	bl	80076e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003646:	4803      	ldr	r0, [pc, #12]	@ (8003654 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003648:	f004 f84c 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000820 	.word	0x20000820
 8003654:	20000940 	.word	0x20000940

08003658 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800365c:	4802      	ldr	r0, [pc, #8]	@ (8003668 <TIM2_IRQHandler+0x10>)
 800365e:	f004 f841 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000868 	.word	0x20000868

0800366c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003670:	4802      	ldr	r0, [pc, #8]	@ (800367c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003672:	f004 f837 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000988 	.word	0x20000988

08003680 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003684:	4802      	ldr	r0, [pc, #8]	@ (8003690 <TIM7_IRQHandler+0x10>)
 8003686:	f004 f82d 	bl	80076e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200008f8 	.word	0x200008f8

08003694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003698:	4802      	ldr	r0, [pc, #8]	@ (80036a4 <OTG_FS_IRQHandler+0x10>)
 800369a:	f000 fe5c 	bl	8004356 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20002284 	.word	0x20002284

080036a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b0:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <_sbrk+0x5c>)
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <_sbrk+0x60>)
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <_sbrk+0x64>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <_sbrk+0x64>)
 80036c6:	4a12      	ldr	r2, [pc, #72]	@ (8003710 <_sbrk+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d8:	f009 fdc2 	bl	800d260 <__errno>
 80036dc:	4603      	mov	r3, r0
 80036de:	220c      	movs	r2, #12
 80036e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036e6:	e009      	b.n	80036fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e8:	4b08      	ldr	r3, [pc, #32]	@ (800370c <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ee:	4b07      	ldr	r3, [pc, #28]	@ (800370c <_sbrk+0x64>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	4a05      	ldr	r2, [pc, #20]	@ (800370c <_sbrk+0x64>)
 80036f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20020000 	.word	0x20020000
 8003708:	00000400 	.word	0x00000400
 800370c:	20000d9c 	.word	0x20000d9c
 8003710:	20002ad0 	.word	0x20002ad0

08003714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003718:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <SystemInit+0x20>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <SystemInit+0x20>)
 8003720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003770 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800373c:	f7ff ffea 	bl	8003714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003740:	480c      	ldr	r0, [pc, #48]	@ (8003774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003742:	490d      	ldr	r1, [pc, #52]	@ (8003778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003744:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003748:	e002      	b.n	8003750 <LoopCopyDataInit>

0800374a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800374c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800374e:	3304      	adds	r3, #4

08003750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003754:	d3f9      	bcc.n	800374a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003756:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003758:	4c0a      	ldr	r4, [pc, #40]	@ (8003784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800375c:	e001      	b.n	8003762 <LoopFillZerobss>

0800375e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800375e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003760:	3204      	adds	r2, #4

08003762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003764:	d3fb      	bcc.n	800375e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003766:	f009 fd81 	bl	800d26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376a:	f7fe ff69 	bl	8002640 <main>
  bx  lr    
 800376e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003778:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 800377c:	0800dda0 	.word	0x0800dda0
  ldr r2, =_sbss
 8003780:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003784:	20002ad0 	.word	0x20002ad0

08003788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003788:	e7fe      	b.n	8003788 <ADC_IRQHandler>
	...

0800378c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003790:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0d      	ldr	r2, [pc, #52]	@ (80037cc <HAL_Init+0x40>)
 8003796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800379a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800379c:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_Init+0x40>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <HAL_Init+0x40>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a07      	ldr	r2, [pc, #28]	@ (80037cc <HAL_Init+0x40>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f000 f94f 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ba:	200f      	movs	r0, #15
 80037bc:	f000 f808 	bl	80037d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c0:	f7ff fc90 	bl	80030e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <HAL_InitTick+0x54>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <HAL_InitTick+0x58>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f967 	bl	8003ac2 <HAL_SYSTICK_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00e      	b.n	800381c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d80a      	bhi.n	800381a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003804:	2200      	movs	r2, #0
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800380c:	f000 f92f 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4a06      	ldr	r2, [pc, #24]	@ (800382c <HAL_InitTick+0x5c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000144 	.word	0x20000144
 8003828:	2000014c 	.word	0x2000014c
 800382c:	20000148 	.word	0x20000148

08003830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_IncTick+0x20>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_IncTick+0x24>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <HAL_IncTick+0x24>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	2000014c 	.word	0x2000014c
 8003854:	20000da0 	.word	0x20000da0

08003858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return uwTick;
 800385c:	4b03      	ldr	r3, [pc, #12]	@ (800386c <HAL_GetTick+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000da0 	.word	0x20000da0

08003870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff ffee 	bl	8003858 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003888:	d005      	beq.n	8003896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388a:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_Delay+0x44>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003896:	bf00      	nop
 8003898:	f7ff ffde 	bl	8003858 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d8f7      	bhi.n	8003898 <HAL_Delay+0x28>
  {
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000014c 	.word	0x2000014c

080038b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c8:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d4:	4013      	ands	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ea:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	60d3      	str	r3, [r2, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <__NVIC_GetPriorityGrouping+0x18>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	f003 0307 	and.w	r3, r3, #7
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4907      	ldr	r1, [pc, #28]	@ (8003954 <__NVIC_EnableIRQ+0x38>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a38:	f7ff ff8e 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff29 	bl	80038b8 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff3e 	bl	8003900 <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff8e 	bl	80039ac <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5d 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff31 	bl	800391c <__NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffa2 	bl	8003a14 <SysTick_Config>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	@ 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e165      	b.n	8003dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af8:	2201      	movs	r2, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	f040 8154 	bne.w	8003dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d005      	beq.n	8003b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d130      	bne.n	8003b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	2203      	movs	r2, #3
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 0201 	and.w	r2, r3, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d017      	beq.n	8003bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d123      	bne.n	8003c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	220f      	movs	r2, #15
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80ae 	beq.w	8003dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b5d      	ldr	r3, [pc, #372]	@ (8003ddc <HAL_GPIO_Init+0x300>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ddc <HAL_GPIO_Init+0x300>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c72:	4b5a      	ldr	r3, [pc, #360]	@ (8003ddc <HAL_GPIO_Init+0x300>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c7e:	4a58      	ldr	r2, [pc, #352]	@ (8003de0 <HAL_GPIO_Init+0x304>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	3302      	adds	r3, #2
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8003de4 <HAL_GPIO_Init+0x308>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d025      	beq.n	8003cf6 <HAL_GPIO_Init+0x21a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4e      	ldr	r2, [pc, #312]	@ (8003de8 <HAL_GPIO_Init+0x30c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_GPIO_Init+0x216>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8003dec <HAL_GPIO_Init+0x310>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x212>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003df0 <HAL_GPIO_Init+0x314>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003df4 <HAL_GPIO_Init+0x318>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x20a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8003df8 <HAL_GPIO_Init+0x31c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x206>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a49      	ldr	r2, [pc, #292]	@ (8003dfc <HAL_GPIO_Init+0x320>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x202>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e00c      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cde:	2307      	movs	r3, #7
 8003ce0:	e00a      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	e008      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e006      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e004      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e002      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x21c>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f002 0203 	and.w	r2, r2, #3
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	4093      	lsls	r3, r2
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d08:	4935      	ldr	r1, [pc, #212]	@ (8003de0 <HAL_GPIO_Init+0x304>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	3302      	adds	r3, #2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d16:	4b3a      	ldr	r3, [pc, #232]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3a:	4a31      	ldr	r2, [pc, #196]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d40:	4b2f      	ldr	r3, [pc, #188]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d6a:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db8:	4a11      	ldr	r2, [pc, #68]	@ (8003e00 <HAL_GPIO_Init+0x324>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	f67f ae96 	bls.w	8003af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3724      	adds	r7, #36	@ 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40020000 	.word	0x40020000
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40020800 	.word	0x40020800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40021400 	.word	0x40021400
 8003dfc:	40021800 	.word	0x40021800
 8003e00:	40013c00 	.word	0x40013c00

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e20:	e003      	b.n	8003e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	041a      	lsls	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e12b      	b.n	80040a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff f968 	bl	8003134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	@ 0x24
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f001 fca0 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4a81      	ldr	r2, [pc, #516]	@ (80040ac <HAL_I2C_Init+0x274>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d807      	bhi.n	8003ebc <HAL_I2C_Init+0x84>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a80      	ldr	r2, [pc, #512]	@ (80040b0 <HAL_I2C_Init+0x278>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bf94      	ite	ls
 8003eb4:	2301      	movls	r3, #1
 8003eb6:	2300      	movhi	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e006      	b.n	8003eca <HAL_I2C_Init+0x92>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a7d      	ldr	r2, [pc, #500]	@ (80040b4 <HAL_I2C_Init+0x27c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bf94      	ite	ls
 8003ec4:	2301      	movls	r3, #1
 8003ec6:	2300      	movhi	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0e7      	b.n	80040a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a78      	ldr	r2, [pc, #480]	@ (80040b8 <HAL_I2C_Init+0x280>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	0c9b      	lsrs	r3, r3, #18
 8003edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a6a      	ldr	r2, [pc, #424]	@ (80040ac <HAL_I2C_Init+0x274>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d802      	bhi.n	8003f0c <HAL_I2C_Init+0xd4>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	e009      	b.n	8003f20 <HAL_I2C_Init+0xe8>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	4a69      	ldr	r2, [pc, #420]	@ (80040bc <HAL_I2C_Init+0x284>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	3301      	adds	r3, #1
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	495c      	ldr	r1, [pc, #368]	@ (80040ac <HAL_I2C_Init+0x274>)
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	d819      	bhi.n	8003f74 <HAL_I2C_Init+0x13c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1e59      	subs	r1, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4e:	1c59      	adds	r1, r3, #1
 8003f50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f54:	400b      	ands	r3, r1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_I2C_Init+0x138>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1e59      	subs	r1, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6e:	e051      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003f70:	2304      	movs	r3, #4
 8003f72:	e04f      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d111      	bne.n	8003fa0 <HAL_I2C_Init+0x168>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e58      	subs	r0, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	440b      	add	r3, r1
 8003f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e012      	b.n	8003fc6 <HAL_I2C_Init+0x18e>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1e58      	subs	r0, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	0099      	lsls	r1, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Init+0x196>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e022      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_I2C_Init+0x1bc>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e58      	subs	r0, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6859      	ldr	r1, [r3, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	440b      	add	r3, r1
 8003fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff2:	e00f      	b.n	8004014 <HAL_I2C_Init+0x1dc>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e58      	subs	r0, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	0099      	lsls	r1, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	6809      	ldr	r1, [r1, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004042:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6911      	ldr	r1, [r2, #16]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68d2      	ldr	r2, [r2, #12]
 800404e:	4311      	orrs	r1, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	430b      	orrs	r3, r1
 8004056:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	000186a0 	.word	0x000186a0
 80040b0:	001e847f 	.word	0x001e847f
 80040b4:	003d08ff 	.word	0x003d08ff
 80040b8:	431bde83 	.word	0x431bde83
 80040bc:	10624dd3 	.word	0x10624dd3

080040c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e108      	b.n	80042e4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f008 fd03 	bl	800caf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2203      	movs	r2, #3
 80040f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004100:	d102      	bne.n	8004108 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f005 f85a 	bl	80091c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7c1a      	ldrb	r2, [r3, #16]
 800411a:	f88d 2000 	strb.w	r2, [sp]
 800411e:	3304      	adds	r3, #4
 8004120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004122:	f004 ff39 	bl	8008f98 <USB_CoreInit>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0d5      	b.n	80042e4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f005 f852 	bl	80091e8 <USB_SetCurrentMode>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0c6      	b.n	80042e4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e04a      	b.n	80041f2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800415c:	7bfa      	ldrb	r2, [r7, #15]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3315      	adds	r3, #21
 800416c:	2201      	movs	r2, #1
 800416e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	3314      	adds	r3, #20
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	b298      	uxth	r0, r3
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	332e      	adds	r3, #46	@ 0x2e
 8004198:	4602      	mov	r2, r0
 800419a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800419c:	7bfa      	ldrb	r2, [r7, #15]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	3318      	adds	r3, #24
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041b0:	7bfa      	ldrb	r2, [r7, #15]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	331c      	adds	r3, #28
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3320      	adds	r3, #32
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3324      	adds	r3, #36	@ 0x24
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	3301      	adds	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	791b      	ldrb	r3, [r3, #4]
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d3af      	bcc.n	800415c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e044      	b.n	800428c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	3301      	adds	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	791b      	ldrb	r3, [r3, #4]
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	429a      	cmp	r2, r3
 8004294:	d3b5      	bcc.n	8004202 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7c1a      	ldrb	r2, [r3, #16]
 800429e:	f88d 2000 	strb.w	r2, [sp]
 80042a2:	3304      	adds	r3, #4
 80042a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a6:	f004 ffeb 	bl	8009280 <USB_DevInit>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e013      	b.n	80042e4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7b1b      	ldrb	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 f96e 	bl	80055b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f006 f828 	bl	800a332 <USB_DevDisconnect>

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_PCD_Start+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e022      	b.n	800434e <HAL_PCD_Start+0x62>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004320:	2b01      	cmp	r3, #1
 8004322:	d105      	bne.n	8004330 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f004 ff35 	bl	80091a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f005 ffd6 	bl	800a2f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004356:	b590      	push	{r4, r7, lr}
 8004358:	b08d      	sub	sp, #52	@ 0x34
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f006 f894 	bl	800a49a <USB_GetMode>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 84b9 	bne.w	8004cec <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f005 fff8 	bl	800a374 <USB_ReadInterrupts>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 84af 	beq.w	8004cea <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f005 ffe5 	bl	800a374 <USB_ReadInterrupts>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d107      	bne.n	80043c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f002 0202 	and.w	r2, r2, #2
 80043c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f005 ffd3 	bl	800a374 <USB_ReadInterrupts>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d161      	bne.n	800449c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0210 	bic.w	r2, r2, #16
 80043e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	0c5b      	lsrs	r3, r3, #17
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2b02      	cmp	r3, #2
 8004412:	d124      	bne.n	800445e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d035      	beq.n	800448c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800442a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800442e:	b29b      	uxth	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	6a38      	ldr	r0, [r7, #32]
 8004434:	f005 fe0a 	bl	800a04c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004444:	441a      	add	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004456:	441a      	add	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	615a      	str	r2, [r3, #20]
 800445c:	e016      	b.n	800448c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	0c5b      	lsrs	r3, r3, #17
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	2b06      	cmp	r3, #6
 8004468:	d110      	bne.n	800448c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004470:	2208      	movs	r2, #8
 8004472:	4619      	mov	r1, r3
 8004474:	6a38      	ldr	r0, [r7, #32]
 8004476:	f005 fde9 	bl	800a04c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004486:	441a      	add	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0210 	orr.w	r2, r2, #16
 800449a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f005 ff67 	bl	800a374 <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044b0:	f040 80a7 	bne.w	8004602 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f005 ff6c 	bl	800a39a <USB_ReadDevAllOutEpInterrupt>
 80044c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80044c4:	e099      	b.n	80045fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 808e 	beq.w	80045ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f005 ff90 	bl	800a402 <USB_ReadDevOutEPInterrupt>
 80044e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2301      	movs	r3, #1
 80044fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fed0 	bl	80052a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451e:	461a      	mov	r2, r3
 8004520:	2308      	movs	r3, #8
 8004522:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ffa6 	bl	8005478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2310      	movs	r3, #16
 8004546:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d030      	beq.n	80045b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455a:	2b80      	cmp	r3, #128	@ 0x80
 800455c:	d109      	bne.n	8004572 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800456c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004570:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	3304      	adds	r3, #4
 8004586:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d108      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f008 fbc7 	bl	800cd30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	2302      	movs	r3, #2
 80045b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	2320      	movs	r3, #32
 80045ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	3301      	adds	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f47f af62 	bne.w	80044c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f005 feb4 	bl	800a374 <USB_ReadInterrupts>
 800460c:	4603      	mov	r3, r0
 800460e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004616:	f040 80db 	bne.w	80047d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f005 fed5 	bl	800a3ce <USB_ReadDevAllInEpInterrupt>
 8004624:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800462a:	e0cd      	b.n	80047c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80c2 	beq.w	80047bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f005 fefb 	bl	800a43e <USB_ReadDevInEPInterrupt>
 8004648:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d057      	beq.n	8004704 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	2201      	movs	r2, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	43db      	mvns	r3, r3
 800466e:	69f9      	ldr	r1, [r7, #28]
 8004670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004674:	4013      	ands	r3, r2
 8004676:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	2301      	movs	r3, #1
 8004688:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	799b      	ldrb	r3, [r3, #6]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d132      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3320      	adds	r3, #32
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4403      	add	r3, r0
 80046b2:	331c      	adds	r3, #28
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4419      	add	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	3320      	adds	r3, #32
 80046c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d113      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x3a2>
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	3324      	adds	r3, #36	@ 0x24
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046f0:	461a      	mov	r2, r3
 80046f2:	2101      	movs	r1, #1
 80046f4:	f005 ff02 	bl	800a4fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f008 fa91 	bl	800cc26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471a:	461a      	mov	r2, r3
 800471c:	2308      	movs	r3, #8
 800471e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004736:	461a      	mov	r2, r3
 8004738:	2310      	movs	r3, #16
 800473a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004752:	461a      	mov	r2, r3
 8004754:	2340      	movs	r3, #64	@ 0x40
 8004756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d023      	beq.n	80047aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004762:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004764:	6a38      	ldr	r0, [r7, #32]
 8004766:	f004 fee9 	bl	800953c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	3310      	adds	r3, #16
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
 800477c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	78db      	ldrb	r3, [r3, #3]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f008 fade 	bl	800cd54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	2302      	movs	r3, #2
 80047a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fcea 	bl	8005190 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	3301      	adds	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f47f af2e 	bne.w	800462c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f005 fdcd 	bl	800a374 <USB_ReadInterrupts>
 80047da:	4603      	mov	r3, r0
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047e4:	d122      	bne.n	800482c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004800:	2b01      	cmp	r3, #1
 8004802:	d108      	bne.n	8004816 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800480c:	2100      	movs	r1, #0
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f008 fc58 	bl	800d0c4 <HAL_PCDEx_LPM_Callback>
 8004814:	e002      	b.n	800481c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f008 fa7c 	bl	800cd14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800482a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f005 fd9f 	bl	800a374 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004840:	d112      	bne.n	8004868 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d102      	bne.n	8004858 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f008 fa38 	bl	800ccc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004866:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f005 fd81 	bl	800a374 <USB_ReadInterrupts>
 8004872:	4603      	mov	r3, r0
 8004874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800487c:	d121      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800488c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004894:	2b00      	cmp	r3, #0
 8004896:	d111      	bne.n	80048bc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048b2:	2101      	movs	r1, #1
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f008 fc05 	bl	800d0c4 <HAL_PCDEx_LPM_Callback>
 80048ba:	e002      	b.n	80048c2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f008 fa03 	bl	800ccc8 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f005 fd54 	bl	800a374 <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d6:	f040 80b7 	bne.w	8004a48 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2110      	movs	r1, #16
 80048f4:	4618      	mov	r0, r3
 80048f6:	f004 fe21 	bl	800953c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048fe:	e046      	b.n	800498e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490c:	461a      	mov	r2, r3
 800490e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004912:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800492e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004932:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004946:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004962:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004966:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004982:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004986:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498a:	3301      	adds	r3, #1
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	791b      	ldrb	r3, [r3, #4]
 8004992:	461a      	mov	r2, r3
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	4293      	cmp	r3, r2
 8004998:	d3b2      	bcc.n	8004900 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049a8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80049ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	7bdb      	ldrb	r3, [r3, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049c6:	f043 030b 	orr.w	r3, r3, #11
 80049ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049dc:	f043 030b 	orr.w	r3, r3, #11
 80049e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80049e2:	e015      	b.n	8004a10 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049f6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80049fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a0a:	f043 030b 	orr.w	r3, r3, #11
 8004a0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a32:	461a      	mov	r2, r3
 8004a34:	f005 fd62 	bl	800a4fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f005 fc91 	bl	800a374 <USB_ReadInterrupts>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5c:	d123      	bne.n	8004aa6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f005 fd27 	bl	800a4b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f004 fdde 	bl	800962e <USB_GetDevSpeed>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681c      	ldr	r4, [r3, #0]
 8004a7e:	f000 fea3 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 8004a82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f004 fae8 	bl	8009060 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f008 f8f0 	bl	800cc76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f005 fc62 	bl	800a374 <USB_ReadInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d10a      	bne.n	8004ad0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f008 f8cd 	bl	800cc5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f002 0208 	and.w	r2, r2, #8
 8004ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f005 fc4d 	bl	800a374 <USB_ReadInterrupts>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae0:	2b80      	cmp	r3, #128	@ 0x80
 8004ae2:	d123      	bne.n	8004b2c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004af0:	2301      	movs	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af4:	e014      	b.n	8004b20 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afa:	4613      	mov	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d105      	bne.n	8004b1a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb0a 	bl	800512e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	791b      	ldrb	r3, [r3, #4]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d3e4      	bcc.n	8004af6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f005 fc1f 	bl	800a374 <USB_ReadInterrupts>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b40:	d13c      	bne.n	8004bbc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b42:	2301      	movs	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b46:	e02b      	b.n	8004ba0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3318      	adds	r3, #24
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d115      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da12      	bge.n	8004b9a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	3317      	adds	r3, #23
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 faca 	bl	800512e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	791b      	ldrb	r3, [r3, #4]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d3cd      	bcc.n	8004b48 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f005 fbd7 	bl	800a374 <USB_ReadInterrupts>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bd0:	d156      	bne.n	8004c80 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd6:	e045      	b.n	8004c64 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d12e      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da2b      	bge.n	8004c5e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004c12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d121      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c5a:	6053      	str	r3, [r2, #4]
            break;
 8004c5c:	e008      	b.n	8004c70 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	3301      	adds	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	791b      	ldrb	r3, [r3, #4]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d3b3      	bcc.n	8004bd8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f005 fb75 	bl	800a374 <USB_ReadInterrupts>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c94:	d10a      	bne.n	8004cac <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f008 f86e 	bl	800cd78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f005 fb5f 	bl	800a374 <USB_ReadInterrupts>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d115      	bne.n	8004cec <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f008 f85e 	bl	800cd94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	e000      	b.n	8004cec <HAL_PCD_IRQHandler+0x996>
      return;
 8004cea:	bf00      	nop
    }
  }
}
 8004cec:	3734      	adds	r7, #52	@ 0x34
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}

08004cf2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_PCD_SetAddress+0x1a>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e012      	b.n	8004d32 <HAL_PCD_SetAddress+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f005 fabe 	bl	800a2a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	4608      	mov	r0, r1
 8004d44:	4611      	mov	r1, r2
 8004d46:	461a      	mov	r2, r3
 8004d48:	4603      	mov	r3, r0
 8004d4a:	70fb      	strb	r3, [r7, #3]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	803b      	strh	r3, [r7, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da0f      	bge.n	8004d80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 020f 	and.w	r2, r3, #15
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	3310      	adds	r3, #16
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	3304      	adds	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	705a      	strb	r2, [r3, #1]
 8004d7e:	e00f      	b.n	8004da0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004dac:	883b      	ldrh	r3, [r7, #0]
 8004dae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	78ba      	ldrb	r2, [r7, #2]
 8004dba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dce:	78bb      	ldrb	r3, [r7, #2]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d102      	bne.n	8004dda <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_PCD_EP_Open+0xae>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e00e      	b.n	8004e06 <HAL_PCD_EP_Open+0xcc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f004 fc3e 	bl	8009678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004e04:	7afb      	ldrb	r3, [r7, #11]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da0f      	bge.n	8004e42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	3310      	adds	r3, #16
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	4413      	add	r3, r2
 8004e36:	3304      	adds	r3, #4
 8004e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	705a      	strb	r2, [r3, #1]
 8004e40:	e00f      	b.n	8004e62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4413      	add	r3, r2
 8004e58:	3304      	adds	r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_PCD_EP_Close+0x6e>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e00e      	b.n	8004e9a <HAL_PCD_EP_Close+0x8c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f004 fc7c 	bl	8009788 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	f003 020f 	and.w	r2, r3, #15
 8004eb8:	4613      	mov	r3, r2
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3304      	adds	r3, #4
 8004eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	799b      	ldrb	r3, [r3, #6]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d102      	bne.n	8004efe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	799b      	ldrb	r3, [r3, #6]
 8004f06:	461a      	mov	r2, r3
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	f004 fd19 	bl	8009940 <USB_EPStartXfer>

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f003 020f 	and.w	r2, r3, #15
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	460b      	mov	r3, r1
 8004f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f58:	7afb      	ldrb	r3, [r7, #11]
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	3310      	adds	r3, #16
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2201      	movs	r2, #1
 8004f86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f88:	7afb      	ldrb	r3, [r7, #11]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	799b      	ldrb	r3, [r3, #6]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d102      	bne.n	8004fa2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	799b      	ldrb	r3, [r3, #6]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6979      	ldr	r1, [r7, #20]
 8004fae:	f004 fcc7 	bl	8009940 <USB_EPStartXfer>

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	7912      	ldrb	r2, [r2, #4]
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e04f      	b.n	800507a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	da0f      	bge.n	8005002 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	3310      	adds	r3, #16
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	705a      	strb	r2, [r3, #1]
 8005000:	e00d      	b.n	800501e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_PCD_EP_SetStall+0x82>
 800503a:	2302      	movs	r3, #2
 800503c:	e01d      	b.n	800507a <HAL_PCD_EP_SetStall+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	4618      	mov	r0, r3
 800504e:	f005 f855 	bl	800a0fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	7999      	ldrb	r1, [r3, #6]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800506a:	461a      	mov	r2, r3
 800506c:	f005 fa46 	bl	800a4fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	7912      	ldrb	r2, [r2, #4]
 8005098:	4293      	cmp	r3, r2
 800509a:	d901      	bls.n	80050a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e042      	b.n	8005126 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da0f      	bge.n	80050c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 020f 	and.w	r2, r3, #15
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	3310      	adds	r3, #16
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	705a      	strb	r2, [r3, #1]
 80050c6:	e00f      	b.n	80050e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	3304      	adds	r3, #4
 80050e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_PCD_EP_ClrStall+0x86>
 8005104:	2302      	movs	r3, #2
 8005106:	e00e      	b.n	8005126 <HAL_PCD_EP_ClrStall+0xa4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	4618      	mov	r0, r3
 8005118:	f005 f85e 	bl	800a1d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800513a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	da0c      	bge.n	800515c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	3310      	adds	r3, #16
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	3304      	adds	r3, #4
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e00c      	b.n	8005176 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	4613      	mov	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	3304      	adds	r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	4618      	mov	r0, r3
 800517e:	f004 fe7d 	bl	8009e7c <USB_EPStopXfer>
 8005182:	4603      	mov	r3, r0
 8005184:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005186:	7afb      	ldrb	r3, [r7, #11]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	3310      	adds	r3, #16
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d901      	bls.n	80051c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e06b      	b.n	80052a0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d902      	bls.n	80051e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3303      	adds	r3, #3
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051ec:	e02a      	b.n	8005244 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d902      	bls.n	800520a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3303      	adds	r3, #3
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68d9      	ldr	r1, [r3, #12]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4603      	mov	r3, r0
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	f004 fed2 	bl	8009fd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	441a      	add	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	429a      	cmp	r2, r3
 8005258:	d809      	bhi.n	800526e <PCD_WriteEmptyTxFifo+0xde>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005262:	429a      	cmp	r2, r3
 8005264:	d203      	bcs.n	800526e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1bf      	bne.n	80051ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691a      	ldr	r2, [r3, #16]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	429a      	cmp	r2, r3
 8005278:	d811      	bhi.n	800529e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2201      	movs	r2, #1
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	43db      	mvns	r3, r3
 8005294:	6939      	ldr	r1, [r7, #16]
 8005296:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800529a:	4013      	ands	r3, r2
 800529c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	333c      	adds	r3, #60	@ 0x3c
 80052c0:	3304      	adds	r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	799b      	ldrb	r3, [r3, #6]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d17b      	bne.n	80053d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4a61      	ldr	r2, [pc, #388]	@ (8005470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f240 80b9 	bls.w	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80b3 	beq.w	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530a:	461a      	mov	r2, r3
 800530c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005310:	6093      	str	r3, [r2, #8]
 8005312:	e0a7      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	2320      	movs	r3, #32
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	e098      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 8093 	bne.w	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4a4b      	ldr	r2, [pc, #300]	@ (8005470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d90f      	bls.n	8005366 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005362:	6093      	str	r3, [r2, #8]
 8005364:	e07e      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	3304      	adds	r3, #4
 800537a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	0159      	lsls	r1, r3, #5
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	440b      	add	r3, r1
 8005388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d114      	bne.n	80053c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053b0:	461a      	mov	r2, r3
 80053b2:	2101      	movs	r1, #1
 80053b4:	f005 f8a2 	bl	800a4fc <USB_EP0_OutStart>
 80053b8:	e006      	b.n	80053c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	441a      	add	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f007 fc0e 	bl	800cbf0 <HAL_PCD_DataOutStageCallback>
 80053d4:	e046      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4a26      	ldr	r2, [pc, #152]	@ (8005474 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d124      	bne.n	8005428 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053fa:	6093      	str	r3, [r2, #8]
 80053fc:	e032      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	461a      	mov	r2, r3
 8005416:	2320      	movs	r3, #32
 8005418:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f007 fbe5 	bl	800cbf0 <HAL_PCD_DataOutStageCallback>
 8005426:	e01d      	b.n	8005464 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <PCD_EP_OutXfrComplete_int+0x1b0>
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d108      	bne.n	8005458 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005450:	461a      	mov	r2, r3
 8005452:	2100      	movs	r1, #0
 8005454:	f005 f852 	bl	800a4fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f007 fbc6 	bl	800cbf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	4f54300a 	.word	0x4f54300a
 8005474:	4f54310a 	.word	0x4f54310a

08005478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	333c      	adds	r3, #60	@ 0x3c
 8005490:	3304      	adds	r3, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a15      	ldr	r2, [pc, #84]	@ (8005500 <PCD_EP_OutSetupPacket_int+0x88>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d90e      	bls.n	80054cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c4:	461a      	mov	r2, r3
 80054c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f007 fb7d 	bl	800cbcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a0a      	ldr	r2, [pc, #40]	@ (8005500 <PCD_EP_OutSetupPacket_int+0x88>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d90c      	bls.n	80054f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	799b      	ldrb	r3, [r3, #6]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d108      	bne.n	80054f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054ec:	461a      	mov	r2, r3
 80054ee:	2101      	movs	r1, #1
 80054f0:	f005 f804 	bl	800a4fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	4f54300a 	.word	0x4f54300a

08005504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
 8005510:	4613      	mov	r3, r2
 8005512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005522:	883b      	ldrh	r3, [r7, #0]
 8005524:	0419      	lsls	r1, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	430a      	orrs	r2, r1
 800552e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005530:	e028      	b.n	8005584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4413      	add	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	e00d      	b.n	8005562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	3340      	adds	r3, #64	@ 0x40
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4413      	add	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	3301      	adds	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	7bfa      	ldrb	r2, [r7, #15]
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	3b01      	subs	r3, #1
 8005568:	429a      	cmp	r2, r3
 800556a:	d3ec      	bcc.n	8005546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800556c:	883b      	ldrh	r3, [r7, #0]
 800556e:	0418      	lsls	r0, r3, #16
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	3b01      	subs	r3, #1
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	4302      	orrs	r2, r0
 800557c:	3340      	adds	r3, #64	@ 0x40
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	f043 0303 	orr.w	r3, r3, #3
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0cc      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005610:	4b68      	ldr	r3, [pc, #416]	@ (80057b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d90c      	bls.n	8005638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b65      	ldr	r3, [pc, #404]	@ (80057b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	4b63      	ldr	r3, [pc, #396]	@ (80057b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e0b8      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d020      	beq.n	8005686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005650:	4b59      	ldr	r3, [pc, #356]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4a58      	ldr	r2, [pc, #352]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800565a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005668:	4b53      	ldr	r3, [pc, #332]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a52      	ldr	r2, [pc, #328]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005674:	4b50      	ldr	r3, [pc, #320]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	494d      	ldr	r1, [pc, #308]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d044      	beq.n	800571c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d107      	bne.n	80056aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569a:	4b47      	ldr	r3, [pc, #284]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d119      	bne.n	80056da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e07f      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d003      	beq.n	80056ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ba:	4b3f      	ldr	r3, [pc, #252]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e06f      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ca:	4b3b      	ldr	r3, [pc, #236]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e067      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056da:	4b37      	ldr	r3, [pc, #220]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f023 0203 	bic.w	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4934      	ldr	r1, [pc, #208]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056ec:	f7fe f8b4 	bl	8003858 <HAL_GetTick>
 80056f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f2:	e00a      	b.n	800570a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f4:	f7fe f8b0 	bl	8003858 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e04f      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570a:	4b2b      	ldr	r3, [pc, #172]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 020c 	and.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	429a      	cmp	r2, r3
 800571a:	d1eb      	bne.n	80056f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800571c:	4b25      	ldr	r3, [pc, #148]	@ (80057b4 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d20c      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b22      	ldr	r3, [pc, #136]	@ (80057b4 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b20      	ldr	r3, [pc, #128]	@ (80057b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e032      	b.n	80057aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005750:	4b19      	ldr	r3, [pc, #100]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4916      	ldr	r1, [pc, #88]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	490e      	ldr	r1, [pc, #56]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005782:	f000 fb7f 	bl	8005e84 <HAL_RCC_GetSysClockFreq>
 8005786:	4602      	mov	r2, r0
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	490a      	ldr	r1, [pc, #40]	@ (80057bc <HAL_RCC_ClockConfig+0x1c0>)
 8005794:	5ccb      	ldrb	r3, [r1, r3]
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	4a09      	ldr	r2, [pc, #36]	@ (80057c0 <HAL_RCC_ClockConfig+0x1c4>)
 800579c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800579e:	4b09      	ldr	r3, [pc, #36]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe f814 	bl	80037d0 <HAL_InitTick>

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40023c00 	.word	0x40023c00
 80057b8:	40023800 	.word	0x40023800
 80057bc:	0800dd44 	.word	0x0800dd44
 80057c0:	20000144 	.word	0x20000144
 80057c4:	20000148 	.word	0x20000148

080057c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057cc:	4b03      	ldr	r3, [pc, #12]	@ (80057dc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000144 	.word	0x20000144

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e4:	f7ff fff0 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0a9b      	lsrs	r3, r3, #10
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4903      	ldr	r1, [pc, #12]	@ (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40023800 	.word	0x40023800
 8005804:	0800dd54 	.word	0x0800dd54

08005808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800580c:	f7ff ffdc 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0b5b      	lsrs	r3, r3, #13
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	@ (800582c <HAL_RCC_GetPCLK2Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0800dd54 	.word	0x0800dd54

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	@ 0x30
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d010      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005868:	4b6f      	ldr	r3, [pc, #444]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800586a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800586e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	496c      	ldr	r1, [pc, #432]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005886:	2301      	movs	r3, #1
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d010      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005896:	4b64      	ldr	r3, [pc, #400]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800589c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	4960      	ldr	r1, [pc, #384]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058c4:	4b58      	ldr	r3, [pc, #352]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	4955      	ldr	r1, [pc, #340]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058e2:	d101      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80058e4:	2301      	movs	r3, #1
 80058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80058f0:	2301      	movs	r3, #1
 80058f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d017      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005900:	4b49      	ldr	r3, [pc, #292]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005906:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590e:	4946      	ldr	r1, [pc, #280]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800591e:	d101      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005920:	2301      	movs	r3, #1
 8005922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 808a 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	4a38      	ldr	r2, [pc, #224]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800594c:	6413      	str	r3, [r2, #64]	@ 0x40
 800594e:	4b36      	ldr	r3, [pc, #216]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800595a:	4b34      	ldr	r3, [pc, #208]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a33      	ldr	r2, [pc, #204]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005964:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005966:	f7fd ff77 	bl	8003858 <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fd ff73 	bl	8003858 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e278      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005980:	4b2a      	ldr	r3, [pc, #168]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800598c:	4b26      	ldr	r3, [pc, #152]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005994:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d028      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80059c0:	4a19      	ldr	r2, [pc, #100]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059c6:	4b18      	ldr	r3, [pc, #96]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d114      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059d2:	f7fd ff41 	bl	8003858 <HAL_GetTick>
 80059d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d8:	e00a      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059da:	f7fd ff3d 	bl	8003858 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e240      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ee      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a08:	d114      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005a0a:	4b07      	ldr	r3, [pc, #28]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a1e:	4902      	ldr	r1, [pc, #8]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]
 8005a24:	e00c      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005a26:	bf00      	nop
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	42470e40 	.word	0x42470e40
 8005a34:	4b4a      	ldr	r3, [pc, #296]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a49      	ldr	r2, [pc, #292]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a3e:	6093      	str	r3, [r2, #8]
 8005a40:	4b47      	ldr	r3, [pc, #284]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	4944      	ldr	r1, [pc, #272]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005a64:	4b3f      	ldr	r3, [pc, #252]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005a66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005a74:	4b3a      	ldr	r3, [pc, #232]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a82:	4937      	ldr	r1, [pc, #220]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a96:	4b32      	ldr	r3, [pc, #200]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a9c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa4:	492e      	ldr	r1, [pc, #184]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d011      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ab8:	4b29      	ldr	r3, [pc, #164]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005abe:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	4926      	ldr	r1, [pc, #152]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ad6:	d101      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af6:	491a      	ldr	r1, [pc, #104]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d011      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b10:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b18:	4911      	ldr	r1, [pc, #68]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b28:	d101      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d005      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	f040 80ff 	bne.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b46:	f7fd fe87 	bl	8003858 <HAL_GetTick>
 8005b4a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b4c:	e00e      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b4e:	f7fd fe83 	bl	8003858 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d907      	bls.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e188      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b60:	40023800 	.word	0x40023800
 8005b64:	424711e0 	.word	0x424711e0
 8005b68:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1ea      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d028      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d124      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005ba0:	4b71      	ldr	r3, [pc, #452]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	3301      	adds	r3, #1
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb8:	0e1b      	lsrs	r3, r3, #24
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	019b      	lsls	r3, r3, #6
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	071b      	lsls	r3, r3, #28
 8005be2:	4961      	ldr	r1, [pc, #388]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d004      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d035      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c14:	d130      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c16:	4b54      	ldr	r3, [pc, #336]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	3301      	adds	r3, #1
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c28:	4b4f      	ldr	r3, [pc, #316]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2e:	0f1b      	lsrs	r3, r3, #28
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	019b      	lsls	r3, r3, #6
 8005c40:	431a      	orrs	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	3b01      	subs	r3, #1
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	061b      	lsls	r3, r3, #24
 8005c52:	431a      	orrs	r2, r3
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	071b      	lsls	r3, r3, #28
 8005c58:	4943      	ldr	r1, [pc, #268]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c60:	4b41      	ldr	r3, [pc, #260]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c66:	f023 021f 	bic.w	r2, r3, #31
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	493d      	ldr	r1, [pc, #244]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d029      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8c:	d124      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c8e:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ca0:	4b31      	ldr	r3, [pc, #196]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ca6:	0f1b      	lsrs	r3, r3, #28
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	019b      	lsls	r3, r3, #6
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	071b      	lsls	r3, r3, #28
 8005cd0:	4925      	ldr	r1, [pc, #148]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	019b      	lsls	r3, r3, #6
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	071b      	lsls	r3, r3, #28
 8005d0a:	4917      	ldr	r1, [pc, #92]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d12:	4b16      	ldr	r3, [pc, #88]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fd fd9e 	bl	8003858 <HAL_GetTick>
 8005d1c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d20:	f7fd fd9a 	bl	8003858 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e09f      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 8095 	bne.w	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d46:	4b0a      	ldr	r3, [pc, #40]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fd fd84 	bl	8003858 <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d52:	e00f      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d54:	f7fd fd80 	bl	8003858 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d908      	bls.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e085      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	42470068 	.word	0x42470068
 8005d70:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d74:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d80:	d0e8      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d02b      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d127      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005daa:	4b34      	ldr	r3, [pc, #208]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	3301      	adds	r3, #1
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	4928      	ldr	r1, [pc, #160]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005de0:	4b26      	ldr	r3, [pc, #152]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	3b01      	subs	r3, #1
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	4922      	ldr	r1, [pc, #136]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01d      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e0e:	d118      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e10:	4b1a      	ldr	r3, [pc, #104]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	0e1b      	lsrs	r3, r3, #24
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	019b      	lsls	r3, r3, #6
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	3b01      	subs	r3, #1
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	4910      	ldr	r1, [pc, #64]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e42:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e48:	f7fd fd06 	bl	8003858 <HAL_GetTick>
 8005e4c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e50:	f7fd fd02 	bl	8003858 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e007      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e6e:	d1ef      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3730      	adds	r7, #48	@ 0x30
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	42470070 	.word	0x42470070

08005e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b0a6      	sub	sp, #152	@ 0x98
 8005e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eaa:	4bc8      	ldr	r3, [pc, #800]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	f200 817e 	bhi.w	80061b4 <HAL_RCC_GetSysClockFreq+0x330>
 8005eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	080061b5 	.word	0x080061b5
 8005ec8:	080061b5 	.word	0x080061b5
 8005ecc:	080061b5 	.word	0x080061b5
 8005ed0:	08005efd 	.word	0x08005efd
 8005ed4:	080061b5 	.word	0x080061b5
 8005ed8:	080061b5 	.word	0x080061b5
 8005edc:	080061b5 	.word	0x080061b5
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	080061b5 	.word	0x080061b5
 8005ee8:	080061b5 	.word	0x080061b5
 8005eec:	080061b5 	.word	0x080061b5
 8005ef0:	0800606f 	.word	0x0800606f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ef4:	4bb6      	ldr	r3, [pc, #728]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005efa:	e15f      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005efc:	4bb5      	ldr	r3, [pc, #724]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005f02:	e15b      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f04:	4bb1      	ldr	r3, [pc, #708]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f10:	4bae      	ldr	r3, [pc, #696]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d031      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1c:	4bab      	ldr	r3, [pc, #684]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	099b      	lsrs	r3, r3, #6
 8005f22:	2200      	movs	r2, #0
 8005f24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f30:	2300      	movs	r3, #0
 8005f32:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f34:	4ba7      	ldr	r3, [pc, #668]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f36:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005f3a:	462a      	mov	r2, r5
 8005f3c:	fb03 f202 	mul.w	r2, r3, r2
 8005f40:	2300      	movs	r3, #0
 8005f42:	4621      	mov	r1, r4
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	4413      	add	r3, r2
 8005f4a:	4aa2      	ldr	r2, [pc, #648]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	fba1 1202 	umull	r1, r2, r1, r2
 8005f52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f54:	460a      	mov	r2, r1
 8005f56:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005f58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f5a:	4413      	add	r3, r2
 8005f5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f62:	2200      	movs	r2, #0
 8005f64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005f68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f6c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005f70:	f7fa fdbc 	bl	8000aec <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4613      	mov	r3, r2
 8005f7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f7e:	e064      	b.n	800604a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f80:	4b92      	ldr	r3, [pc, #584]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	099b      	lsrs	r3, r3, #6
 8005f86:	2200      	movs	r2, #0
 8005f88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f8a:	657a      	str	r2, [r7, #84]	@ 0x54
 8005f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f94:	2300      	movs	r3, #0
 8005f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f98:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	0159      	lsls	r1, r3, #5
 8005faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fae:	0150      	lsls	r0, r2, #5
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	1a51      	subs	r1, r2, r1
 8005fb8:	6139      	str	r1, [r7, #16]
 8005fba:	4629      	mov	r1, r5
 8005fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fce:	4659      	mov	r1, fp
 8005fd0:	018b      	lsls	r3, r1, #6
 8005fd2:	4651      	mov	r1, sl
 8005fd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fd8:	4651      	mov	r1, sl
 8005fda:	018a      	lsls	r2, r1, #6
 8005fdc:	4651      	mov	r1, sl
 8005fde:	ebb2 0801 	subs.w	r8, r2, r1
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	eb63 0901 	sbc.w	r9, r3, r1
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffc:	4690      	mov	r8, r2
 8005ffe:	4699      	mov	r9, r3
 8006000:	4623      	mov	r3, r4
 8006002:	eb18 0303 	adds.w	r3, r8, r3
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	462b      	mov	r3, r5
 800600a:	eb49 0303 	adc.w	r3, r9, r3
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800601c:	4629      	mov	r1, r5
 800601e:	028b      	lsls	r3, r1, #10
 8006020:	4621      	mov	r1, r4
 8006022:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006026:	4621      	mov	r1, r4
 8006028:	028a      	lsls	r2, r1, #10
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006032:	2200      	movs	r2, #0
 8006034:	643b      	str	r3, [r7, #64]	@ 0x40
 8006036:	647a      	str	r2, [r7, #68]	@ 0x44
 8006038:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800603c:	f7fa fd56 	bl	8000aec <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4613      	mov	r3, r2
 8006046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800604a:	4b60      	ldr	r3, [pc, #384]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	f003 0303 	and.w	r3, r3, #3
 8006054:	3301      	adds	r3, #1
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800605c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006060:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800606c:	e0a6      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800606e:	4b57      	ldr	r3, [pc, #348]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006076:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800607a:	4b54      	ldr	r3, [pc, #336]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d02a      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006086:	4b51      	ldr	r3, [pc, #324]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	099b      	lsrs	r3, r3, #6
 800608c:	2200      	movs	r2, #0
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006090:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006098:	2100      	movs	r1, #0
 800609a:	4b4e      	ldr	r3, [pc, #312]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800609c:	fb03 f201 	mul.w	r2, r3, r1
 80060a0:	2300      	movs	r3, #0
 80060a2:	fb00 f303 	mul.w	r3, r0, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	4a4a      	ldr	r2, [pc, #296]	@ (80061d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80060aa:	fba0 1202 	umull	r1, r2, r0, r2
 80060ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80060b0:	460a      	mov	r2, r1
 80060b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80060b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060b6:	4413      	add	r3, r2
 80060b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80060ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060be:	2200      	movs	r2, #0
 80060c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80060c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80060c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80060cc:	f7fa fd0e 	bl	8000aec <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4613      	mov	r3, r2
 80060d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060da:	e05b      	b.n	8006194 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060dc:	4b3b      	ldr	r3, [pc, #236]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	099b      	lsrs	r3, r3, #6
 80060e2:	2200      	movs	r2, #0
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	623b      	str	r3, [r7, #32]
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	f04f 0000 	mov.w	r0, #0
 8006100:	f04f 0100 	mov.w	r1, #0
 8006104:	0159      	lsls	r1, r3, #5
 8006106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610a:	0150      	lsls	r0, r2, #5
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4641      	mov	r1, r8
 8006112:	ebb2 0a01 	subs.w	sl, r2, r1
 8006116:	4649      	mov	r1, r9
 8006118:	eb63 0b01 	sbc.w	fp, r3, r1
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800612c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006130:	ebb2 040a 	subs.w	r4, r2, sl
 8006134:	eb63 050b 	sbc.w	r5, r3, fp
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	00eb      	lsls	r3, r5, #3
 8006142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006146:	00e2      	lsls	r2, r4, #3
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	4643      	mov	r3, r8
 800614e:	18e3      	adds	r3, r4, r3
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	464b      	mov	r3, r9
 8006154:	eb45 0303 	adc.w	r3, r5, r3
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006166:	4629      	mov	r1, r5
 8006168:	028b      	lsls	r3, r1, #10
 800616a:	4621      	mov	r1, r4
 800616c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006170:	4621      	mov	r1, r4
 8006172:	028a      	lsls	r2, r1, #10
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800617c:	2200      	movs	r2, #0
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	61fa      	str	r2, [r7, #28]
 8006182:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006186:	f7fa fcb1 	bl	8000aec <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4613      	mov	r3, r2
 8006190:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006194:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	0f1b      	lsrs	r3, r3, #28
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80061a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061b2:	e003      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061b4:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80061b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80061ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3798      	adds	r7, #152	@ 0x98
 80061c4:	46bd      	mov	sp, r7
 80061c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ca:	bf00      	nop
 80061cc:	40023800 	.word	0x40023800
 80061d0:	00f42400 	.word	0x00f42400
 80061d4:	00b71b00 	.word	0x00b71b00

080061d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e28d      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8083 	beq.w	80062fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061f8:	4b94      	ldr	r3, [pc, #592]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 030c 	and.w	r3, r3, #12
 8006200:	2b04      	cmp	r3, #4
 8006202:	d019      	beq.n	8006238 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006204:	4b91      	ldr	r3, [pc, #580]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 030c 	and.w	r3, r3, #12
        || \
 800620c:	2b08      	cmp	r3, #8
 800620e:	d106      	bne.n	800621e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006210:	4b8e      	ldr	r3, [pc, #568]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800621c:	d00c      	beq.n	8006238 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621e:	4b8b      	ldr	r3, [pc, #556]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006226:	2b0c      	cmp	r3, #12
 8006228:	d112      	bne.n	8006250 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b88      	ldr	r3, [pc, #544]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006232:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006236:	d10b      	bne.n	8006250 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006238:	4b84      	ldr	r3, [pc, #528]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d05b      	beq.n	80062fc <HAL_RCC_OscConfig+0x124>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d157      	bne.n	80062fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e25a      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006258:	d106      	bne.n	8006268 <HAL_RCC_OscConfig+0x90>
 800625a:	4b7c      	ldr	r3, [pc, #496]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a7b      	ldr	r2, [pc, #492]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xcc>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0xb4>
 8006272:	4b76      	ldr	r3, [pc, #472]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a75      	ldr	r2, [pc, #468]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b73      	ldr	r3, [pc, #460]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a72      	ldr	r2, [pc, #456]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xcc>
 800628c:	4b6f      	ldr	r3, [pc, #444]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6e      	ldr	r2, [pc, #440]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b6c      	ldr	r3, [pc, #432]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6b      	ldr	r2, [pc, #428]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fd fad4 	bl	8003858 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fd fad0 	bl	8003858 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	@ 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e21f      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b61      	ldr	r3, [pc, #388]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xdc>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fd fac0 	bl	8003858 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fd fabc 	bl	8003858 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	@ 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e20b      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	4b57      	ldr	r3, [pc, #348]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x104>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d06f      	beq.n	80063ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800630a:	4b50      	ldr	r3, [pc, #320]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b00      	cmp	r3, #0
 8006314:	d017      	beq.n	8006346 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006316:	4b4d      	ldr	r3, [pc, #308]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
        || \
 800631e:	2b08      	cmp	r3, #8
 8006320:	d105      	bne.n	800632e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006322:	4b4a      	ldr	r3, [pc, #296]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b47      	ldr	r3, [pc, #284]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006336:	2b0c      	cmp	r3, #12
 8006338:	d11c      	bne.n	8006374 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633a:	4b44      	ldr	r3, [pc, #272]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d116      	bne.n	8006374 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006346:	4b41      	ldr	r3, [pc, #260]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_RCC_OscConfig+0x186>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d001      	beq.n	800635e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e1d3      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635e:	4b3b      	ldr	r3, [pc, #236]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4937      	ldr	r1, [pc, #220]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800636e:	4313      	orrs	r3, r2
 8006370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006372:	e03a      	b.n	80063ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d020      	beq.n	80063be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800637c:	4b34      	ldr	r3, [pc, #208]	@ (8006450 <HAL_RCC_OscConfig+0x278>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fd fa69 	bl	8003858 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800638a:	f7fd fa65 	bl	8003858 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e1b4      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639c:	4b2b      	ldr	r3, [pc, #172]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a8:	4b28      	ldr	r3, [pc, #160]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4925      	ldr	r1, [pc, #148]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]
 80063bc:	e015      	b.n	80063ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063be:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <HAL_RCC_OscConfig+0x278>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fd fa48 	bl	8003858 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fd fa44 	bl	8003858 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e193      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063de:	4b1b      	ldr	r3, [pc, #108]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d036      	beq.n	8006464 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d016      	beq.n	800642c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fd fa28 	bl	8003858 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800640c:	f7fd fa24 	bl	8003858 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e173      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641e:	4b0b      	ldr	r3, [pc, #44]	@ (800644c <HAL_RCC_OscConfig+0x274>)
 8006420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x234>
 800642a:	e01b      	b.n	8006464 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800642c:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <HAL_RCC_OscConfig+0x27c>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006432:	f7fd fa11 	bl	8003858 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006438:	e00e      	b.n	8006458 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800643a:	f7fd fa0d 	bl	8003858 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d907      	bls.n	8006458 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e15c      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
 800644c:	40023800 	.word	0x40023800
 8006450:	42470000 	.word	0x42470000
 8006454:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006458:	4b8a      	ldr	r3, [pc, #552]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800645a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1ea      	bne.n	800643a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8097 	beq.w	80065a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006476:	4b83      	ldr	r3, [pc, #524]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10f      	bne.n	80064a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	4b7f      	ldr	r3, [pc, #508]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	4a7e      	ldr	r2, [pc, #504]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800648c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006490:	6413      	str	r3, [r2, #64]	@ 0x40
 8006492:	4b7c      	ldr	r3, [pc, #496]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a2:	4b79      	ldr	r3, [pc, #484]	@ (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d118      	bne.n	80064e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ae:	4b76      	ldr	r3, [pc, #472]	@ (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a75      	ldr	r2, [pc, #468]	@ (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ba:	f7fd f9cd 	bl	8003858 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c2:	f7fd f9c9 	bl	8003858 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e118      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006688 <HAL_RCC_OscConfig+0x4b0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0f0      	beq.n	80064c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d106      	bne.n	80064f6 <HAL_RCC_OscConfig+0x31e>
 80064e8:	4b66      	ldr	r3, [pc, #408]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ec:	4a65      	ldr	r2, [pc, #404]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f4:	e01c      	b.n	8006530 <HAL_RCC_OscConfig+0x358>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0x340>
 80064fe:	4b61      	ldr	r3, [pc, #388]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	4a60      	ldr	r2, [pc, #384]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006504:	f043 0304 	orr.w	r3, r3, #4
 8006508:	6713      	str	r3, [r2, #112]	@ 0x70
 800650a:	4b5e      	ldr	r3, [pc, #376]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	4a5d      	ldr	r2, [pc, #372]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0x358>
 8006518:	4b5a      	ldr	r3, [pc, #360]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651c:	4a59      	ldr	r2, [pc, #356]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	6713      	str	r3, [r2, #112]	@ 0x70
 8006524:	4b57      	ldr	r3, [pc, #348]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006528:	4a56      	ldr	r2, [pc, #344]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800652a:	f023 0304 	bic.w	r3, r3, #4
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fd f98e 	bl	8003858 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653e:	e00a      	b.n	8006556 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006540:	f7fd f98a 	bl	8003858 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e0d7      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006556:	4b4b      	ldr	r3, [pc, #300]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ee      	beq.n	8006540 <HAL_RCC_OscConfig+0x368>
 8006562:	e014      	b.n	800658e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006564:	f7fd f978 	bl	8003858 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656a:	e00a      	b.n	8006582 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656c:	f7fd f974 	bl	8003858 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e0c1      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006582:	4b40      	ldr	r3, [pc, #256]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1ee      	bne.n	800656c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d105      	bne.n	80065a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006594:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006598:	4a3a      	ldr	r2, [pc, #232]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800659a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800659e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80ad 	beq.w	8006704 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065aa:	4b36      	ldr	r3, [pc, #216]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b08      	cmp	r3, #8
 80065b4:	d060      	beq.n	8006678 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d145      	bne.n	800664a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065be:	4b33      	ldr	r3, [pc, #204]	@ (800668c <HAL_RCC_OscConfig+0x4b4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fd f948 	bl	8003858 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065cc:	f7fd f944 	bl	8003858 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e093      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065de:	4b29      	ldr	r3, [pc, #164]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f0      	bne.n	80065cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69da      	ldr	r2, [r3, #28]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	019b      	lsls	r3, r3, #6
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	3b01      	subs	r3, #1
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006614:	071b      	lsls	r3, r3, #28
 8006616:	491b      	ldr	r1, [pc, #108]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 8006618:	4313      	orrs	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800661c:	4b1b      	ldr	r3, [pc, #108]	@ (800668c <HAL_RCC_OscConfig+0x4b4>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fd f919 	bl	8003858 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662a:	f7fd f915 	bl	8003858 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e064      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663c:	4b11      	ldr	r3, [pc, #68]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x452>
 8006648:	e05c      	b.n	8006704 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664a:	4b10      	ldr	r3, [pc, #64]	@ (800668c <HAL_RCC_OscConfig+0x4b4>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fd f902 	bl	8003858 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006658:	f7fd f8fe 	bl	8003858 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e04d      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <HAL_RCC_OscConfig+0x4ac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x480>
 8006676:	e045      	b.n	8006704 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e040      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
 8006684:	40023800 	.word	0x40023800
 8006688:	40007000 	.word	0x40007000
 800668c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006690:	4b1f      	ldr	r3, [pc, #124]	@ (8006710 <HAL_RCC_OscConfig+0x538>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d030      	beq.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d129      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d122      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066c0:	4013      	ands	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d119      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	3b01      	subs	r3, #1
 80066da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d10f      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d107      	bne.n	8006700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40023800 	.word	0x40023800

08006714 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e07b      	b.n	800681e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d108      	bne.n	8006740 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006736:	d009      	beq.n	800674c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	61da      	str	r2, [r3, #28]
 800673e:	e005      	b.n	800674c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fc fd4e 	bl	8003208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006782:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d0:	ea42 0103 	orr.w	r1, r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	f003 0104 	and.w	r1, r3, #4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	f003 0210 	and.w	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800680c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006836:	f7fd f80f 	bl	8003858 <HAL_GetTick>
 800683a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d001      	beq.n	8006850 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
 800684e:	e12a      	b.n	8006aa6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_SPI_Transmit+0x36>
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e122      	b.n	8006aa6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_SPI_Transmit+0x48>
 800686a:	2302      	movs	r3, #2
 800686c:	e11b      	b.n	8006aa6 <HAL_SPI_Transmit+0x280>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2203      	movs	r2, #3
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88fa      	ldrh	r2, [r7, #6]
 800688e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068bc:	d10f      	bne.n	80068de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e8:	2b40      	cmp	r3, #64	@ 0x40
 80068ea:	d007      	beq.n	80068fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006904:	d152      	bne.n	80069ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_SPI_Transmit+0xee>
 800690e:	8b7b      	ldrh	r3, [r7, #26]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d145      	bne.n	80069a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006918:	881a      	ldrh	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	1c9a      	adds	r2, r3, #2
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006938:	e032      	b.n	80069a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b02      	cmp	r3, #2
 8006946:	d112      	bne.n	800696e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694c:	881a      	ldrh	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006958:	1c9a      	adds	r2, r3, #2
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800696c:	e018      	b.n	80069a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696e:	f7fc ff73 	bl	8003858 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d803      	bhi.n	8006986 <HAL_SPI_Transmit+0x160>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006984:	d102      	bne.n	800698c <HAL_SPI_Transmit+0x166>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e082      	b.n	8006aa6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1c7      	bne.n	800693a <HAL_SPI_Transmit+0x114>
 80069aa:	e053      	b.n	8006a54 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_SPI_Transmit+0x194>
 80069b4:	8b7b      	ldrh	r3, [r7, #26]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d147      	bne.n	8006a4a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069e0:	e033      	b.n	8006a4a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d113      	bne.n	8006a18 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a16:	e018      	b.n	8006a4a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a18:	f7fc ff1e 	bl	8003858 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d803      	bhi.n	8006a30 <HAL_SPI_Transmit+0x20a>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a2e:	d102      	bne.n	8006a36 <HAL_SPI_Transmit+0x210>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e02d      	b.n	8006aa6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1c6      	bne.n	80069e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 fbd9 	bl	8007210 <SPI_EndRxTxTransaction>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
  }
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b088      	sub	sp, #32
 8006ab2:	af02      	add	r7, sp, #8
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d001      	beq.n	8006ace <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e104      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ad6:	d112      	bne.n	8006afe <HAL_SPI_Receive+0x50>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10e      	bne.n	8006afe <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	4613      	mov	r3, r2
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f8f3 	bl	8006ce0 <HAL_SPI_TransmitReceive>
 8006afa:	4603      	mov	r3, r0
 8006afc:	e0ec      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006afe:	f7fc feab 	bl	8003858 <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_SPI_Receive+0x62>
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0e1      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_SPI_Receive+0x74>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0da      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	88fa      	ldrh	r2, [r7, #6]
 8006b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	88fa      	ldrh	r2, [r7, #6]
 8006b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b70:	d10f      	bne.n	8006b92 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9c:	2b40      	cmp	r3, #64	@ 0x40
 8006b9e:	d007      	beq.n	8006bb0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d170      	bne.n	8006c9a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006bb8:	e035      	b.n	8006c26 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d115      	bne.n	8006bf4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f103 020c 	add.w	r2, r3, #12
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bf2:	e018      	b.n	8006c26 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf4:	f7fc fe30 	bl	8003858 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d803      	bhi.n	8006c0c <HAL_SPI_Receive+0x15e>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c0a:	d102      	bne.n	8006c12 <HAL_SPI_Receive+0x164>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e058      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1c4      	bne.n	8006bba <HAL_SPI_Receive+0x10c>
 8006c30:	e038      	b.n	8006ca4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d113      	bne.n	8006c68 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c66:	e018      	b.n	8006c9a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c68:	f7fc fdf6 	bl	8003858 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d803      	bhi.n	8006c80 <HAL_SPI_Receive+0x1d2>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7e:	d102      	bne.n	8006c86 <HAL_SPI_Receive+0x1d8>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e01e      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1c6      	bne.n	8006c32 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fa4b 	bl	8007144 <SPI_EndRxTransaction>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	@ 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf2:	f7fc fdb1 	bl	8003858 <HAL_GetTick>
 8006cf6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cfe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d06:	887b      	ldrh	r3, [r7, #2]
 8006d08:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d00c      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x4a>
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d16:	d106      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x46>
 8006d20:	7ffb      	ldrb	r3, [r7, #31]
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d001      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006d26:	2302      	movs	r3, #2
 8006d28:	e17f      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_SPI_TransmitReceive+0x5c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_SPI_TransmitReceive+0x5c>
 8006d36:	887b      	ldrh	r3, [r7, #2]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e174      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_SPI_TransmitReceive+0x6e>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e16d      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d003      	beq.n	8006d6a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2205      	movs	r2, #5
 8006d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	887a      	ldrh	r2, [r7, #2]
 8006d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	887a      	ldrh	r2, [r7, #2]
 8006d80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	887a      	ldrh	r2, [r7, #2]
 8006d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	887a      	ldrh	r2, [r7, #2]
 8006d92:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006daa:	2b40      	cmp	r3, #64	@ 0x40
 8006dac:	d007      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dc6:	d17e      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_SPI_TransmitReceive+0xf6>
 8006dd0:	8afb      	ldrh	r3, [r7, #22]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d16c      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dda:	881a      	ldrh	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de6:	1c9a      	adds	r2, r3, #2
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dfa:	e059      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d11b      	bne.n	8006e42 <HAL_SPI_TransmitReceive+0x162>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <HAL_SPI_TransmitReceive+0x162>
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d113      	bne.n	8006e42 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	881a      	ldrh	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2a:	1c9a      	adds	r2, r3, #2
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d119      	bne.n	8006e84 <HAL_SPI_TransmitReceive+0x1a4>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d014      	beq.n	8006e84 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	b292      	uxth	r2, r2
 8006e66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	1c9a      	adds	r2, r3, #2
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e80:	2301      	movs	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e84:	f7fc fce8 	bl	8003858 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d80d      	bhi.n	8006eb0 <HAL_SPI_TransmitReceive+0x1d0>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e9a:	d009      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e0bc      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1a0      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x11c>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d19b      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x11c>
 8006ec4:	e082      	b.n	8006fcc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_SPI_TransmitReceive+0x1f4>
 8006ece:	8afb      	ldrh	r3, [r7, #22]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d171      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006efa:	e05d      	b.n	8006fb8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d11c      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x264>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d017      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0x264>
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d114      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d119      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x2a6>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d014      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f82:	2301      	movs	r3, #1
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f86:	f7fc fc67 	bl	8003858 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d803      	bhi.n	8006f9e <HAL_SPI_TransmitReceive+0x2be>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f9c:	d102      	bne.n	8006fa4 <HAL_SPI_TransmitReceive+0x2c4>
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e038      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d19c      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x21c>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d197      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fcc:	6a3a      	ldr	r2, [r7, #32]
 8006fce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 f91d 	bl	8007210 <SPI_EndRxTxTransaction>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e01d      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007028:	2300      	movs	r3, #0
  }
}
 800702a:	4618      	mov	r0, r3
 800702c:	3728      	adds	r7, #40	@ 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007044:	f7fc fc08 	bl	8003858 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4413      	add	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007054:	f7fc fc00 	bl	8003858 <HAL_GetTick>
 8007058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800705a:	4b39      	ldr	r3, [pc, #228]	@ (8007140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	015b      	lsls	r3, r3, #5
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	fb02 f303 	mul.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800706a:	e054      	b.n	8007116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007072:	d050      	beq.n	8007116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007074:	f7fc fbf0 	bl	8003858 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	429a      	cmp	r2, r3
 8007082:	d902      	bls.n	800708a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d13d      	bne.n	8007106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070a2:	d111      	bne.n	80070c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ac:	d004      	beq.n	80070b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b6:	d107      	bne.n	80070c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d0:	d10f      	bne.n	80070f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e017      	b.n	8007136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3b01      	subs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	bf0c      	ite	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	2300      	movne	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	429a      	cmp	r2, r3
 8007132:	d19b      	bne.n	800706c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000144 	.word	0x20000144

08007144 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007158:	d111      	bne.n	800717e <SPI_EndRxTransaction+0x3a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007162:	d004      	beq.n	800716e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800716c:	d107      	bne.n	800717e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800717c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007186:	d12a      	bne.n	80071de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007190:	d012      	beq.n	80071b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	2180      	movs	r1, #128	@ 0x80
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ff49 	bl	8007034 <SPI_WaitFlagStateUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d02d      	beq.n	8007204 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ac:	f043 0220 	orr.w	r2, r3, #32
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e026      	b.n	8007206 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	2101      	movs	r1, #1
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff ff36 	bl	8007034 <SPI_WaitFlagStateUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d01a      	beq.n	8007204 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d2:	f043 0220 	orr.w	r2, r3, #32
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e013      	b.n	8007206 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2200      	movs	r2, #0
 80071e6:	2101      	movs	r1, #1
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff ff23 	bl	8007034 <SPI_WaitFlagStateUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f8:	f043 0220 	orr.w	r2, r3, #32
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e000      	b.n	8007206 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af02      	add	r7, sp, #8
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2201      	movs	r2, #1
 8007224:	2102      	movs	r1, #2
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff ff04 	bl	8007034 <SPI_WaitFlagStateUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	f043 0220 	orr.w	r2, r3, #32
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e032      	b.n	80072a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007242:	4b1b      	ldr	r3, [pc, #108]	@ (80072b0 <SPI_EndRxTxTransaction+0xa0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1b      	ldr	r2, [pc, #108]	@ (80072b4 <SPI_EndRxTxTransaction+0xa4>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	0d5b      	lsrs	r3, r3, #21
 800724e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007252:	fb02 f303 	mul.w	r3, r2, r3
 8007256:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007260:	d112      	bne.n	8007288 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	2180      	movs	r1, #128	@ 0x80
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f7ff fee1 	bl	8007034 <SPI_WaitFlagStateUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d016      	beq.n	80072a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727c:	f043 0220 	orr.w	r2, r3, #32
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e00f      	b.n	80072a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	3b01      	subs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729e:	2b80      	cmp	r3, #128	@ 0x80
 80072a0:	d0f2      	beq.n	8007288 <SPI_EndRxTxTransaction+0x78>
 80072a2:	e000      	b.n	80072a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80072a4:	bf00      	nop
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000144 	.word	0x20000144
 80072b4:	165e9f81 	.word	0x165e9f81

080072b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e041      	b.n	800734e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fb ffda 	bl	8003298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f000 fd6c 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d001      	beq.n	8007370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e04e      	b.n	800740e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a23      	ldr	r2, [pc, #140]	@ (800741c <HAL_TIM_Base_Start_IT+0xc4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d022      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800739a:	d01d      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007420 <HAL_TIM_Base_Start_IT+0xc8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d018      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007424 <HAL_TIM_Base_Start_IT+0xcc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d013      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007428 <HAL_TIM_Base_Start_IT+0xd0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00e      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1b      	ldr	r2, [pc, #108]	@ (800742c <HAL_TIM_Base_Start_IT+0xd4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d009      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a19      	ldr	r2, [pc, #100]	@ (8007430 <HAL_TIM_Base_Start_IT+0xd8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d004      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x80>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a18      	ldr	r2, [pc, #96]	@ (8007434 <HAL_TIM_Base_Start_IT+0xdc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d111      	bne.n	80073fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d010      	beq.n	800740c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073fa:	e007      	b.n	800740c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40010000 	.word	0x40010000
 8007420:	40000400 	.word	0x40000400
 8007424:	40000800 	.word	0x40000800
 8007428:	40000c00 	.word	0x40000c00
 800742c:	40010400 	.word	0x40010400
 8007430:	40014000 	.word	0x40014000
 8007434:	40001800 	.word	0x40001800

08007438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e041      	b.n	80074ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fc f818 	bl	8003494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f000 fcac 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e041      	b.n	800756c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f839 	bl	8007574 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f000 fc5d 	bl	8007dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b0c      	cmp	r3, #12
 800759a:	d841      	bhi.n	8007620 <HAL_TIM_IC_Stop_IT+0x98>
 800759c:	a201      	add	r2, pc, #4	@ (adr r2, 80075a4 <HAL_TIM_IC_Stop_IT+0x1c>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075d9 	.word	0x080075d9
 80075a8:	08007621 	.word	0x08007621
 80075ac:	08007621 	.word	0x08007621
 80075b0:	08007621 	.word	0x08007621
 80075b4:	080075eb 	.word	0x080075eb
 80075b8:	08007621 	.word	0x08007621
 80075bc:	08007621 	.word	0x08007621
 80075c0:	08007621 	.word	0x08007621
 80075c4:	080075fd 	.word	0x080075fd
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007621 	.word	0x08007621
 80075d0:	08007621 	.word	0x08007621
 80075d4:	0800760f 	.word	0x0800760f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0202 	bic.w	r2, r2, #2
 80075e6:	60da      	str	r2, [r3, #12]
      break;
 80075e8:	e01d      	b.n	8007626 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0204 	bic.w	r2, r2, #4
 80075f8:	60da      	str	r2, [r3, #12]
      break;
 80075fa:	e014      	b.n	8007626 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0208 	bic.w	r2, r2, #8
 800760a:	60da      	str	r2, [r3, #12]
      break;
 800760c:	e00b      	b.n	8007626 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0210 	bic.w	r2, r2, #16
 800761c:	60da      	str	r2, [r3, #12]
      break;
 800761e:	e002      	b.n	8007626 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
      break;
 8007624:	bf00      	nop
  }

  if (status == HAL_OK)
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d156      	bne.n	80076da <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2200      	movs	r2, #0
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 ffed 	bl	8008614 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6a1a      	ldr	r2, [r3, #32]
 8007640:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007644:	4013      	ands	r3, r2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10f      	bne.n	800766a <HAL_TIM_IC_Stop_IT+0xe2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a1a      	ldr	r2, [r3, #32]
 8007650:	f240 4344 	movw	r3, #1092	@ 0x444
 8007654:	4013      	ands	r3, r2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d107      	bne.n	800766a <HAL_TIM_IC_Stop_IT+0xe2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <HAL_TIM_IC_Stop_IT+0xf2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007678:	e013      	b.n	80076a2 <HAL_TIM_IC_Stop_IT+0x11a>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b04      	cmp	r3, #4
 800767e:	d104      	bne.n	800768a <HAL_TIM_IC_Stop_IT+0x102>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007688:	e00b      	b.n	80076a2 <HAL_TIM_IC_Stop_IT+0x11a>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b08      	cmp	r3, #8
 800768e:	d104      	bne.n	800769a <HAL_TIM_IC_Stop_IT+0x112>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007698:	e003      	b.n	80076a2 <HAL_TIM_IC_Stop_IT+0x11a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <HAL_TIM_IC_Stop_IT+0x12a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076b0:	e013      	b.n	80076da <HAL_TIM_IC_Stop_IT+0x152>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d104      	bne.n	80076c2 <HAL_TIM_IC_Stop_IT+0x13a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076c0:	e00b      	b.n	80076da <HAL_TIM_IC_Stop_IT+0x152>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d104      	bne.n	80076d2 <HAL_TIM_IC_Stop_IT+0x14a>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d0:	e003      	b.n	80076da <HAL_TIM_IC_Stop_IT+0x152>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d020      	beq.n	8007748 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01b      	beq.n	8007748 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0202 	mvn.w	r2, #2
 8007718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fa fd36 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8007734:	e005      	b.n	8007742 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fb2e 	bl	8007d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb35 	bl	8007dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d020      	beq.n	8007794 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01b      	beq.n	8007794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0204 	mvn.w	r2, #4
 8007764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2202      	movs	r2, #2
 800776a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fa fd10 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8007780:	e005      	b.n	800778e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fb08 	bl	8007d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fb0f 	bl	8007dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d020      	beq.n	80077e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01b      	beq.n	80077e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0208 	mvn.w	r2, #8
 80077b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2204      	movs	r2, #4
 80077b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fa fcea 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fae2 	bl	8007d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fae9 	bl	8007dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d020      	beq.n	800782c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01b      	beq.n	800782c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0210 	mvn.w	r2, #16
 80077fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2208      	movs	r2, #8
 8007802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fa fcc4 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8007818:	e005      	b.n	8007826 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fabc 	bl	8007d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fac3 	bl	8007dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00c      	beq.n	8007850 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0201 	mvn.w	r2, #1
 8007848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fa fa78 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00c      	beq.n	8007874 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800786c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 ff7c 	bl	800876c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00c      	beq.n	8007898 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007884:	2b00      	cmp	r3, #0
 8007886:	d007      	beq.n	8007898 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa94 	bl	8007dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00c      	beq.n	80078bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0220 	mvn.w	r2, #32
 80078b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 ff4e 	bl	8008758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078bc:	bf00      	nop
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80078de:	2302      	movs	r3, #2
 80078e0:	e088      	b.n	80079f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11b      	bne.n	8007928 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007900:	f000 fcc4 	bl	800828c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 020c 	bic.w	r2, r2, #12
 8007912:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6999      	ldr	r1, [r3, #24]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	619a      	str	r2, [r3, #24]
 8007926:	e060      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b04      	cmp	r3, #4
 800792c:	d11c      	bne.n	8007968 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800793e:	f000 fd48 	bl	80083d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007950:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6999      	ldr	r1, [r3, #24]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	021a      	lsls	r2, r3, #8
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	619a      	str	r2, [r3, #24]
 8007966:	e040      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d11b      	bne.n	80079a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800797e:	f000 fd95 	bl	80084ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 020c 	bic.w	r2, r2, #12
 8007990:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69d9      	ldr	r1, [r3, #28]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	61da      	str	r2, [r3, #28]
 80079a4:	e021      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d11c      	bne.n	80079e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80079bc:	f000 fdb2 	bl	8008524 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80079ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	69d9      	ldr	r1, [r3, #28]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	61da      	str	r2, [r3, #28]
 80079e4:	e001      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e0ae      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b0c      	cmp	r3, #12
 8007a26:	f200 809f 	bhi.w	8007b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007b69 	.word	0x08007b69
 8007a38:	08007b69 	.word	0x08007b69
 8007a3c:	08007b69 	.word	0x08007b69
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007b69 	.word	0x08007b69
 8007a48:	08007b69 	.word	0x08007b69
 8007a4c:	08007b69 	.word	0x08007b69
 8007a50:	08007ae7 	.word	0x08007ae7
 8007a54:	08007b69 	.word	0x08007b69
 8007a58:	08007b69 	.word	0x08007b69
 8007a5c:	08007b69 	.word	0x08007b69
 8007a60:	08007b27 	.word	0x08007b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fa5e 	bl	8007f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0208 	orr.w	r2, r2, #8
 8007a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0204 	bic.w	r2, r2, #4
 8007a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	619a      	str	r2, [r3, #24]
      break;
 8007aa2:	e064      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 faae 	bl	800800c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6999      	ldr	r1, [r3, #24]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	619a      	str	r2, [r3, #24]
      break;
 8007ae4:	e043      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fb03 	bl	80080f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0204 	bic.w	r2, r2, #4
 8007b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	61da      	str	r2, [r3, #28]
      break;
 8007b24:	e023      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fb57 	bl	80081e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	021a      	lsls	r2, r3, #8
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	61da      	str	r2, [r3, #28]
      break;
 8007b66:	e002      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_TIM_ConfigClockSource+0x1c>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0b4      	b.n	8007d06 <HAL_TIM_ConfigClockSource+0x186>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd4:	d03e      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0xd4>
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bda:	f200 8087 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be2:	f000 8086 	beq.w	8007cf2 <HAL_TIM_ConfigClockSource+0x172>
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bea:	d87f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bec:	2b70      	cmp	r3, #112	@ 0x70
 8007bee:	d01a      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0xa6>
 8007bf0:	2b70      	cmp	r3, #112	@ 0x70
 8007bf2:	d87b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bf4:	2b60      	cmp	r3, #96	@ 0x60
 8007bf6:	d050      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0x11a>
 8007bf8:	2b60      	cmp	r3, #96	@ 0x60
 8007bfa:	d877      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bfc:	2b50      	cmp	r3, #80	@ 0x50
 8007bfe:	d03c      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0xfa>
 8007c00:	2b50      	cmp	r3, #80	@ 0x50
 8007c02:	d873      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	d058      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x13a>
 8007c08:	2b40      	cmp	r3, #64	@ 0x40
 8007c0a:	d86f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c0c:	2b30      	cmp	r3, #48	@ 0x30
 8007c0e:	d064      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d86b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d060      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d867      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05c      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d05a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c24:	e062      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c36:	f000 fccd 	bl	80085d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
      break;
 8007c52:	e04f      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c64:	f000 fcb6 	bl	80085d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c76:	609a      	str	r2, [r3, #8]
      break;
 8007c78:	e03c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	461a      	mov	r2, r3
 8007c88:	f000 fb74 	bl	8008374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2150      	movs	r1, #80	@ 0x50
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fc83 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007c98:	e02c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f000 fbd0 	bl	800844c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2160      	movs	r1, #96	@ 0x60
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fc73 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007cb8:	e01c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f000 fb54 	bl	8008374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2140      	movs	r1, #64	@ 0x40
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fc63 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007cd8:	e00c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f000 fc5a 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007cea:	e003      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e000      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b0c      	cmp	r3, #12
 8007d22:	d831      	bhi.n	8007d88 <HAL_TIM_ReadCapturedValue+0x78>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d61 	.word	0x08007d61
 8007d30:	08007d89 	.word	0x08007d89
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007d89 	.word	0x08007d89
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d89 	.word	0x08007d89
 8007d44:	08007d89 	.word	0x08007d89
 8007d48:	08007d89 	.word	0x08007d89
 8007d4c:	08007d75 	.word	0x08007d75
 8007d50:	08007d89 	.word	0x08007d89
 8007d54:	08007d89 	.word	0x08007d89
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007d7f 	.word	0x08007d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d66:	60fb      	str	r3, [r7, #12]

      break;
 8007d68:	e00f      	b.n	8007d8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	60fb      	str	r3, [r7, #12]

      break;
 8007d72:	e00a      	b.n	8007d8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7a:	60fb      	str	r3, [r7, #12]

      break;
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d84:	60fb      	str	r3, [r7, #12]

      break;
 8007d86:	e000      	b.n	8007d8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007d88:	bf00      	nop
  }

  return tmpreg;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a46      	ldr	r2, [pc, #280]	@ (8007f00 <TIM_Base_SetConfig+0x12c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d013      	beq.n	8007e14 <TIM_Base_SetConfig+0x40>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	d00f      	beq.n	8007e14 <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a43      	ldr	r2, [pc, #268]	@ (8007f04 <TIM_Base_SetConfig+0x130>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00b      	beq.n	8007e14 <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a42      	ldr	r2, [pc, #264]	@ (8007f08 <TIM_Base_SetConfig+0x134>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d007      	beq.n	8007e14 <TIM_Base_SetConfig+0x40>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a41      	ldr	r2, [pc, #260]	@ (8007f0c <TIM_Base_SetConfig+0x138>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_Base_SetConfig+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a40      	ldr	r2, [pc, #256]	@ (8007f10 <TIM_Base_SetConfig+0x13c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d108      	bne.n	8007e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a35      	ldr	r2, [pc, #212]	@ (8007f00 <TIM_Base_SetConfig+0x12c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d02b      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e34:	d027      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a32      	ldr	r2, [pc, #200]	@ (8007f04 <TIM_Base_SetConfig+0x130>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d023      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a31      	ldr	r2, [pc, #196]	@ (8007f08 <TIM_Base_SetConfig+0x134>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d01f      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a30      	ldr	r2, [pc, #192]	@ (8007f0c <TIM_Base_SetConfig+0x138>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d01b      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2f      	ldr	r2, [pc, #188]	@ (8007f10 <TIM_Base_SetConfig+0x13c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d017      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a2e      	ldr	r2, [pc, #184]	@ (8007f14 <TIM_Base_SetConfig+0x140>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a2d      	ldr	r2, [pc, #180]	@ (8007f18 <TIM_Base_SetConfig+0x144>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00f      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a2c      	ldr	r2, [pc, #176]	@ (8007f1c <TIM_Base_SetConfig+0x148>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00b      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a2b      	ldr	r2, [pc, #172]	@ (8007f20 <TIM_Base_SetConfig+0x14c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d007      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a2a      	ldr	r2, [pc, #168]	@ (8007f24 <TIM_Base_SetConfig+0x150>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a29      	ldr	r2, [pc, #164]	@ (8007f28 <TIM_Base_SetConfig+0x154>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d108      	bne.n	8007e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a10      	ldr	r2, [pc, #64]	@ (8007f00 <TIM_Base_SetConfig+0x12c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d003      	beq.n	8007ecc <TIM_Base_SetConfig+0xf8>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a12      	ldr	r2, [pc, #72]	@ (8007f10 <TIM_Base_SetConfig+0x13c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d103      	bne.n	8007ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d105      	bne.n	8007ef2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f023 0201 	bic.w	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	611a      	str	r2, [r3, #16]
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40010400 	.word	0x40010400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	40014800 	.word	0x40014800
 8007f20:	40001800 	.word	0x40001800
 8007f24:	40001c00 	.word	0x40001c00
 8007f28:	40002000 	.word	0x40002000

08007f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	f023 0201 	bic.w	r2, r3, #1
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0303 	bic.w	r3, r3, #3
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f023 0302 	bic.w	r3, r3, #2
 8007f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a20      	ldr	r2, [pc, #128]	@ (8008004 <TIM_OC1_SetConfig+0xd8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_OC1_SetConfig+0x64>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8008008 <TIM_OC1_SetConfig+0xdc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10c      	bne.n	8007faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0308 	bic.w	r3, r3, #8
 8007f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0304 	bic.w	r3, r3, #4
 8007fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <TIM_OC1_SetConfig+0xd8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d003      	beq.n	8007fba <TIM_OC1_SetConfig+0x8e>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a14      	ldr	r2, [pc, #80]	@ (8008008 <TIM_OC1_SetConfig+0xdc>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d111      	bne.n	8007fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	40010000 	.word	0x40010000
 8008008:	40010400 	.word	0x40010400

0800800c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f023 0210 	bic.w	r2, r3, #16
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0320 	bic.w	r3, r3, #32
 8008056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a22      	ldr	r2, [pc, #136]	@ (80080f0 <TIM_OC2_SetConfig+0xe4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC2_SetConfig+0x68>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a21      	ldr	r2, [pc, #132]	@ (80080f4 <TIM_OC2_SetConfig+0xe8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d10d      	bne.n	8008090 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800807a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800808e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a17      	ldr	r2, [pc, #92]	@ (80080f0 <TIM_OC2_SetConfig+0xe4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC2_SetConfig+0x94>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a16      	ldr	r2, [pc, #88]	@ (80080f4 <TIM_OC2_SetConfig+0xe8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d113      	bne.n	80080c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40010000 	.word	0x40010000
 80080f4:	40010400 	.word	0x40010400

080080f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a21      	ldr	r2, [pc, #132]	@ (80081d8 <TIM_OC3_SetConfig+0xe0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d003      	beq.n	800815e <TIM_OC3_SetConfig+0x66>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a20      	ldr	r2, [pc, #128]	@ (80081dc <TIM_OC3_SetConfig+0xe4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d10d      	bne.n	800817a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a16      	ldr	r2, [pc, #88]	@ (80081d8 <TIM_OC3_SetConfig+0xe0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d003      	beq.n	800818a <TIM_OC3_SetConfig+0x92>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a15      	ldr	r2, [pc, #84]	@ (80081dc <TIM_OC3_SetConfig+0xe4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d113      	bne.n	80081b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	bf00      	nop
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40010400 	.word	0x40010400

080081e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800820e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800822a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	031b      	lsls	r3, r3, #12
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a12      	ldr	r2, [pc, #72]	@ (8008284 <TIM_OC4_SetConfig+0xa4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC4_SetConfig+0x68>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a11      	ldr	r2, [pc, #68]	@ (8008288 <TIM_OC4_SetConfig+0xa8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d109      	bne.n	800825c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800824e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	019b      	lsls	r3, r3, #6
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40010000 	.word	0x40010000
 8008288:	40010400 	.word	0x40010400

0800828c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f023 0201 	bic.w	r2, r3, #1
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a28      	ldr	r2, [pc, #160]	@ (8008358 <TIM_TI1_SetConfig+0xcc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d01b      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c0:	d017      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a25      	ldr	r2, [pc, #148]	@ (800835c <TIM_TI1_SetConfig+0xd0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d013      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a24      	ldr	r2, [pc, #144]	@ (8008360 <TIM_TI1_SetConfig+0xd4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00f      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4a23      	ldr	r2, [pc, #140]	@ (8008364 <TIM_TI1_SetConfig+0xd8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00b      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4a22      	ldr	r2, [pc, #136]	@ (8008368 <TIM_TI1_SetConfig+0xdc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d007      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4a21      	ldr	r2, [pc, #132]	@ (800836c <TIM_TI1_SetConfig+0xe0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d003      	beq.n	80082f2 <TIM_TI1_SetConfig+0x66>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4a20      	ldr	r2, [pc, #128]	@ (8008370 <TIM_TI1_SetConfig+0xe4>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d101      	bne.n	80082f6 <TIM_TI1_SetConfig+0x6a>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <TIM_TI1_SetConfig+0x6c>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f023 0303 	bic.w	r3, r3, #3
 8008302:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4313      	orrs	r3, r2
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e003      	b.n	8008316 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800831c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	011b      	lsls	r3, r3, #4
 8008322:	b2db      	uxtb	r3, r3
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f023 030a 	bic.w	r3, r3, #10
 8008330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f003 030a 	and.w	r3, r3, #10
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40010000 	.word	0x40010000
 800835c:	40000400 	.word	0x40000400
 8008360:	40000800 	.word	0x40000800
 8008364:	40000c00 	.word	0x40000c00
 8008368:	40010400 	.word	0x40010400
 800836c:	40014000 	.word	0x40014000
 8008370:	40001800 	.word	0x40001800

08008374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f023 0201 	bic.w	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800839e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f023 030a 	bic.w	r3, r3, #10
 80083b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	f023 0210 	bic.w	r2, r3, #16
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	031b      	lsls	r3, r3, #12
 8008416:	b29b      	uxth	r3, r3
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008424:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	621a      	str	r2, [r3, #32]
}
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f023 0210 	bic.w	r2, r3, #16
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	031b      	lsls	r3, r3, #12
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008488:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	4313      	orrs	r3, r2
 8008492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	621a      	str	r2, [r3, #32]
}
 80084a0:	bf00      	nop
 80084a2:	371c      	adds	r7, #28
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80084fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	621a      	str	r2, [r3, #32]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008550:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008562:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	031b      	lsls	r3, r3, #12
 8008568:	b29b      	uxth	r3, r3
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008576:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	031b      	lsls	r3, r3, #12
 800857c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f043 0307 	orr.w	r3, r3, #7
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	021a      	lsls	r2, r3, #8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	609a      	str	r2, [r3, #8]
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2201      	movs	r2, #1
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1a      	ldr	r2, [r3, #32]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	43db      	mvns	r3, r3
 8008636:	401a      	ands	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6a1a      	ldr	r2, [r3, #32]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f003 031f 	and.w	r3, r3, #31
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	fa01 f303 	lsl.w	r3, r1, r3
 800864c:	431a      	orrs	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
}
 8008652:	bf00      	nop
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008674:	2302      	movs	r3, #2
 8008676:	e05a      	b.n	800872e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a21      	ldr	r2, [pc, #132]	@ (800873c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d022      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c4:	d01d      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d018      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d013      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1a      	ldr	r2, [pc, #104]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00e      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a18      	ldr	r2, [pc, #96]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d009      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a17      	ldr	r2, [pc, #92]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d004      	beq.n	8008702 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d10c      	bne.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4313      	orrs	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40010000 	.word	0x40010000
 8008740:	40000400 	.word	0x40000400
 8008744:	40000800 	.word	0x40000800
 8008748:	40000c00 	.word	0x40000c00
 800874c:	40010400 	.word	0x40010400
 8008750:	40014000 	.word	0x40014000
 8008754:	40001800 	.word	0x40001800

08008758 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e042      	b.n	8008818 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7fa fed0 	bl	800354c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2224      	movs	r2, #36	@ 0x24
 80087b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f973 	bl	8008ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695a      	ldr	r2, [r3, #20]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	@ 0x28
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	4613      	mov	r3, r2
 800882e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b20      	cmp	r3, #32
 800883e:	d175      	bne.n	800892c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <HAL_UART_Transmit+0x2c>
 8008846:	88fb      	ldrh	r3, [r7, #6]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e06e      	b.n	800892e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2221      	movs	r2, #33	@ 0x21
 800885a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800885e:	f7fa fffb 	bl	8003858 <HAL_GetTick>
 8008862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	88fa      	ldrh	r2, [r7, #6]
 8008868:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	88fa      	ldrh	r2, [r7, #6]
 800886e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008878:	d108      	bne.n	800888c <HAL_UART_Transmit+0x6c>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d104      	bne.n	800888c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	e003      	b.n	8008894 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008890:	2300      	movs	r3, #0
 8008892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008894:	e02e      	b.n	80088f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2200      	movs	r2, #0
 800889e:	2180      	movs	r1, #128	@ 0x80
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f848 	bl	8008936 <UART_WaitOnFlagUntilTimeout>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e03a      	b.n	800892e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10b      	bne.n	80088d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	3302      	adds	r3, #2
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	e007      	b.n	80088e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	3301      	adds	r3, #1
 80088e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1cb      	bne.n	8008896 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2200      	movs	r2, #0
 8008906:	2140      	movs	r1, #64	@ 0x40
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f814 	bl	8008936 <UART_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e006      	b.n	800892e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	e000      	b.n	800892e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800892c:	2302      	movs	r3, #2
  }
}
 800892e:	4618      	mov	r0, r3
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	4613      	mov	r3, r2
 8008944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008946:	e03b      	b.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800894e:	d037      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008950:	f7fa ff82 	bl	8003858 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	6a3a      	ldr	r2, [r7, #32]
 800895c:	429a      	cmp	r2, r3
 800895e:	d302      	bcc.n	8008966 <UART_WaitOnFlagUntilTimeout+0x30>
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e03a      	b.n	80089e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	d023      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2b80      	cmp	r3, #128	@ 0x80
 800897c:	d020      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b40      	cmp	r3, #64	@ 0x40
 8008982:	d01d      	beq.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b08      	cmp	r3, #8
 8008990:	d116      	bne.n	80089c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 f81d 	bl	80089e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2208      	movs	r2, #8
 80089b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e00f      	b.n	80089e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	4013      	ands	r3, r2
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	bf0c      	ite	eq
 80089d0:	2301      	moveq	r3, #1
 80089d2:	2300      	movne	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	461a      	mov	r2, r3
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d0b4      	beq.n	8008948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b095      	sub	sp, #84	@ 0x54
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fa:	e853 3f00 	ldrex	r3, [r3]
 80089fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a10:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e5      	bne.n	80089f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3314      	adds	r3, #20
 8008a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f023 0301 	bic.w	r3, r3, #1
 8008a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3314      	adds	r3, #20
 8008a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e5      	bne.n	8008a24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d119      	bne.n	8008a94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f023 0310 	bic.w	r3, r3, #16
 8008a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a80:	61ba      	str	r2, [r7, #24]
 8008a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6979      	ldr	r1, [r7, #20]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e5      	bne.n	8008a60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008aa2:	bf00      	nop
 8008aa4:	3754      	adds	r7, #84	@ 0x54
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b0c0      	sub	sp, #256	@ 0x100
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008acc:	68d9      	ldr	r1, [r3, #12]
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	ea40 0301 	orr.w	r3, r0, r1
 8008ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b08:	f021 010c 	bic.w	r1, r1, #12
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b16:	430b      	orrs	r3, r1
 8008b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2a:	6999      	ldr	r1, [r3, #24]
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	ea40 0301 	orr.w	r3, r0, r1
 8008b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8008d7c <UART_SetConfig+0x2cc>)
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d005      	beq.n	8008b50 <UART_SetConfig+0xa0>
 8008b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8008d80 <UART_SetConfig+0x2d0>)
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d104      	bne.n	8008b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b50:	f7fc fe5a 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8008b54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008b58:	e003      	b.n	8008b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b5a:	f7fc fe41 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8008b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b6c:	f040 810c 	bne.w	8008d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008b82:	4622      	mov	r2, r4
 8008b84:	462b      	mov	r3, r5
 8008b86:	1891      	adds	r1, r2, r2
 8008b88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008b8a:	415b      	adcs	r3, r3
 8008b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008b92:	4621      	mov	r1, r4
 8008b94:	eb12 0801 	adds.w	r8, r2, r1
 8008b98:	4629      	mov	r1, r5
 8008b9a:	eb43 0901 	adc.w	r9, r3, r1
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bb2:	4690      	mov	r8, r2
 8008bb4:	4699      	mov	r9, r3
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	eb18 0303 	adds.w	r3, r8, r3
 8008bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	eb49 0303 	adc.w	r3, r9, r3
 8008bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008bde:	460b      	mov	r3, r1
 8008be0:	18db      	adds	r3, r3, r3
 8008be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008be4:	4613      	mov	r3, r2
 8008be6:	eb42 0303 	adc.w	r3, r2, r3
 8008bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008bf4:	f7f7 ff7a 	bl	8000aec <__aeabi_uldivmod>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4b61      	ldr	r3, [pc, #388]	@ (8008d84 <UART_SetConfig+0x2d4>)
 8008bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8008c02:	095b      	lsrs	r3, r3, #5
 8008c04:	011c      	lsls	r4, r3, #4
 8008c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c18:	4642      	mov	r2, r8
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	1891      	adds	r1, r2, r2
 8008c1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c20:	415b      	adcs	r3, r3
 8008c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c28:	4641      	mov	r1, r8
 8008c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c2e:	4649      	mov	r1, r9
 8008c30:	eb43 0b01 	adc.w	fp, r3, r1
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c48:	4692      	mov	sl, r2
 8008c4a:	469b      	mov	fp, r3
 8008c4c:	4643      	mov	r3, r8
 8008c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8008c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c56:	464b      	mov	r3, r9
 8008c58:	eb4b 0303 	adc.w	r3, fp, r3
 8008c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c74:	460b      	mov	r3, r1
 8008c76:	18db      	adds	r3, r3, r3
 8008c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	eb42 0303 	adc.w	r3, r2, r3
 8008c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008c8a:	f7f7 ff2f 	bl	8000aec <__aeabi_uldivmod>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	4b3b      	ldr	r3, [pc, #236]	@ (8008d84 <UART_SetConfig+0x2d4>)
 8008c96:	fba3 2301 	umull	r2, r3, r3, r1
 8008c9a:	095b      	lsrs	r3, r3, #5
 8008c9c:	2264      	movs	r2, #100	@ 0x64
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	1acb      	subs	r3, r1, r3
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008caa:	4b36      	ldr	r3, [pc, #216]	@ (8008d84 <UART_SetConfig+0x2d4>)
 8008cac:	fba3 2302 	umull	r2, r3, r3, r2
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008cb8:	441c      	add	r4, r3
 8008cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ccc:	4642      	mov	r2, r8
 8008cce:	464b      	mov	r3, r9
 8008cd0:	1891      	adds	r1, r2, r2
 8008cd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008cd4:	415b      	adcs	r3, r3
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008cdc:	4641      	mov	r1, r8
 8008cde:	1851      	adds	r1, r2, r1
 8008ce0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	414b      	adcs	r3, r1
 8008ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	f04f 0300 	mov.w	r3, #0
 8008cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	00cb      	lsls	r3, r1, #3
 8008cf8:	4651      	mov	r1, sl
 8008cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cfe:	4651      	mov	r1, sl
 8008d00:	00ca      	lsls	r2, r1, #3
 8008d02:	4610      	mov	r0, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	4642      	mov	r2, r8
 8008d0a:	189b      	adds	r3, r3, r2
 8008d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d10:	464b      	mov	r3, r9
 8008d12:	460a      	mov	r2, r1
 8008d14:	eb42 0303 	adc.w	r3, r2, r3
 8008d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d30:	460b      	mov	r3, r1
 8008d32:	18db      	adds	r3, r3, r3
 8008d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d36:	4613      	mov	r3, r2
 8008d38:	eb42 0303 	adc.w	r3, r2, r3
 8008d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d46:	f7f7 fed1 	bl	8000aec <__aeabi_uldivmod>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <UART_SetConfig+0x2d4>)
 8008d50:	fba3 1302 	umull	r1, r3, r3, r2
 8008d54:	095b      	lsrs	r3, r3, #5
 8008d56:	2164      	movs	r1, #100	@ 0x64
 8008d58:	fb01 f303 	mul.w	r3, r1, r3
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	3332      	adds	r3, #50	@ 0x32
 8008d62:	4a08      	ldr	r2, [pc, #32]	@ (8008d84 <UART_SetConfig+0x2d4>)
 8008d64:	fba2 2303 	umull	r2, r3, r2, r3
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	f003 0207 	and.w	r2, r3, #7
 8008d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4422      	add	r2, r4
 8008d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d78:	e106      	b.n	8008f88 <UART_SetConfig+0x4d8>
 8008d7a:	bf00      	nop
 8008d7c:	40011000 	.word	0x40011000
 8008d80:	40011400 	.word	0x40011400
 8008d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008d92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	1891      	adds	r1, r2, r2
 8008da0:	6239      	str	r1, [r7, #32]
 8008da2:	415b      	adcs	r3, r3
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008daa:	4641      	mov	r1, r8
 8008dac:	1854      	adds	r4, r2, r1
 8008dae:	4649      	mov	r1, r9
 8008db0:	eb43 0501 	adc.w	r5, r3, r1
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	00eb      	lsls	r3, r5, #3
 8008dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dc2:	00e2      	lsls	r2, r4, #3
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	461d      	mov	r5, r3
 8008dc8:	4643      	mov	r3, r8
 8008dca:	18e3      	adds	r3, r4, r3
 8008dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	eb45 0303 	adc.w	r3, r5, r3
 8008dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dea:	f04f 0200 	mov.w	r2, #0
 8008dee:	f04f 0300 	mov.w	r3, #0
 8008df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008df6:	4629      	mov	r1, r5
 8008df8:	008b      	lsls	r3, r1, #2
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e00:	4621      	mov	r1, r4
 8008e02:	008a      	lsls	r2, r1, #2
 8008e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e08:	f7f7 fe70 	bl	8000aec <__aeabi_uldivmod>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4b60      	ldr	r3, [pc, #384]	@ (8008f94 <UART_SetConfig+0x4e4>)
 8008e12:	fba3 2302 	umull	r2, r3, r3, r2
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	011c      	lsls	r4, r3, #4
 8008e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	1891      	adds	r1, r2, r2
 8008e32:	61b9      	str	r1, [r7, #24]
 8008e34:	415b      	adcs	r3, r3
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	1851      	adds	r1, r2, r1
 8008e40:	6139      	str	r1, [r7, #16]
 8008e42:	4649      	mov	r1, r9
 8008e44:	414b      	adcs	r3, r1
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	f04f 0200 	mov.w	r2, #0
 8008e4c:	f04f 0300 	mov.w	r3, #0
 8008e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e54:	4659      	mov	r1, fp
 8008e56:	00cb      	lsls	r3, r1, #3
 8008e58:	4651      	mov	r1, sl
 8008e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e5e:	4651      	mov	r1, sl
 8008e60:	00ca      	lsls	r2, r1, #3
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	4603      	mov	r3, r0
 8008e68:	4642      	mov	r2, r8
 8008e6a:	189b      	adds	r3, r3, r2
 8008e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e70:	464b      	mov	r3, r9
 8008e72:	460a      	mov	r2, r1
 8008e74:	eb42 0303 	adc.w	r3, r2, r3
 8008e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008e94:	4649      	mov	r1, r9
 8008e96:	008b      	lsls	r3, r1, #2
 8008e98:	4641      	mov	r1, r8
 8008e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	008a      	lsls	r2, r1, #2
 8008ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008ea6:	f7f7 fe21 	bl	8000aec <__aeabi_uldivmod>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4611      	mov	r1, r2
 8008eb0:	4b38      	ldr	r3, [pc, #224]	@ (8008f94 <UART_SetConfig+0x4e4>)
 8008eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	2264      	movs	r2, #100	@ 0x64
 8008eba:	fb02 f303 	mul.w	r3, r2, r3
 8008ebe:	1acb      	subs	r3, r1, r3
 8008ec0:	011b      	lsls	r3, r3, #4
 8008ec2:	3332      	adds	r3, #50	@ 0x32
 8008ec4:	4a33      	ldr	r2, [pc, #204]	@ (8008f94 <UART_SetConfig+0x4e4>)
 8008ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eca:	095b      	lsrs	r3, r3, #5
 8008ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ed0:	441c      	add	r4, r3
 8008ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008eda:	677a      	str	r2, [r7, #116]	@ 0x74
 8008edc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	1891      	adds	r1, r2, r2
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	415b      	adcs	r3, r3
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	1851      	adds	r1, r2, r1
 8008ef4:	6039      	str	r1, [r7, #0]
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	414b      	adcs	r3, r1
 8008efa:	607b      	str	r3, [r7, #4]
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f08:	4659      	mov	r1, fp
 8008f0a:	00cb      	lsls	r3, r1, #3
 8008f0c:	4651      	mov	r1, sl
 8008f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f12:	4651      	mov	r1, sl
 8008f14:	00ca      	lsls	r2, r1, #3
 8008f16:	4610      	mov	r0, r2
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	189b      	adds	r3, r3, r2
 8008f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f22:	464b      	mov	r3, r9
 8008f24:	460a      	mov	r2, r1
 8008f26:	eb42 0303 	adc.w	r3, r2, r3
 8008f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f36:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	f04f 0300 	mov.w	r3, #0
 8008f40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f44:	4649      	mov	r1, r9
 8008f46:	008b      	lsls	r3, r1, #2
 8008f48:	4641      	mov	r1, r8
 8008f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f4e:	4641      	mov	r1, r8
 8008f50:	008a      	lsls	r2, r1, #2
 8008f52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008f56:	f7f7 fdc9 	bl	8000aec <__aeabi_uldivmod>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <UART_SetConfig+0x4e4>)
 8008f60:	fba3 1302 	umull	r1, r3, r3, r2
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	2164      	movs	r1, #100	@ 0x64
 8008f68:	fb01 f303 	mul.w	r3, r1, r3
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	3332      	adds	r3, #50	@ 0x32
 8008f72:	4a08      	ldr	r2, [pc, #32]	@ (8008f94 <UART_SetConfig+0x4e4>)
 8008f74:	fba2 2303 	umull	r2, r3, r2, r3
 8008f78:	095b      	lsrs	r3, r3, #5
 8008f7a:	f003 020f 	and.w	r2, r3, #15
 8008f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4422      	add	r2, r4
 8008f86:	609a      	str	r2, [r3, #8]
}
 8008f88:	bf00      	nop
 8008f8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f94:	51eb851f 	.word	0x51eb851f

08008f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f98:	b084      	sub	sp, #16
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	f107 001c 	add.w	r0, r7, #28
 8008fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008faa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d123      	bne.n	8008ffa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d105      	bne.n	8008fee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fae2 	bl	800a5b8 <USB_CoreReset>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
 8008ff8:	e01b      	b.n	8009032 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fad6 	bl	800a5b8 <USB_CoreReset>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009010:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009014:	2b00      	cmp	r3, #0
 8009016:	d106      	bne.n	8009026 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	639a      	str	r2, [r3, #56]	@ 0x38
 8009024:	e005      	b.n	8009032 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009032:	7fbb      	ldrb	r3, [r7, #30]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d10b      	bne.n	8009050 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f043 0206 	orr.w	r2, r3, #6
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f043 0220 	orr.w	r2, r3, #32
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800905c:	b004      	add	sp, #16
 800905e:	4770      	bx	lr

08009060 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4613      	mov	r3, r2
 800906c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	2b02      	cmp	r3, #2
 8009072:	d165      	bne.n	8009140 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4a41      	ldr	r2, [pc, #260]	@ (800917c <USB_SetTurnaroundTime+0x11c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d906      	bls.n	800908a <USB_SetTurnaroundTime+0x2a>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4a40      	ldr	r2, [pc, #256]	@ (8009180 <USB_SetTurnaroundTime+0x120>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d202      	bcs.n	800908a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009084:	230f      	movs	r3, #15
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	e062      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4a3c      	ldr	r2, [pc, #240]	@ (8009180 <USB_SetTurnaroundTime+0x120>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d306      	bcc.n	80090a0 <USB_SetTurnaroundTime+0x40>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	4a3b      	ldr	r2, [pc, #236]	@ (8009184 <USB_SetTurnaroundTime+0x124>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d202      	bcs.n	80090a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800909a:	230e      	movs	r3, #14
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e057      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4a38      	ldr	r2, [pc, #224]	@ (8009184 <USB_SetTurnaroundTime+0x124>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d306      	bcc.n	80090b6 <USB_SetTurnaroundTime+0x56>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4a37      	ldr	r2, [pc, #220]	@ (8009188 <USB_SetTurnaroundTime+0x128>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d202      	bcs.n	80090b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090b0:	230d      	movs	r3, #13
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	e04c      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4a33      	ldr	r2, [pc, #204]	@ (8009188 <USB_SetTurnaroundTime+0x128>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d306      	bcc.n	80090cc <USB_SetTurnaroundTime+0x6c>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	4a32      	ldr	r2, [pc, #200]	@ (800918c <USB_SetTurnaroundTime+0x12c>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d802      	bhi.n	80090cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090c6:	230c      	movs	r3, #12
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	e041      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4a2f      	ldr	r2, [pc, #188]	@ (800918c <USB_SetTurnaroundTime+0x12c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d906      	bls.n	80090e2 <USB_SetTurnaroundTime+0x82>
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009190 <USB_SetTurnaroundTime+0x130>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d802      	bhi.n	80090e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090dc:	230b      	movs	r3, #11
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e036      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009190 <USB_SetTurnaroundTime+0x130>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d906      	bls.n	80090f8 <USB_SetTurnaroundTime+0x98>
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4a29      	ldr	r2, [pc, #164]	@ (8009194 <USB_SetTurnaroundTime+0x134>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d802      	bhi.n	80090f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090f2:	230a      	movs	r3, #10
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e02b      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a26      	ldr	r2, [pc, #152]	@ (8009194 <USB_SetTurnaroundTime+0x134>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d906      	bls.n	800910e <USB_SetTurnaroundTime+0xae>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4a25      	ldr	r2, [pc, #148]	@ (8009198 <USB_SetTurnaroundTime+0x138>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d202      	bcs.n	800910e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009108:	2309      	movs	r3, #9
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e020      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a21      	ldr	r2, [pc, #132]	@ (8009198 <USB_SetTurnaroundTime+0x138>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d306      	bcc.n	8009124 <USB_SetTurnaroundTime+0xc4>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	4a20      	ldr	r2, [pc, #128]	@ (800919c <USB_SetTurnaroundTime+0x13c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d802      	bhi.n	8009124 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800911e:	2308      	movs	r3, #8
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e015      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4a1d      	ldr	r2, [pc, #116]	@ (800919c <USB_SetTurnaroundTime+0x13c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d906      	bls.n	800913a <USB_SetTurnaroundTime+0xda>
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4a1c      	ldr	r2, [pc, #112]	@ (80091a0 <USB_SetTurnaroundTime+0x140>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d202      	bcs.n	800913a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009134:	2307      	movs	r3, #7
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	e00a      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800913a:	2306      	movs	r3, #6
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e007      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009146:	2309      	movs	r3, #9
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	e001      	b.n	8009150 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800914c:	2309      	movs	r3, #9
 800914e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	029b      	lsls	r3, r3, #10
 8009164:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009168:	431a      	orrs	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	00d8acbf 	.word	0x00d8acbf
 8009180:	00e4e1c0 	.word	0x00e4e1c0
 8009184:	00f42400 	.word	0x00f42400
 8009188:	01067380 	.word	0x01067380
 800918c:	011a499f 	.word	0x011a499f
 8009190:	01312cff 	.word	0x01312cff
 8009194:	014ca43f 	.word	0x014ca43f
 8009198:	016e3600 	.word	0x016e3600
 800919c:	01a6ab1f 	.word	0x01a6ab1f
 80091a0:	01e84800 	.word	0x01e84800

080091a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f043 0201 	orr.w	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f023 0201 	bic.w	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d115      	bne.n	8009236 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009216:	200a      	movs	r0, #10
 8009218:	f7fa fb2a 	bl	8003870 <HAL_Delay>
      ms += 10U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	330a      	adds	r3, #10
 8009220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 f939 	bl	800a49a <USB_GetMode>
 8009228:	4603      	mov	r3, r0
 800922a:	2b01      	cmp	r3, #1
 800922c:	d01e      	beq.n	800926c <USB_SetCurrentMode+0x84>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2bc7      	cmp	r3, #199	@ 0xc7
 8009232:	d9f0      	bls.n	8009216 <USB_SetCurrentMode+0x2e>
 8009234:	e01a      	b.n	800926c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d115      	bne.n	8009268 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009248:	200a      	movs	r0, #10
 800924a:	f7fa fb11 	bl	8003870 <HAL_Delay>
      ms += 10U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	330a      	adds	r3, #10
 8009252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f920 	bl	800a49a <USB_GetMode>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <USB_SetCurrentMode+0x84>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2bc7      	cmp	r3, #199	@ 0xc7
 8009264:	d9f0      	bls.n	8009248 <USB_SetCurrentMode+0x60>
 8009266:	e001      	b.n	800926c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e005      	b.n	8009278 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009270:	d101      	bne.n	8009276 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009280:	b084      	sub	sp, #16
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800928e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	e009      	b.n	80092b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3340      	adds	r3, #64	@ 0x40
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3301      	adds	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b0e      	cmp	r3, #14
 80092b8:	d9f2      	bls.n	80092a0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d11c      	bne.n	80092fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092d0:	f043 0302 	orr.w	r3, r3, #2
 80092d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e005      	b.n	8009308 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009300:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800930e:	461a      	mov	r2, r3
 8009310:	2300      	movs	r3, #0
 8009312:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009314:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009318:	2b01      	cmp	r3, #1
 800931a:	d10d      	bne.n	8009338 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800931c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009324:	2100      	movs	r1, #0
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f968 	bl	80095fc <USB_SetDevSpeed>
 800932c:	e008      	b.n	8009340 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800932e:	2101      	movs	r1, #1
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f963 	bl	80095fc <USB_SetDevSpeed>
 8009336:	e003      	b.n	8009340 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009338:	2103      	movs	r1, #3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f95e 	bl	80095fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009340:	2110      	movs	r1, #16
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8fa 	bl	800953c <USB_FlushTxFifo>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f924 	bl	80095a0 <USB_FlushRxFifo>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009368:	461a      	mov	r2, r3
 800936a:	2300      	movs	r3, #0
 800936c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009374:	461a      	mov	r2, r3
 8009376:	2300      	movs	r3, #0
 8009378:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009380:	461a      	mov	r2, r3
 8009382:	2300      	movs	r3, #0
 8009384:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009386:	2300      	movs	r3, #0
 8009388:	613b      	str	r3, [r7, #16]
 800938a:	e043      	b.n	8009414 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800939e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a2:	d118      	bne.n	80093d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b6:	461a      	mov	r2, r3
 80093b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	e013      	b.n	80093e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093cc:	461a      	mov	r2, r3
 80093ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	e008      	b.n	80093e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e2:	461a      	mov	r2, r3
 80093e4:	2300      	movs	r3, #0
 80093e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f4:	461a      	mov	r2, r3
 80093f6:	2300      	movs	r3, #0
 80093f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009406:	461a      	mov	r2, r3
 8009408:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800940c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	3301      	adds	r3, #1
 8009412:	613b      	str	r3, [r7, #16]
 8009414:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009418:	461a      	mov	r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4293      	cmp	r3, r2
 800941e:	d3b5      	bcc.n	800938c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009420:	2300      	movs	r3, #0
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	e043      	b.n	80094ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800943c:	d118      	bne.n	8009470 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009450:	461a      	mov	r2, r3
 8009452:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	e013      	b.n	8009482 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009466:	461a      	mov	r2, r3
 8009468:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	e008      	b.n	8009482 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947c:	461a      	mov	r2, r3
 800947e:	2300      	movs	r3, #0
 8009480:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948e:	461a      	mov	r2, r3
 8009490:	2300      	movs	r3, #0
 8009492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a0:	461a      	mov	r2, r3
 80094a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	3301      	adds	r3, #1
 80094ac:	613b      	str	r3, [r7, #16]
 80094ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094b2:	461a      	mov	r2, r3
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d3b5      	bcc.n	8009426 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80094da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d105      	bne.n	80094f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f043 0210 	orr.w	r2, r3, #16
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699a      	ldr	r2, [r3, #24]
 80094f4:	4b10      	ldr	r3, [pc, #64]	@ (8009538 <USB_DevInit+0x2b8>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f043 0208 	orr.w	r2, r3, #8
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009510:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009514:	2b01      	cmp	r3, #1
 8009516:	d107      	bne.n	8009528 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009520:	f043 0304 	orr.w	r3, r3, #4
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009528:	7dfb      	ldrb	r3, [r7, #23]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009534:	b004      	add	sp, #16
 8009536:	4770      	bx	lr
 8009538:	803c3800 	.word	0x803c3800

0800953c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3301      	adds	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009556:	d901      	bls.n	800955c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e01b      	b.n	8009594 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	daf2      	bge.n	800954a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	019b      	lsls	r3, r3, #6
 800956c:	f043 0220 	orr.w	r2, r3, #32
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3301      	adds	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009580:	d901      	bls.n	8009586 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e006      	b.n	8009594 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b20      	cmp	r3, #32
 8009590:	d0f0      	beq.n	8009574 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3301      	adds	r3, #1
 80095b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095b8:	d901      	bls.n	80095be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e018      	b.n	80095f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	daf2      	bge.n	80095ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2210      	movs	r2, #16
 80095ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095dc:	d901      	bls.n	80095e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e006      	b.n	80095f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	2b10      	cmp	r3, #16
 80095ec:	d0f0      	beq.n	80095d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800961c:	4313      	orrs	r3, r2
 800961e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800962e:	b480      	push	{r7}
 8009630:	b087      	sub	sp, #28
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f003 0306 	and.w	r3, r3, #6
 8009646:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d102      	bne.n	8009654 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]
 8009652:	e00a      	b.n	800966a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d002      	beq.n	8009660 <USB_GetDevSpeed+0x32>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2b06      	cmp	r3, #6
 800965e:	d102      	bne.n	8009666 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009660:	2302      	movs	r3, #2
 8009662:	75fb      	strb	r3, [r7, #23]
 8009664:	e001      	b.n	800966a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009666:	230f      	movs	r3, #15
 8009668:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
}
 800966c:	4618      	mov	r0, r3
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d13a      	bne.n	800970a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800969a:	69da      	ldr	r2, [r3, #28]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	2101      	movs	r1, #1
 80096a6:	fa01 f303 	lsl.w	r3, r1, r3
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	68f9      	ldr	r1, [r7, #12]
 80096ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096b2:	4313      	orrs	r3, r2
 80096b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d155      	bne.n	8009778 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	791b      	ldrb	r3, [r3, #4]
 80096e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096f0:	4313      	orrs	r3, r2
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	e036      	b.n	8009778 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009710:	69da      	ldr	r2, [r3, #28]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	2101      	movs	r1, #1
 800971c:	fa01 f303 	lsl.w	r3, r1, r3
 8009720:	041b      	lsls	r3, r3, #16
 8009722:	68f9      	ldr	r1, [r7, #12]
 8009724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009728:	4313      	orrs	r3, r2
 800972a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d11a      	bne.n	8009778 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	791b      	ldrb	r3, [r3, #4]
 800975c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800975e:	430b      	orrs	r3, r1
 8009760:	4313      	orrs	r3, r2
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	440a      	add	r2, r1
 800976a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800976e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009776:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
	...

08009788 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d161      	bne.n	8009868 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	015a      	lsls	r2, r3, #5
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4413      	add	r3, r2
 80097ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ba:	d11f      	bne.n	80097fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	f003 030f 	and.w	r3, r3, #15
 800980c:	2101      	movs	r1, #1
 800980e:	fa01 f303 	lsl.w	r3, r1, r3
 8009812:	b29b      	uxth	r3, r3
 8009814:	43db      	mvns	r3, r3
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800981c:	4013      	ands	r3, r2
 800981e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009826:	69da      	ldr	r2, [r3, #28]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	2101      	movs	r1, #1
 8009832:	fa01 f303 	lsl.w	r3, r1, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	43db      	mvns	r3, r3
 800983a:	68f9      	ldr	r1, [r7, #12]
 800983c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009840:	4013      	ands	r3, r2
 8009842:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	0159      	lsls	r1, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	440b      	add	r3, r1
 800985a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985e:	4619      	mov	r1, r3
 8009860:	4b35      	ldr	r3, [pc, #212]	@ (8009938 <USB_DeactivateEndpoint+0x1b0>)
 8009862:	4013      	ands	r3, r2
 8009864:	600b      	str	r3, [r1, #0]
 8009866:	e060      	b.n	800992a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800987a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800987e:	d11f      	bne.n	80098c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800989a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800989e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 030f 	and.w	r3, r3, #15
 80098d0:	2101      	movs	r1, #1
 80098d2:	fa01 f303 	lsl.w	r3, r1, r3
 80098d6:	041b      	lsls	r3, r3, #16
 80098d8:	43db      	mvns	r3, r3
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098e0:	4013      	ands	r3, r2
 80098e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	2101      	movs	r1, #1
 80098f6:	fa01 f303 	lsl.w	r3, r1, r3
 80098fa:	041b      	lsls	r3, r3, #16
 80098fc:	43db      	mvns	r3, r3
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009904:	4013      	ands	r3, r2
 8009906:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	0159      	lsls	r1, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	440b      	add	r3, r1
 800991e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009922:	4619      	mov	r1, r3
 8009924:	4b05      	ldr	r3, [pc, #20]	@ (800993c <USB_DeactivateEndpoint+0x1b4>)
 8009926:	4013      	ands	r3, r2
 8009928:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	ec337800 	.word	0xec337800
 800993c:	eff37800 	.word	0xeff37800

08009940 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08a      	sub	sp, #40	@ 0x28
 8009944:	af02      	add	r7, sp, #8
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	4613      	mov	r3, r2
 800994c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b01      	cmp	r3, #1
 800995e:	f040 817f 	bne.w	8009c60 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d132      	bne.n	80099d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	0151      	lsls	r1, r2, #5
 800997c:	69fa      	ldr	r2, [r7, #28]
 800997e:	440a      	add	r2, r1
 8009980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009984:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009988:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800998c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	0151      	lsls	r1, r2, #5
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	440a      	add	r2, r1
 80099a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c8:	0cdb      	lsrs	r3, r3, #19
 80099ca:	04db      	lsls	r3, r3, #19
 80099cc:	6113      	str	r3, [r2, #16]
 80099ce:	e097      	b.n	8009b00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099ea:	0cdb      	lsrs	r3, r3, #19
 80099ec:	04db      	lsls	r3, r3, #19
 80099ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a0a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009a0e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009a12:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d11a      	bne.n	8009a50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	691a      	ldr	r2, [r3, #16]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d903      	bls.n	8009a2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	0151      	lsls	r1, r2, #5
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	440a      	add	r2, r1
 8009a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a4c:	6113      	str	r3, [r2, #16]
 8009a4e:	e044      	b.n	8009ada <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	4413      	add	r3, r2
 8009a5a:	1e5a      	subs	r2, r3, #1
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a72:	691a      	ldr	r2, [r3, #16]
 8009a74:	8afb      	ldrh	r3, [r7, #22]
 8009a76:	04d9      	lsls	r1, r3, #19
 8009a78:	4ba4      	ldr	r3, [pc, #656]	@ (8009d0c <USB_EPStartXfer+0x3cc>)
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	69b9      	ldr	r1, [r7, #24]
 8009a7e:	0148      	lsls	r0, r1, #5
 8009a80:	69f9      	ldr	r1, [r7, #28]
 8009a82:	4401      	add	r1, r0
 8009a84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	791b      	ldrb	r3, [r3, #4]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d122      	bne.n	8009ada <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	69ba      	ldr	r2, [r7, #24]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009ab2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac0:	691a      	ldr	r2, [r3, #16]
 8009ac2:	8afb      	ldrh	r3, [r7, #22]
 8009ac4:	075b      	lsls	r3, r3, #29
 8009ac6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009aca:	69b9      	ldr	r1, [r7, #24]
 8009acc:	0148      	lsls	r0, r1, #5
 8009ace:	69f9      	ldr	r1, [r7, #28]
 8009ad0:	4401      	add	r1, r0
 8009ad2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae6:	691a      	ldr	r2, [r3, #16]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009af0:	69b9      	ldr	r1, [r7, #24]
 8009af2:	0148      	lsls	r0, r1, #5
 8009af4:	69f9      	ldr	r1, [r7, #28]
 8009af6:	4401      	add	r1, r0
 8009af8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009afc:	4313      	orrs	r3, r2
 8009afe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d14b      	bne.n	8009b9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d009      	beq.n	8009b22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	791b      	ldrb	r3, [r3, #4]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d128      	bne.n	8009b7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d110      	bne.n	8009b5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	e00f      	b.n	8009b7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	0151      	lsls	r1, r2, #5
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	440a      	add	r2, r1
 8009b72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	0151      	lsls	r1, r2, #5
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	440a      	add	r2, r1
 8009b92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	e166      	b.n	8009e6c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	0151      	lsls	r1, r2, #5
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	440a      	add	r2, r1
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bb8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bbc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	791b      	ldrb	r3, [r3, #4]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d015      	beq.n	8009bf2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 814e 	beq.w	8009e6c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 030f 	and.w	r3, r3, #15
 8009be0:	2101      	movs	r1, #1
 8009be2:	fa01 f303 	lsl.w	r3, r1, r3
 8009be6:	69f9      	ldr	r1, [r7, #28]
 8009be8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bec:	4313      	orrs	r3, r2
 8009bee:	634b      	str	r3, [r1, #52]	@ 0x34
 8009bf0:	e13c      	b.n	8009e6c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d110      	bne.n	8009c24 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	e00f      	b.n	8009c44 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	015a      	lsls	r2, r3, #5
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	0151      	lsls	r1, r2, #5
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	440a      	add	r2, r1
 8009c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c42:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	68d9      	ldr	r1, [r3, #12]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	b298      	uxth	r0, r3
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4603      	mov	r3, r0
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f9b9 	bl	8009fd0 <USB_WritePacket>
 8009c5e:	e105      	b.n	8009e6c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	69fa      	ldr	r2, [r7, #28]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c7a:	0cdb      	lsrs	r3, r3, #19
 8009c7c:	04db      	lsls	r3, r3, #19
 8009c7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009c9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ca2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d132      	bne.n	8009d10 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	689a      	ldr	r2, [r3, #8]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	0148      	lsls	r0, r1, #5
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	4401      	add	r1, r0
 8009ce0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d06:	6113      	str	r3, [r2, #16]
 8009d08:	e062      	b.n	8009dd0 <USB_EPStartXfer+0x490>
 8009d0a:	bf00      	nop
 8009d0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d123      	bne.n	8009d60 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d24:	691a      	ldr	r2, [r3, #16]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d2e:	69b9      	ldr	r1, [r7, #24]
 8009d30:	0148      	lsls	r0, r1, #5
 8009d32:	69f9      	ldr	r1, [r7, #28]
 8009d34:	4401      	add	r1, r0
 8009d36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	0151      	lsls	r1, r2, #5
 8009d50:	69fa      	ldr	r2, [r7, #28]
 8009d52:	440a      	add	r2, r1
 8009d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d5c:	6113      	str	r3, [r2, #16]
 8009d5e:	e037      	b.n	8009dd0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	1e5a      	subs	r2, r3, #1
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d74:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	8afa      	ldrh	r2, [r7, #22]
 8009d7c:	fb03 f202 	mul.w	r2, r3, r2
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d90:	691a      	ldr	r2, [r3, #16]
 8009d92:	8afb      	ldrh	r3, [r7, #22]
 8009d94:	04d9      	lsls	r1, r3, #19
 8009d96:	4b38      	ldr	r3, [pc, #224]	@ (8009e78 <USB_EPStartXfer+0x538>)
 8009d98:	400b      	ands	r3, r1
 8009d9a:	69b9      	ldr	r1, [r7, #24]
 8009d9c:	0148      	lsls	r0, r1, #5
 8009d9e:	69f9      	ldr	r1, [r7, #28]
 8009da0:	4401      	add	r1, r0
 8009da2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009da6:	4313      	orrs	r3, r2
 8009da8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dc0:	69b9      	ldr	r1, [r7, #24]
 8009dc2:	0148      	lsls	r0, r1, #5
 8009dc4:	69f9      	ldr	r1, [r7, #28]
 8009dc6:	4401      	add	r1, r0
 8009dc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d10d      	bne.n	8009df2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d009      	beq.n	8009df2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	68d9      	ldr	r1, [r3, #12]
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dee:	460a      	mov	r2, r1
 8009df0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	791b      	ldrb	r3, [r3, #4]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d128      	bne.n	8009e4c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d110      	bne.n	8009e2c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	015a      	lsls	r2, r3, #5
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	0151      	lsls	r1, r2, #5
 8009e1c:	69fa      	ldr	r2, [r7, #28]
 8009e1e:	440a      	add	r2, r1
 8009e20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	e00f      	b.n	8009e4c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	1ff80000 	.word	0x1ff80000

08009e7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d14a      	bne.n	8009f30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eb2:	f040 8086 	bne.w	8009fc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	015a      	lsls	r2, r3, #5
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	7812      	ldrb	r2, [r2, #0]
 8009eca:	0151      	lsls	r1, r2, #5
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	440a      	add	r2, r1
 8009ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ed4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ed8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	015a      	lsls	r2, r3, #5
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	7812      	ldrb	r2, [r2, #0]
 8009eee:	0151      	lsls	r1, r2, #5
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	440a      	add	r2, r1
 8009ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009efc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3301      	adds	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d902      	bls.n	8009f14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	75fb      	strb	r3, [r7, #23]
          break;
 8009f12:	e056      	b.n	8009fc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f2c:	d0e7      	beq.n	8009efe <USB_EPStopXfer+0x82>
 8009f2e:	e048      	b.n	8009fc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f48:	d13b      	bne.n	8009fc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	7812      	ldrb	r2, [r2, #0]
 8009f5e:	0151      	lsls	r1, r2, #5
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	440a      	add	r2, r1
 8009f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	7812      	ldrb	r2, [r2, #0]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3301      	adds	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d902      	bls.n	8009fa8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa6:	e00c      	b.n	8009fc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fc0:	d0e7      	beq.n	8009f92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	371c      	adds	r7, #28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b089      	sub	sp, #36	@ 0x24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	4611      	mov	r1, r2
 8009fdc:	461a      	mov	r2, r3
 8009fde:	460b      	mov	r3, r1
 8009fe0:	71fb      	strb	r3, [r7, #7]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d123      	bne.n	800a03e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ff6:	88bb      	ldrh	r3, [r7, #4]
 8009ff8:	3303      	adds	r3, #3
 8009ffa:	089b      	lsrs	r3, r3, #2
 8009ffc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ffe:	2300      	movs	r3, #0
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	e018      	b.n	800a036 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	031a      	lsls	r2, r3, #12
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a010:	461a      	mov	r2, r3
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	3301      	adds	r3, #1
 800a01c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3301      	adds	r3, #1
 800a022:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	3301      	adds	r3, #1
 800a028:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	3301      	adds	r3, #1
 800a02e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	3301      	adds	r3, #1
 800a034:	61bb      	str	r3, [r7, #24]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d3e2      	bcc.n	800a004 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3724      	adds	r7, #36	@ 0x24
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b08b      	sub	sp, #44	@ 0x2c
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	089b      	lsrs	r3, r3, #2
 800a066:	b29b      	uxth	r3, r3
 800a068:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	f003 0303 	and.w	r3, r3, #3
 800a070:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a072:	2300      	movs	r3, #0
 800a074:	623b      	str	r3, [r7, #32]
 800a076:	e014      	b.n	800a0a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a082:	601a      	str	r2, [r3, #0]
    pDest++;
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	3301      	adds	r3, #1
 800a088:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	3301      	adds	r3, #1
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	3301      	adds	r3, #1
 800a094:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a098:	3301      	adds	r3, #1
 800a09a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	623b      	str	r3, [r7, #32]
 800a0a2:	6a3a      	ldr	r2, [r7, #32]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d3e6      	bcc.n	800a078 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0aa:	8bfb      	ldrh	r3, [r7, #30]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d01e      	beq.n	800a0ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f107 0310 	add.w	r3, r7, #16
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	701a      	strb	r2, [r3, #0]
      i++;
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	3301      	adds	r3, #1
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a0e2:	8bfb      	ldrh	r3, [r7, #30]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0e8:	8bfb      	ldrh	r3, [r7, #30]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1ea      	bne.n	800a0c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	372c      	adds	r7, #44	@ 0x2c
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d12c      	bne.n	800a172 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	db12      	blt.n	800a150 <USB_EPSetStall+0x54>
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00f      	beq.n	800a150 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a14a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a14e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a16a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	e02b      	b.n	800a1ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	db12      	blt.n	800a1aa <USB_EPSetStall+0xae>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00f      	beq.n	800a1aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	0151      	lsls	r1, r2, #5
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	440a      	add	r2, r1
 800a1a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	0151      	lsls	r1, r2, #5
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	440a      	add	r2, r1
 800a1c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	785b      	ldrb	r3, [r3, #1]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d128      	bne.n	800a246 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a20e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a212:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	791b      	ldrb	r3, [r3, #4]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d003      	beq.n	800a224 <USB_EPClearStall+0x4c>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	791b      	ldrb	r3, [r3, #4]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d138      	bne.n	800a296 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	0151      	lsls	r1, r2, #5
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	440a      	add	r2, r1
 800a23a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a23e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e027      	b.n	800a296 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	0151      	lsls	r1, r2, #5
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	440a      	add	r2, r1
 800a25c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a260:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a264:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	791b      	ldrb	r3, [r3, #4]
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d003      	beq.n	800a276 <USB_EPClearStall+0x9e>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	791b      	ldrb	r3, [r3, #4]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d10f      	bne.n	800a296 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	015a      	lsls	r2, r3, #5
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	4413      	add	r3, r2
 800a27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	0151      	lsls	r1, r2, #5
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	440a      	add	r2, r1
 800a28c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a294:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a2c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a2d8:	68f9      	ldr	r1, [r7, #12]
 800a2da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a31e:	f023 0302 	bic.w	r3, r3, #2
 800a322:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a34c:	f023 0303 	bic.w	r3, r3, #3
 800a350:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a360:	f043 0302 	orr.w	r3, r3, #2
 800a364:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4013      	ands	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a38c:	68fb      	ldr	r3, [r7, #12]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	0c1b      	lsrs	r3, r3, #16
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	b29b      	uxth	r3, r3
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	460b      	mov	r3, r1
 800a40c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	4013      	ands	r3, r2
 800a42e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a430:	68bb      	ldr	r3, [r7, #8]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a43e:	b480      	push	{r7}
 800a440:	b087      	sub	sp, #28
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a460:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	f003 030f 	and.w	r3, r3, #15
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	fa22 f303 	lsr.w	r3, r2, r3
 800a46e:	01db      	lsls	r3, r3, #7
 800a470:	b2db      	uxtb	r3, r3
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4313      	orrs	r3, r2
 800a476:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	4013      	ands	r3, r2
 800a48a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a48c:	68bb      	ldr	r3, [r7, #8]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	371c      	adds	r7, #28
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a4d4:	f023 0307 	bic.w	r3, r3, #7
 800a4d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	460b      	mov	r3, r1
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	333c      	adds	r3, #60	@ 0x3c
 800a512:	3304      	adds	r3, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	4a26      	ldr	r2, [pc, #152]	@ (800a5b4 <USB_EP0_OutStart+0xb8>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d90a      	bls.n	800a536 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a52c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a530:	d101      	bne.n	800a536 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	e037      	b.n	800a5a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53c:	461a      	mov	r2, r3
 800a53e:	2300      	movs	r3, #0
 800a540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a554:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	697a      	ldr	r2, [r7, #20]
 800a560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a564:	f043 0318 	orr.w	r3, r3, #24
 800a568:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a578:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a57c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a57e:	7afb      	ldrb	r3, [r7, #11]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d10f      	bne.n	800a5a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58a:	461a      	mov	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a59e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a5a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	4f54300a 	.word	0x4f54300a

0800a5b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5d0:	d901      	bls.n	800a5d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e01b      	b.n	800a60e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	daf2      	bge.n	800a5c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f043 0201 	orr.w	r2, r3, #1
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5fa:	d901      	bls.n	800a600 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e006      	b.n	800a60e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d0f0      	beq.n	800a5ee <USB_CoreReset+0x36>

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
	...

0800a61c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a628:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a62c:	f002 fd98 	bl	800d160 <USBD_static_malloc>
 800a630:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d109      	bne.n	800a64c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	32b0      	adds	r2, #176	@ 0xb0
 800a642:	2100      	movs	r1, #0
 800a644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a648:	2302      	movs	r3, #2
 800a64a:	e0d4      	b.n	800a7f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a64c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a650:	2100      	movs	r1, #0
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f002 fdfc 	bl	800d250 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	32b0      	adds	r2, #176	@ 0xb0
 800a662:	68f9      	ldr	r1, [r7, #12]
 800a664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	32b0      	adds	r2, #176	@ 0xb0
 800a672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	7c1b      	ldrb	r3, [r3, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d138      	bne.n	800a6f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a684:	4b5e      	ldr	r3, [pc, #376]	@ (800a800 <USBD_CDC_Init+0x1e4>)
 800a686:	7819      	ldrb	r1, [r3, #0]
 800a688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a68c:	2202      	movs	r2, #2
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f002 fbf5 	bl	800ce7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a694:	4b5a      	ldr	r3, [pc, #360]	@ (800a800 <USBD_CDC_Init+0x1e4>)
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	f003 020f 	and.w	r2, r3, #15
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3324      	adds	r3, #36	@ 0x24
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6ae:	4b55      	ldr	r3, [pc, #340]	@ (800a804 <USBD_CDC_Init+0x1e8>)
 800a6b0:	7819      	ldrb	r1, [r3, #0]
 800a6b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f002 fbe0 	bl	800ce7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6be:	4b51      	ldr	r3, [pc, #324]	@ (800a804 <USBD_CDC_Init+0x1e8>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	f003 020f 	and.w	r2, r3, #15
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6da:	4b4b      	ldr	r3, [pc, #300]	@ (800a808 <USBD_CDC_Init+0x1ec>)
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 020f 	and.w	r2, r3, #15
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	440b      	add	r3, r1
 800a6ee:	3326      	adds	r3, #38	@ 0x26
 800a6f0:	2210      	movs	r2, #16
 800a6f2:	801a      	strh	r2, [r3, #0]
 800a6f4:	e035      	b.n	800a762 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6f6:	4b42      	ldr	r3, [pc, #264]	@ (800a800 <USBD_CDC_Init+0x1e4>)
 800a6f8:	7819      	ldrb	r1, [r3, #0]
 800a6fa:	2340      	movs	r3, #64	@ 0x40
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f002 fbbd 	bl	800ce7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a704:	4b3e      	ldr	r3, [pc, #248]	@ (800a800 <USBD_CDC_Init+0x1e4>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 020f 	and.w	r2, r3, #15
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	440b      	add	r3, r1
 800a718:	3324      	adds	r3, #36	@ 0x24
 800a71a:	2201      	movs	r2, #1
 800a71c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a71e:	4b39      	ldr	r3, [pc, #228]	@ (800a804 <USBD_CDC_Init+0x1e8>)
 800a720:	7819      	ldrb	r1, [r3, #0]
 800a722:	2340      	movs	r3, #64	@ 0x40
 800a724:	2202      	movs	r2, #2
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f002 fba9 	bl	800ce7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a72c:	4b35      	ldr	r3, [pc, #212]	@ (800a804 <USBD_CDC_Init+0x1e8>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a744:	2201      	movs	r2, #1
 800a746:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a748:	4b2f      	ldr	r3, [pc, #188]	@ (800a808 <USBD_CDC_Init+0x1ec>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f003 020f 	and.w	r2, r3, #15
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	3326      	adds	r3, #38	@ 0x26
 800a75e:	2210      	movs	r2, #16
 800a760:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a762:	4b29      	ldr	r3, [pc, #164]	@ (800a808 <USBD_CDC_Init+0x1ec>)
 800a764:	7819      	ldrb	r1, [r3, #0]
 800a766:	2308      	movs	r3, #8
 800a768:	2203      	movs	r2, #3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f002 fb87 	bl	800ce7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a770:	4b25      	ldr	r3, [pc, #148]	@ (800a808 <USBD_CDC_Init+0x1ec>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	f003 020f 	and.w	r2, r3, #15
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	440b      	add	r3, r1
 800a784:	3324      	adds	r3, #36	@ 0x24
 800a786:	2201      	movs	r2, #1
 800a788:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	33b0      	adds	r3, #176	@ 0xb0
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	e018      	b.n	800a7f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	7c1b      	ldrb	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <USBD_CDC_Init+0x1e8>)
 800a7ce:	7819      	ldrb	r1, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f002 fc3e 	bl	800d05c <USBD_LL_PrepareReceive>
 800a7e0:	e008      	b.n	800a7f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7e2:	4b08      	ldr	r3, [pc, #32]	@ (800a804 <USBD_CDC_Init+0x1e8>)
 800a7e4:	7819      	ldrb	r1, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7ec:	2340      	movs	r3, #64	@ 0x40
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f002 fc34 	bl	800d05c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	200001d7 	.word	0x200001d7
 800a804:	200001d8 	.word	0x200001d8
 800a808:	200001d9 	.word	0x200001d9

0800a80c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a818:	4b3a      	ldr	r3, [pc, #232]	@ (800a904 <USBD_CDC_DeInit+0xf8>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f002 fb53 	bl	800ceca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a824:	4b37      	ldr	r3, [pc, #220]	@ (800a904 <USBD_CDC_DeInit+0xf8>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 020f 	and.w	r2, r3, #15
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	440b      	add	r3, r1
 800a838:	3324      	adds	r3, #36	@ 0x24
 800a83a:	2200      	movs	r2, #0
 800a83c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a83e:	4b32      	ldr	r3, [pc, #200]	@ (800a908 <USBD_CDC_DeInit+0xfc>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f002 fb40 	bl	800ceca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a84a:	4b2f      	ldr	r3, [pc, #188]	@ (800a908 <USBD_CDC_DeInit+0xfc>)
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 020f 	and.w	r2, r3, #15
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a862:	2200      	movs	r2, #0
 800a864:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a866:	4b29      	ldr	r3, [pc, #164]	@ (800a90c <USBD_CDC_DeInit+0x100>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f002 fb2c 	bl	800ceca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a872:	4b26      	ldr	r3, [pc, #152]	@ (800a90c <USBD_CDC_DeInit+0x100>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	f003 020f 	and.w	r2, r3, #15
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	3324      	adds	r3, #36	@ 0x24
 800a888:	2200      	movs	r2, #0
 800a88a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a88c:	4b1f      	ldr	r3, [pc, #124]	@ (800a90c <USBD_CDC_DeInit+0x100>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 020f 	and.w	r2, r3, #15
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	440b      	add	r3, r1
 800a8a0:	3326      	adds	r3, #38	@ 0x26
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	32b0      	adds	r2, #176	@ 0xb0
 800a8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01f      	beq.n	800a8f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	33b0      	adds	r3, #176	@ 0xb0
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	32b0      	adds	r2, #176	@ 0xb0
 800a8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f002 fc4e 	bl	800d17c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	32b0      	adds	r2, #176	@ 0xb0
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	200001d7 	.word	0x200001d7
 800a908:	200001d8 	.word	0x200001d8
 800a90c:	200001d9 	.word	0x200001d9

0800a910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	32b0      	adds	r2, #176	@ 0xb0
 800a924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a928:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e0bf      	b.n	800aac0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d050      	beq.n	800a9ee <USBD_CDC_Setup+0xde>
 800a94c:	2b20      	cmp	r3, #32
 800a94e:	f040 80af 	bne.w	800aab0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	88db      	ldrh	r3, [r3, #6]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d03a      	beq.n	800a9d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b25b      	sxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	da1b      	bge.n	800a99c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	33b0      	adds	r3, #176	@ 0xb0
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a97a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	88d2      	ldrh	r2, [r2, #6]
 800a980:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	88db      	ldrh	r3, [r3, #6]
 800a986:	2b07      	cmp	r3, #7
 800a988:	bf28      	it	cs
 800a98a:	2307      	movcs	r3, #7
 800a98c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	89fa      	ldrh	r2, [r7, #14]
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f001 fdbd 	bl	800c514 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a99a:	e090      	b.n	800aabe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	785a      	ldrb	r2, [r3, #1]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	88db      	ldrh	r3, [r3, #6]
 800a9aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9ac:	d803      	bhi.n	800a9b6 <USBD_CDC_Setup+0xa6>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	88db      	ldrh	r3, [r3, #6]
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	e000      	b.n	800a9b8 <USBD_CDC_Setup+0xa8>
 800a9b6:	2240      	movs	r2, #64	@ 0x40
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9be:	6939      	ldr	r1, [r7, #16]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 fdcf 	bl	800c56c <USBD_CtlPrepareRx>
      break;
 800a9ce:	e076      	b.n	800aabe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	33b0      	adds	r3, #176	@ 0xb0
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	7850      	ldrb	r0, [r2, #1]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	4798      	blx	r3
      break;
 800a9ec:	e067      	b.n	800aabe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	785b      	ldrb	r3, [r3, #1]
 800a9f2:	2b0b      	cmp	r3, #11
 800a9f4:	d851      	bhi.n	800aa9a <USBD_CDC_Setup+0x18a>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <USBD_CDC_Setup+0xec>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa2d 	.word	0x0800aa2d
 800aa00:	0800aaa9 	.word	0x0800aaa9
 800aa04:	0800aa9b 	.word	0x0800aa9b
 800aa08:	0800aa9b 	.word	0x0800aa9b
 800aa0c:	0800aa9b 	.word	0x0800aa9b
 800aa10:	0800aa9b 	.word	0x0800aa9b
 800aa14:	0800aa9b 	.word	0x0800aa9b
 800aa18:	0800aa9b 	.word	0x0800aa9b
 800aa1c:	0800aa9b 	.word	0x0800aa9b
 800aa20:	0800aa9b 	.word	0x0800aa9b
 800aa24:	0800aa57 	.word	0x0800aa57
 800aa28:	0800aa81 	.word	0x0800aa81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d107      	bne.n	800aa48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa38:	f107 030a 	add.w	r3, r7, #10
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 fd67 	bl	800c514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa46:	e032      	b.n	800aaae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fce5 	bl	800c41a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa50:	2303      	movs	r3, #3
 800aa52:	75fb      	strb	r3, [r7, #23]
          break;
 800aa54:	e02b      	b.n	800aaae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d107      	bne.n	800aa72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa62:	f107 030d 	add.w	r3, r7, #13
 800aa66:	2201      	movs	r2, #1
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 fd52 	bl	800c514 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa70:	e01d      	b.n	800aaae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 fcd0 	bl	800c41a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	75fb      	strb	r3, [r7, #23]
          break;
 800aa7e:	e016      	b.n	800aaae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d00f      	beq.n	800aaac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fcc3 	bl	800c41a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa98:	e008      	b.n	800aaac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 fcbc 	bl	800c41a <USBD_CtlError>
          ret = USBD_FAIL;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	75fb      	strb	r3, [r7, #23]
          break;
 800aaa6:	e002      	b.n	800aaae <USBD_CDC_Setup+0x19e>
          break;
 800aaa8:	bf00      	nop
 800aaaa:	e008      	b.n	800aabe <USBD_CDC_Setup+0x1ae>
          break;
 800aaac:	bf00      	nop
      }
      break;
 800aaae:	e006      	b.n	800aabe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 fcb1 	bl	800c41a <USBD_CtlError>
      ret = USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	75fb      	strb	r3, [r7, #23]
      break;
 800aabc:	bf00      	nop
  }

  return (uint8_t)ret;
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	32b0      	adds	r2, #176	@ 0xb0
 800aae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e065      	b.n	800abbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	32b0      	adds	r2, #176	@ 0xb0
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	f003 020f 	and.w	r2, r3, #15
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	440b      	add	r3, r1
 800ab14:	3318      	adds	r3, #24
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d02f      	beq.n	800ab7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	f003 020f 	and.w	r2, r3, #15
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	3318      	adds	r3, #24
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	f003 010f 	and.w	r1, r3, #15
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	00db      	lsls	r3, r3, #3
 800ab3e:	440b      	add	r3, r1
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4403      	add	r3, r0
 800ab44:	331c      	adds	r3, #28
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d112      	bne.n	800ab7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab56:	78fb      	ldrb	r3, [r7, #3]
 800ab58:	f003 020f 	and.w	r2, r3, #15
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	440b      	add	r3, r1
 800ab68:	3318      	adds	r3, #24
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab6e:	78f9      	ldrb	r1, [r7, #3]
 800ab70:	2300      	movs	r3, #0
 800ab72:	2200      	movs	r2, #0
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f002 fa50 	bl	800d01a <USBD_LL_Transmit>
 800ab7a:	e01f      	b.n	800abbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	33b0      	adds	r3, #176	@ 0xb0
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d010      	beq.n	800abbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	33b0      	adds	r3, #176	@ 0xb0
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abb8:	78fa      	ldrb	r2, [r7, #3]
 800abba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	460b      	mov	r3, r1
 800abd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	32b0      	adds	r2, #176	@ 0xb0
 800abdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	32b0      	adds	r2, #176	@ 0xb0
 800abec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abf4:	2303      	movs	r3, #3
 800abf6:	e01a      	b.n	800ac2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abf8:	78fb      	ldrb	r3, [r7, #3]
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f002 fa4e 	bl	800d09e <USBD_LL_GetRxDataSize>
 800ac02:	4602      	mov	r2, r0
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	33b0      	adds	r3, #176	@ 0xb0
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	32b0      	adds	r2, #176	@ 0xb0
 800ac48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e024      	b.n	800aca2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	33b0      	adds	r3, #176	@ 0xb0
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d019      	beq.n	800aca0 <USBD_CDC_EP0_RxReady+0x6a>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac72:	2bff      	cmp	r3, #255	@ 0xff
 800ac74:	d014      	beq.n	800aca0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	33b0      	adds	r3, #176	@ 0xb0
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	22ff      	movs	r2, #255	@ 0xff
 800ac9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acb4:	2182      	movs	r1, #130	@ 0x82
 800acb6:	4818      	ldr	r0, [pc, #96]	@ (800ad18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acb8:	f000 fd4f 	bl	800b75a <USBD_GetEpDesc>
 800acbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acbe:	2101      	movs	r1, #1
 800acc0:	4815      	ldr	r0, [pc, #84]	@ (800ad18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acc2:	f000 fd4a 	bl	800b75a <USBD_GetEpDesc>
 800acc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acc8:	2181      	movs	r1, #129	@ 0x81
 800acca:	4813      	ldr	r0, [pc, #76]	@ (800ad18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800accc:	f000 fd45 	bl	800b75a <USBD_GetEpDesc>
 800acd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2210      	movs	r2, #16
 800acdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d006      	beq.n	800acf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acec:	711a      	strb	r2, [r3, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d006      	beq.n	800ad06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad00:	711a      	strb	r2, [r3, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2243      	movs	r2, #67	@ 0x43
 800ad0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad0c:	4b02      	ldr	r3, [pc, #8]	@ (800ad18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20000194 	.word	0x20000194

0800ad1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad24:	2182      	movs	r1, #130	@ 0x82
 800ad26:	4818      	ldr	r0, [pc, #96]	@ (800ad88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad28:	f000 fd17 	bl	800b75a <USBD_GetEpDesc>
 800ad2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad2e:	2101      	movs	r1, #1
 800ad30:	4815      	ldr	r0, [pc, #84]	@ (800ad88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad32:	f000 fd12 	bl	800b75a <USBD_GetEpDesc>
 800ad36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad38:	2181      	movs	r1, #129	@ 0x81
 800ad3a:	4813      	ldr	r0, [pc, #76]	@ (800ad88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad3c:	f000 fd0d 	bl	800b75a <USBD_GetEpDesc>
 800ad40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2210      	movs	r2, #16
 800ad4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d006      	beq.n	800ad62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	2200      	movs	r2, #0
 800ad58:	711a      	strb	r2, [r3, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f042 0202 	orr.w	r2, r2, #2
 800ad60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	711a      	strb	r2, [r3, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f042 0202 	orr.w	r2, r2, #2
 800ad74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2243      	movs	r2, #67	@ 0x43
 800ad7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad7c:	4b02      	ldr	r3, [pc, #8]	@ (800ad88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20000194 	.word	0x20000194

0800ad8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad94:	2182      	movs	r1, #130	@ 0x82
 800ad96:	4818      	ldr	r0, [pc, #96]	@ (800adf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad98:	f000 fcdf 	bl	800b75a <USBD_GetEpDesc>
 800ad9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad9e:	2101      	movs	r1, #1
 800ada0:	4815      	ldr	r0, [pc, #84]	@ (800adf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ada2:	f000 fcda 	bl	800b75a <USBD_GetEpDesc>
 800ada6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ada8:	2181      	movs	r1, #129	@ 0x81
 800adaa:	4813      	ldr	r0, [pc, #76]	@ (800adf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adac:	f000 fcd5 	bl	800b75a <USBD_GetEpDesc>
 800adb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2210      	movs	r2, #16
 800adbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adcc:	711a      	strb	r2, [r3, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ade0:	711a      	strb	r2, [r3, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2243      	movs	r2, #67	@ 0x43
 800adea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adec:	4b02      	ldr	r3, [pc, #8]	@ (800adf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000194 	.word	0x20000194

0800adfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	220a      	movs	r2, #10
 800ae08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae0a:	4b03      	ldr	r3, [pc, #12]	@ (800ae18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	20000150 	.word	0x20000150

0800ae1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e009      	b.n	800ae44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	33b0      	adds	r3, #176	@ 0xb0
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4413      	add	r3, r2
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	32b0      	adds	r2, #176	@ 0xb0
 800ae66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e008      	b.n	800ae88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	32b0      	adds	r2, #176	@ 0xb0
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e004      	b.n	800aec2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	683a      	ldr	r2, [r7, #0]
 800aebc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32b0      	adds	r2, #176	@ 0xb0
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aee8:	2301      	movs	r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e025      	b.n	800af42 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d11f      	bne.n	800af40 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2201      	movs	r2, #1
 800af04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800af08:	4b10      	ldr	r3, [pc, #64]	@ (800af4c <USBD_CDC_TransmitPacket+0x7c>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	f003 020f 	and.w	r2, r3, #15
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4403      	add	r3, r0
 800af22:	3318      	adds	r3, #24
 800af24:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af26:	4b09      	ldr	r3, [pc, #36]	@ (800af4c <USBD_CDC_TransmitPacket+0x7c>)
 800af28:	7819      	ldrb	r1, [r3, #0]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f002 f86f 	bl	800d01a <USBD_LL_Transmit>

    ret = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	200001d7 	.word	0x200001d7

0800af50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	32b0      	adds	r2, #176	@ 0xb0
 800af62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af66:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	32b0      	adds	r2, #176	@ 0xb0
 800af72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e018      	b.n	800afb0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	7c1b      	ldrb	r3, [r3, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af86:	4b0c      	ldr	r3, [pc, #48]	@ (800afb8 <USBD_CDC_ReceivePacket+0x68>)
 800af88:	7819      	ldrb	r1, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f002 f861 	bl	800d05c <USBD_LL_PrepareReceive>
 800af9a:	e008      	b.n	800afae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af9c:	4b06      	ldr	r3, [pc, #24]	@ (800afb8 <USBD_CDC_ReceivePacket+0x68>)
 800af9e:	7819      	ldrb	r1, [r3, #0]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afa6:	2340      	movs	r3, #64	@ 0x40
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f002 f857 	bl	800d05c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	200001d8 	.word	0x200001d8

0800afbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	4613      	mov	r3, r2
 800afc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e01f      	b.n	800b014 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	79fa      	ldrb	r2, [r7, #7]
 800b006:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f001 fed1 	bl	800cdb0 <USBD_LL_Init>
 800b00e:	4603      	mov	r3, r0
 800b010:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b012:	7dfb      	ldrb	r3, [r7, #23]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b030:	2303      	movs	r3, #3
 800b032:	e025      	b.n	800b080 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	32ae      	adds	r2, #174	@ 0xae
 800b046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00f      	beq.n	800b070 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	32ae      	adds	r2, #174	@ 0xae
 800b05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b060:	f107 020e 	add.w	r2, r7, #14
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	4602      	mov	r2, r0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 fed9 	bl	800ce48 <USBD_LL_Start>
 800b096:	4603      	mov	r3, r0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	78fa      	ldrb	r2, [r7, #3]
 800b0da:	4611      	mov	r1, r2
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	4798      	blx	r3
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	78fa      	ldrb	r2, [r7, #3]
 800b108:	4611      	mov	r1, r2
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	4798      	blx	r3
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b114:	2303      	movs	r3, #3
 800b116:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b118:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f001 f936 	bl	800c3a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b148:	461a      	mov	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b156:	f003 031f 	and.w	r3, r3, #31
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d01a      	beq.n	800b194 <USBD_LL_SetupStage+0x72>
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d822      	bhi.n	800b1a8 <USBD_LL_SetupStage+0x86>
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <USBD_LL_SetupStage+0x4a>
 800b166:	2b01      	cmp	r3, #1
 800b168:	d00a      	beq.n	800b180 <USBD_LL_SetupStage+0x5e>
 800b16a:	e01d      	b.n	800b1a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fb63 	bl	800b840 <USBD_StdDevReq>
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]
      break;
 800b17e:	e020      	b.n	800b1c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fbcb 	bl	800b924 <USBD_StdItfReq>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]
      break;
 800b192:	e016      	b.n	800b1c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fc2d 	bl	800b9fc <USBD_StdEPReq>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a6:	e00c      	b.n	800b1c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f001 fea6 	bl	800cf08 <USBD_LL_StallEP>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c0:	bf00      	nop
  }

  return ret;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d16e      	bne.n	800b2c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	f040 8098 	bne.w	800b328 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	429a      	cmp	r2, r3
 800b202:	d913      	bls.n	800b22c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	689a      	ldr	r2, [r3, #8]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	1ad2      	subs	r2, r2, r3
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	bf28      	it	cs
 800b21e:	4613      	movcs	r3, r2
 800b220:	461a      	mov	r2, r3
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f001 f9be 	bl	800c5a6 <USBD_CtlContinueRx>
 800b22a:	e07d      	b.n	800b328 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b232:	f003 031f 	and.w	r3, r3, #31
 800b236:	2b02      	cmp	r3, #2
 800b238:	d014      	beq.n	800b264 <USBD_LL_DataOutStage+0x98>
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d81d      	bhi.n	800b27a <USBD_LL_DataOutStage+0xae>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <USBD_LL_DataOutStage+0x7c>
 800b242:	2b01      	cmp	r3, #1
 800b244:	d003      	beq.n	800b24e <USBD_LL_DataOutStage+0x82>
 800b246:	e018      	b.n	800b27a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	75bb      	strb	r3, [r7, #22]
            break;
 800b24c:	e018      	b.n	800b280 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b254:	b2db      	uxtb	r3, r3
 800b256:	4619      	mov	r1, r3
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 fa64 	bl	800b726 <USBD_CoreFindIF>
 800b25e:	4603      	mov	r3, r0
 800b260:	75bb      	strb	r3, [r7, #22]
            break;
 800b262:	e00d      	b.n	800b280 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	4619      	mov	r1, r3
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 fa66 	bl	800b740 <USBD_CoreFindEP>
 800b274:	4603      	mov	r3, r0
 800b276:	75bb      	strb	r3, [r7, #22]
            break;
 800b278:	e002      	b.n	800b280 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	75bb      	strb	r3, [r7, #22]
            break;
 800b27e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b280:	7dbb      	ldrb	r3, [r7, #22]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d119      	bne.n	800b2ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d113      	bne.n	800b2ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b292:	7dba      	ldrb	r2, [r7, #22]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	32ae      	adds	r2, #174	@ 0xae
 800b298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2a2:	7dba      	ldrb	r2, [r7, #22]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2aa:	7dba      	ldrb	r2, [r7, #22]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	32ae      	adds	r2, #174	@ 0xae
 800b2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f001 f984 	bl	800c5c8 <USBD_CtlSendStatus>
 800b2c0:	e032      	b.n	800b328 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2c2:	7afb      	ldrb	r3, [r7, #11]
 800b2c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 fa37 	bl	800b740 <USBD_CoreFindEP>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2d6:	7dbb      	ldrb	r3, [r7, #22]
 800b2d8:	2bff      	cmp	r3, #255	@ 0xff
 800b2da:	d025      	beq.n	800b328 <USBD_LL_DataOutStage+0x15c>
 800b2dc:	7dbb      	ldrb	r3, [r7, #22]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d122      	bne.n	800b328 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b03      	cmp	r3, #3
 800b2ec:	d117      	bne.n	800b31e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2ee:	7dba      	ldrb	r2, [r7, #22]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	32ae      	adds	r2, #174	@ 0xae
 800b2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00f      	beq.n	800b31e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2fe:	7dba      	ldrb	r2, [r7, #22]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b306:	7dba      	ldrb	r2, [r7, #22]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	32ae      	adds	r2, #174	@ 0xae
 800b30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	7afa      	ldrb	r2, [r7, #11]
 800b314:	4611      	mov	r1, r2
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	4798      	blx	r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	e000      	b.n	800b32a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b086      	sub	sp, #24
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	460b      	mov	r3, r1
 800b33c:	607a      	str	r2, [r7, #4]
 800b33e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b340:	7afb      	ldrb	r3, [r7, #11]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d16f      	bne.n	800b426 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3314      	adds	r3, #20
 800b34a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b352:	2b02      	cmp	r3, #2
 800b354:	d15a      	bne.n	800b40c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d914      	bls.n	800b38c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	1ad2      	subs	r2, r2, r3
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	461a      	mov	r2, r3
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f001 f8e6 	bl	800c54a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b37e:	2300      	movs	r3, #0
 800b380:	2200      	movs	r2, #0
 800b382:	2100      	movs	r1, #0
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f001 fe69 	bl	800d05c <USBD_LL_PrepareReceive>
 800b38a:	e03f      	b.n	800b40c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	68da      	ldr	r2, [r3, #12]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d11c      	bne.n	800b3d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d316      	bcc.n	800b3d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d20f      	bcs.n	800b3d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f001 f8c7 	bl	800c54a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f001 fe46 	bl	800d05c <USBD_LL_PrepareReceive>
 800b3d0:	e01c      	b.n	800b40c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d10f      	bne.n	800b3fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d009      	beq.n	800b3fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3fe:	2180      	movs	r1, #128	@ 0x80
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f001 fd81 	bl	800cf08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f001 f8f1 	bl	800c5ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d03a      	beq.n	800b48c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f7ff fe42 	bl	800b0a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b424:	e032      	b.n	800b48c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	4619      	mov	r1, r3
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f000 f985 	bl	800b740 <USBD_CoreFindEP>
 800b436:	4603      	mov	r3, r0
 800b438:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	2bff      	cmp	r3, #255	@ 0xff
 800b43e:	d025      	beq.n	800b48c <USBD_LL_DataInStage+0x15a>
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d122      	bne.n	800b48c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d11c      	bne.n	800b48c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b452:	7dfa      	ldrb	r2, [r7, #23]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	32ae      	adds	r2, #174	@ 0xae
 800b458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d014      	beq.n	800b48c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b462:	7dfa      	ldrb	r2, [r7, #23]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b46a:	7dfa      	ldrb	r2, [r7, #23]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	32ae      	adds	r2, #174	@ 0xae
 800b470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	7afa      	ldrb	r2, [r7, #11]
 800b478:	4611      	mov	r1, r2
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	4798      	blx	r3
 800b47e:	4603      	mov	r3, r0
 800b480:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b482:	7dbb      	ldrb	r3, [r7, #22]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b488:	7dbb      	ldrb	r3, [r7, #22]
 800b48a:	e000      	b.n	800b48e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d014      	beq.n	800b4fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00e      	beq.n	800b4fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	6852      	ldr	r2, [r2, #4]
 800b4ea:	b2d2      	uxtb	r2, r2
 800b4ec:	4611      	mov	r1, r2
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	4798      	blx	r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4fc:	2340      	movs	r3, #64	@ 0x40
 800b4fe:	2200      	movs	r2, #0
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 fcbb 	bl	800ce7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2240      	movs	r2, #64	@ 0x40
 800b514:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b518:	2340      	movs	r3, #64	@ 0x40
 800b51a:	2200      	movs	r2, #0
 800b51c:	2180      	movs	r1, #128	@ 0x80
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f001 fcad 	bl	800ce7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2240      	movs	r2, #64	@ 0x40
 800b52e:	621a      	str	r2, [r3, #32]

  return ret;
 800b530:	7bfb      	ldrb	r3, [r7, #15]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	78fa      	ldrb	r2, [r7, #3]
 800b54a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d006      	beq.n	800b57c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b574:	b2da      	uxtb	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2204      	movs	r2, #4
 800b580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d106      	bne.n	800b5b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d110      	bne.n	800b5f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	32ae      	adds	r2, #174	@ 0xae
 800b618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b620:	2303      	movs	r3, #3
 800b622:	e01c      	b.n	800b65e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d115      	bne.n	800b65c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	32ae      	adds	r2, #174	@ 0xae
 800b63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	32ae      	adds	r2, #174	@ 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	78fa      	ldrb	r2, [r7, #3]
 800b656:	4611      	mov	r1, r2
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	32ae      	adds	r2, #174	@ 0xae
 800b67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b684:	2303      	movs	r3, #3
 800b686:	e01c      	b.n	800b6c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b03      	cmp	r3, #3
 800b692:	d115      	bne.n	800b6c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	32ae      	adds	r2, #174	@ 0xae
 800b69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	32ae      	adds	r2, #174	@ 0xae
 800b6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b8:	78fa      	ldrb	r2, [r7, #3]
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6852      	ldr	r2, [r2, #4]
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	4611      	mov	r1, r2
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	4798      	blx	r3
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d001      	beq.n	800b71c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	460b      	mov	r3, r1
 800b730:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b732:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b74c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b086      	sub	sp, #24
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	460b      	mov	r3, r1
 800b764:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b76e:	2300      	movs	r3, #0
 800b770:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	885b      	ldrh	r3, [r3, #2]
 800b776:	b29b      	uxth	r3, r3
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	7812      	ldrb	r2, [r2, #0]
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d91f      	bls.n	800b7c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b786:	e013      	b.n	800b7b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b788:	f107 030a 	add.w	r3, r7, #10
 800b78c:	4619      	mov	r1, r3
 800b78e:	6978      	ldr	r0, [r7, #20]
 800b790:	f000 f81b 	bl	800b7ca <USBD_GetNextDesc>
 800b794:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	785b      	ldrb	r3, [r3, #1]
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	d108      	bne.n	800b7b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	789b      	ldrb	r3, [r3, #2]
 800b7a6:	78fa      	ldrb	r2, [r7, #3]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d008      	beq.n	800b7be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	885b      	ldrh	r3, [r3, #2]
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	897b      	ldrh	r3, [r7, #10]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d8e5      	bhi.n	800b788 <USBD_GetEpDesc+0x2e>
 800b7bc:	e000      	b.n	800b7c0 <USBD_GetEpDesc+0x66>
          break;
 800b7be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7c0:	693b      	ldr	r3, [r7, #16]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b085      	sub	sp, #20
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	7812      	ldrb	r2, [r2, #0]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b802:	b480      	push	{r7}
 800b804:	b087      	sub	sp, #28
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	3301      	adds	r3, #1
 800b818:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b820:	8a3b      	ldrh	r3, [r7, #16]
 800b822:	021b      	lsls	r3, r3, #8
 800b824:	b21a      	sxth	r2, r3
 800b826:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	b21b      	sxth	r3, r3
 800b82e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b830:	89fb      	ldrh	r3, [r7, #14]
}
 800b832:	4618      	mov	r0, r3
 800b834:	371c      	adds	r7, #28
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
	...

0800b840 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b856:	2b40      	cmp	r3, #64	@ 0x40
 800b858:	d005      	beq.n	800b866 <USBD_StdDevReq+0x26>
 800b85a:	2b40      	cmp	r3, #64	@ 0x40
 800b85c:	d857      	bhi.n	800b90e <USBD_StdDevReq+0xce>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00f      	beq.n	800b882 <USBD_StdDevReq+0x42>
 800b862:	2b20      	cmp	r3, #32
 800b864:	d153      	bne.n	800b90e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	32ae      	adds	r2, #174	@ 0xae
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	4798      	blx	r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	73fb      	strb	r3, [r7, #15]
      break;
 800b880:	e04a      	b.n	800b918 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	785b      	ldrb	r3, [r3, #1]
 800b886:	2b09      	cmp	r3, #9
 800b888:	d83b      	bhi.n	800b902 <USBD_StdDevReq+0xc2>
 800b88a:	a201      	add	r2, pc, #4	@ (adr r2, 800b890 <USBD_StdDevReq+0x50>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8e5 	.word	0x0800b8e5
 800b894:	0800b8f9 	.word	0x0800b8f9
 800b898:	0800b903 	.word	0x0800b903
 800b89c:	0800b8ef 	.word	0x0800b8ef
 800b8a0:	0800b903 	.word	0x0800b903
 800b8a4:	0800b8c3 	.word	0x0800b8c3
 800b8a8:	0800b8b9 	.word	0x0800b8b9
 800b8ac:	0800b903 	.word	0x0800b903
 800b8b0:	0800b8db 	.word	0x0800b8db
 800b8b4:	0800b8cd 	.word	0x0800b8cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fa3c 	bl	800bd38 <USBD_GetDescriptor>
          break;
 800b8c0:	e024      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fbcb 	bl	800c060 <USBD_SetAddress>
          break;
 800b8ca:	e01f      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fc0a 	bl	800c0e8 <USBD_SetConfig>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]
          break;
 800b8d8:	e018      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fcad 	bl	800c23c <USBD_GetConfig>
          break;
 800b8e2:	e013      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fcde 	bl	800c2a8 <USBD_GetStatus>
          break;
 800b8ec:	e00e      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fd0d 	bl	800c310 <USBD_SetFeature>
          break;
 800b8f6:	e009      	b.n	800b90c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fd31 	bl	800c362 <USBD_ClrFeature>
          break;
 800b900:	e004      	b.n	800b90c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fd88 	bl	800c41a <USBD_CtlError>
          break;
 800b90a:	bf00      	nop
      }
      break;
 800b90c:	e004      	b.n	800b918 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fd82 	bl	800c41a <USBD_CtlError>
      break;
 800b916:	bf00      	nop
  }

  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop

0800b924 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b93a:	2b40      	cmp	r3, #64	@ 0x40
 800b93c:	d005      	beq.n	800b94a <USBD_StdItfReq+0x26>
 800b93e:	2b40      	cmp	r3, #64	@ 0x40
 800b940:	d852      	bhi.n	800b9e8 <USBD_StdItfReq+0xc4>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <USBD_StdItfReq+0x26>
 800b946:	2b20      	cmp	r3, #32
 800b948:	d14e      	bne.n	800b9e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b950:	b2db      	uxtb	r3, r3
 800b952:	3b01      	subs	r3, #1
 800b954:	2b02      	cmp	r3, #2
 800b956:	d840      	bhi.n	800b9da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	889b      	ldrh	r3, [r3, #4]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d836      	bhi.n	800b9d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	889b      	ldrh	r3, [r3, #4]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fedb 	bl	800b726 <USBD_CoreFindIF>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	2bff      	cmp	r3, #255	@ 0xff
 800b978:	d01d      	beq.n	800b9b6 <USBD_StdItfReq+0x92>
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d11a      	bne.n	800b9b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b980:	7bba      	ldrb	r2, [r7, #14]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	32ae      	adds	r2, #174	@ 0xae
 800b986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00f      	beq.n	800b9b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b990:	7bba      	ldrb	r2, [r7, #14]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b998:	7bba      	ldrb	r2, [r7, #14]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	32ae      	adds	r2, #174	@ 0xae
 800b99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	4798      	blx	r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9ae:	e004      	b.n	800b9ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9b4:	e001      	b.n	800b9ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	88db      	ldrh	r3, [r3, #6]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d110      	bne.n	800b9e4 <USBD_StdItfReq+0xc0>
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10d      	bne.n	800b9e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fdfd 	bl	800c5c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9ce:	e009      	b.n	800b9e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fd21 	bl	800c41a <USBD_CtlError>
          break;
 800b9d8:	e004      	b.n	800b9e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fd1c 	bl	800c41a <USBD_CtlError>
          break;
 800b9e2:	e000      	b.n	800b9e6 <USBD_StdItfReq+0xc2>
          break;
 800b9e4:	bf00      	nop
      }
      break;
 800b9e6:	e004      	b.n	800b9f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fd15 	bl	800c41a <USBD_CtlError>
      break;
 800b9f0:	bf00      	nop
  }

  return ret;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	889b      	ldrh	r3, [r3, #4]
 800ba0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba18:	2b40      	cmp	r3, #64	@ 0x40
 800ba1a:	d007      	beq.n	800ba2c <USBD_StdEPReq+0x30>
 800ba1c:	2b40      	cmp	r3, #64	@ 0x40
 800ba1e:	f200 817f 	bhi.w	800bd20 <USBD_StdEPReq+0x324>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d02a      	beq.n	800ba7c <USBD_StdEPReq+0x80>
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	f040 817a 	bne.w	800bd20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff fe85 	bl	800b740 <USBD_CoreFindEP>
 800ba36:	4603      	mov	r3, r0
 800ba38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba3a:	7b7b      	ldrb	r3, [r7, #13]
 800ba3c:	2bff      	cmp	r3, #255	@ 0xff
 800ba3e:	f000 8174 	beq.w	800bd2a <USBD_StdEPReq+0x32e>
 800ba42:	7b7b      	ldrb	r3, [r7, #13]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f040 8170 	bne.w	800bd2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba4a:	7b7a      	ldrb	r2, [r7, #13]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba52:	7b7a      	ldrb	r2, [r7, #13]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	32ae      	adds	r2, #174	@ 0xae
 800ba58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 8163 	beq.w	800bd2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba64:	7b7a      	ldrb	r2, [r7, #13]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	32ae      	adds	r2, #174	@ 0xae
 800ba6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
 800ba76:	4603      	mov	r3, r0
 800ba78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba7a:	e156      	b.n	800bd2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	785b      	ldrb	r3, [r3, #1]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d008      	beq.n	800ba96 <USBD_StdEPReq+0x9a>
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	f300 8145 	bgt.w	800bd14 <USBD_StdEPReq+0x318>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 809b 	beq.w	800bbc6 <USBD_StdEPReq+0x1ca>
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d03c      	beq.n	800bb0e <USBD_StdEPReq+0x112>
 800ba94:	e13e      	b.n	800bd14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d002      	beq.n	800baa8 <USBD_StdEPReq+0xac>
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d016      	beq.n	800bad4 <USBD_StdEPReq+0xd8>
 800baa6:	e02c      	b.n	800bb02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00d      	beq.n	800baca <USBD_StdEPReq+0xce>
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	2b80      	cmp	r3, #128	@ 0x80
 800bab2:	d00a      	beq.n	800baca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f001 fa25 	bl	800cf08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800babe:	2180      	movs	r1, #128	@ 0x80
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 fa21 	bl	800cf08 <USBD_LL_StallEP>
 800bac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bac8:	e020      	b.n	800bb0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fca4 	bl	800c41a <USBD_CtlError>
              break;
 800bad2:	e01b      	b.n	800bb0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	885b      	ldrh	r3, [r3, #2]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10e      	bne.n	800bafa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00b      	beq.n	800bafa <USBD_StdEPReq+0xfe>
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b80      	cmp	r3, #128	@ 0x80
 800bae6:	d008      	beq.n	800bafa <USBD_StdEPReq+0xfe>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d104      	bne.n	800bafa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 fa07 	bl	800cf08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fd64 	bl	800c5c8 <USBD_CtlSendStatus>

              break;
 800bb00:	e004      	b.n	800bb0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fc88 	bl	800c41a <USBD_CtlError>
              break;
 800bb0a:	bf00      	nop
          }
          break;
 800bb0c:	e107      	b.n	800bd1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d002      	beq.n	800bb20 <USBD_StdEPReq+0x124>
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d016      	beq.n	800bb4c <USBD_StdEPReq+0x150>
 800bb1e:	e04b      	b.n	800bbb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00d      	beq.n	800bb42 <USBD_StdEPReq+0x146>
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b80      	cmp	r3, #128	@ 0x80
 800bb2a:	d00a      	beq.n	800bb42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb2c:	7bbb      	ldrb	r3, [r7, #14]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 f9e9 	bl	800cf08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb36:	2180      	movs	r1, #128	@ 0x80
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f001 f9e5 	bl	800cf08 <USBD_LL_StallEP>
 800bb3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb40:	e040      	b.n	800bbc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fc68 	bl	800c41a <USBD_CtlError>
              break;
 800bb4a:	e03b      	b.n	800bbc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	885b      	ldrh	r3, [r3, #2]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d136      	bne.n	800bbc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
 800bb60:	4619      	mov	r1, r3
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 f9ef 	bl	800cf46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fd2d 	bl	800c5c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff fde4 	bl	800b740 <USBD_CoreFindEP>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb7c:	7b7b      	ldrb	r3, [r7, #13]
 800bb7e:	2bff      	cmp	r3, #255	@ 0xff
 800bb80:	d01f      	beq.n	800bbc2 <USBD_StdEPReq+0x1c6>
 800bb82:	7b7b      	ldrb	r3, [r7, #13]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11c      	bne.n	800bbc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb88:	7b7a      	ldrb	r2, [r7, #13]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb90:	7b7a      	ldrb	r2, [r7, #13]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	32ae      	adds	r2, #174	@ 0xae
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d010      	beq.n	800bbc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bba0:	7b7a      	ldrb	r2, [r7, #13]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	32ae      	adds	r2, #174	@ 0xae
 800bba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	4798      	blx	r3
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbb6:	e004      	b.n	800bbc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fc2d 	bl	800c41a <USBD_CtlError>
              break;
 800bbc0:	e000      	b.n	800bbc4 <USBD_StdEPReq+0x1c8>
              break;
 800bbc2:	bf00      	nop
          }
          break;
 800bbc4:	e0ab      	b.n	800bd1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d002      	beq.n	800bbd8 <USBD_StdEPReq+0x1dc>
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	d032      	beq.n	800bc3c <USBD_StdEPReq+0x240>
 800bbd6:	e097      	b.n	800bd08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <USBD_StdEPReq+0x1f2>
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
 800bbe0:	2b80      	cmp	r3, #128	@ 0x80
 800bbe2:	d004      	beq.n	800bbee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fc17 	bl	800c41a <USBD_CtlError>
                break;
 800bbec:	e091      	b.n	800bd12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	da0b      	bge.n	800bc0e <USBD_StdEPReq+0x212>
 800bbf6:	7bbb      	ldrb	r3, [r7, #14]
 800bbf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	3310      	adds	r3, #16
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	4413      	add	r3, r2
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	e00b      	b.n	800bc26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	4413      	add	r3, r2
 800bc24:	3304      	adds	r3, #4
 800bc26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2202      	movs	r2, #2
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fc6d 	bl	800c514 <USBD_CtlSendData>
              break;
 800bc3a:	e06a      	b.n	800bd12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	da11      	bge.n	800bc68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	3324      	adds	r3, #36	@ 0x24
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d117      	bne.n	800bc8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fbda 	bl	800c41a <USBD_CtlError>
                  break;
 800bc66:	e054      	b.n	800bd12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	f003 020f 	and.w	r2, r3, #15
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	440b      	add	r3, r1
 800bc7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d104      	bne.n	800bc8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fbc7 	bl	800c41a <USBD_CtlError>
                  break;
 800bc8c:	e041      	b.n	800bd12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da0b      	bge.n	800bcae <USBD_StdEPReq+0x2b2>
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
 800bc98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	3310      	adds	r3, #16
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	3304      	adds	r3, #4
 800bcac:	e00b      	b.n	800bcc6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <USBD_StdEPReq+0x2d8>
 800bcce:	7bbb      	ldrb	r3, [r7, #14]
 800bcd0:	2b80      	cmp	r3, #128	@ 0x80
 800bcd2:	d103      	bne.n	800bcdc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	e00e      	b.n	800bcfa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f001 f94f 	bl	800cf84 <USBD_LL_IsStallEP>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d003      	beq.n	800bcf4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e002      	b.n	800bcfa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fc07 	bl	800c514 <USBD_CtlSendData>
              break;
 800bd06:	e004      	b.n	800bd12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd08:	6839      	ldr	r1, [r7, #0]
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fb85 	bl	800c41a <USBD_CtlError>
              break;
 800bd10:	bf00      	nop
          }
          break;
 800bd12:	e004      	b.n	800bd1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb7f 	bl	800c41a <USBD_CtlError>
          break;
 800bd1c:	bf00      	nop
      }
      break;
 800bd1e:	e005      	b.n	800bd2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fb79 	bl	800c41a <USBD_CtlError>
      break;
 800bd28:	e000      	b.n	800bd2c <USBD_StdEPReq+0x330>
      break;
 800bd2a:	bf00      	nop
  }

  return ret;
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	885b      	ldrh	r3, [r3, #2]
 800bd52:	0a1b      	lsrs	r3, r3, #8
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	3b01      	subs	r3, #1
 800bd58:	2b0e      	cmp	r3, #14
 800bd5a:	f200 8152 	bhi.w	800c002 <USBD_GetDescriptor+0x2ca>
 800bd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <USBD_GetDescriptor+0x2c>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bdd5 	.word	0x0800bdd5
 800bd68:	0800bded 	.word	0x0800bded
 800bd6c:	0800be2d 	.word	0x0800be2d
 800bd70:	0800c003 	.word	0x0800c003
 800bd74:	0800c003 	.word	0x0800c003
 800bd78:	0800bfa3 	.word	0x0800bfa3
 800bd7c:	0800bfcf 	.word	0x0800bfcf
 800bd80:	0800c003 	.word	0x0800c003
 800bd84:	0800c003 	.word	0x0800c003
 800bd88:	0800c003 	.word	0x0800c003
 800bd8c:	0800c003 	.word	0x0800c003
 800bd90:	0800c003 	.word	0x0800c003
 800bd94:	0800c003 	.word	0x0800c003
 800bd98:	0800c003 	.word	0x0800c003
 800bd9c:	0800bda1 	.word	0x0800bda1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	7c12      	ldrb	r2, [r2, #16]
 800bdb8:	f107 0108 	add.w	r1, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
 800bdc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdc2:	e126      	b.n	800c012 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fb27 	bl	800c41a <USBD_CtlError>
        err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
      break;
 800bdd2:	e11e      	b.n	800c012 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	7c12      	ldrb	r2, [r2, #16]
 800bde0:	f107 0108 	add.w	r1, r7, #8
 800bde4:	4610      	mov	r0, r2
 800bde6:	4798      	blx	r3
 800bde8:	60f8      	str	r0, [r7, #12]
      break;
 800bdea:	e112      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7c1b      	ldrb	r3, [r3, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10d      	bne.n	800be10 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfc:	f107 0208 	add.w	r2, r7, #8
 800be00:	4610      	mov	r0, r2
 800be02:	4798      	blx	r3
 800be04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	2202      	movs	r2, #2
 800be0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be0e:	e100      	b.n	800c012 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be18:	f107 0208 	add.w	r2, r7, #8
 800be1c:	4610      	mov	r0, r2
 800be1e:	4798      	blx	r3
 800be20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3301      	adds	r3, #1
 800be26:	2202      	movs	r2, #2
 800be28:	701a      	strb	r2, [r3, #0]
      break;
 800be2a:	e0f2      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	885b      	ldrh	r3, [r3, #2]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b05      	cmp	r3, #5
 800be34:	f200 80ac 	bhi.w	800bf90 <USBD_GetDescriptor+0x258>
 800be38:	a201      	add	r2, pc, #4	@ (adr r2, 800be40 <USBD_GetDescriptor+0x108>)
 800be3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3e:	bf00      	nop
 800be40:	0800be59 	.word	0x0800be59
 800be44:	0800be8d 	.word	0x0800be8d
 800be48:	0800bec1 	.word	0x0800bec1
 800be4c:	0800bef5 	.word	0x0800bef5
 800be50:	0800bf29 	.word	0x0800bf29
 800be54:	0800bf5d 	.word	0x0800bf5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00b      	beq.n	800be7c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	7c12      	ldrb	r2, [r2, #16]
 800be70:	f107 0108 	add.w	r1, r7, #8
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be7a:	e091      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 facb 	bl	800c41a <USBD_CtlError>
            err++;
 800be84:	7afb      	ldrb	r3, [r7, #11]
 800be86:	3301      	adds	r3, #1
 800be88:	72fb      	strb	r3, [r7, #11]
          break;
 800be8a:	e089      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	7c12      	ldrb	r2, [r2, #16]
 800bea4:	f107 0108 	add.w	r1, r7, #8
 800bea8:	4610      	mov	r0, r2
 800beaa:	4798      	blx	r3
 800beac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beae:	e077      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fab1 	bl	800c41a <USBD_CtlError>
            err++;
 800beb8:	7afb      	ldrb	r3, [r7, #11]
 800beba:	3301      	adds	r3, #1
 800bebc:	72fb      	strb	r3, [r7, #11]
          break;
 800bebe:	e06f      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	7c12      	ldrb	r2, [r2, #16]
 800bed8:	f107 0108 	add.w	r1, r7, #8
 800bedc:	4610      	mov	r0, r2
 800bede:	4798      	blx	r3
 800bee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bee2:	e05d      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fa97 	bl	800c41a <USBD_CtlError>
            err++;
 800beec:	7afb      	ldrb	r3, [r7, #11]
 800beee:	3301      	adds	r3, #1
 800bef0:	72fb      	strb	r3, [r7, #11]
          break;
 800bef2:	e055      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00b      	beq.n	800bf18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	7c12      	ldrb	r2, [r2, #16]
 800bf0c:	f107 0108 	add.w	r1, r7, #8
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
 800bf14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf16:	e043      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa7d 	bl	800c41a <USBD_CtlError>
            err++;
 800bf20:	7afb      	ldrb	r3, [r7, #11]
 800bf22:	3301      	adds	r3, #1
 800bf24:	72fb      	strb	r3, [r7, #11]
          break;
 800bf26:	e03b      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00b      	beq.n	800bf4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	7c12      	ldrb	r2, [r2, #16]
 800bf40:	f107 0108 	add.w	r1, r7, #8
 800bf44:	4610      	mov	r0, r2
 800bf46:	4798      	blx	r3
 800bf48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf4a:	e029      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa63 	bl	800c41a <USBD_CtlError>
            err++;
 800bf54:	7afb      	ldrb	r3, [r7, #11]
 800bf56:	3301      	adds	r3, #1
 800bf58:	72fb      	strb	r3, [r7, #11]
          break;
 800bf5a:	e021      	b.n	800bfa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00b      	beq.n	800bf80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	7c12      	ldrb	r2, [r2, #16]
 800bf74:	f107 0108 	add.w	r1, r7, #8
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4798      	blx	r3
 800bf7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf7e:	e00f      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa49 	bl	800c41a <USBD_CtlError>
            err++;
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf8e:	e007      	b.n	800bfa0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf90:	6839      	ldr	r1, [r7, #0]
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 fa41 	bl	800c41a <USBD_CtlError>
          err++;
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf9e:	bf00      	nop
      }
      break;
 800bfa0:	e037      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7c1b      	ldrb	r3, [r3, #16]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d109      	bne.n	800bfbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb2:	f107 0208 	add.w	r2, r7, #8
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	4798      	blx	r3
 800bfba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfbc:	e029      	b.n	800c012 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fa2a 	bl	800c41a <USBD_CtlError>
        err++;
 800bfc6:	7afb      	ldrb	r3, [r7, #11]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	72fb      	strb	r3, [r7, #11]
      break;
 800bfcc:	e021      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7c1b      	ldrb	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10d      	bne.n	800bff2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfde:	f107 0208 	add.w	r2, r7, #8
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4798      	blx	r3
 800bfe6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3301      	adds	r3, #1
 800bfec:	2207      	movs	r2, #7
 800bfee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bff0:	e00f      	b.n	800c012 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa10 	bl	800c41a <USBD_CtlError>
        err++;
 800bffa:	7afb      	ldrb	r3, [r7, #11]
 800bffc:	3301      	adds	r3, #1
 800bffe:	72fb      	strb	r3, [r7, #11]
      break;
 800c000:	e007      	b.n	800c012 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa08 	bl	800c41a <USBD_CtlError>
      err++;
 800c00a:	7afb      	ldrb	r3, [r7, #11]
 800c00c:	3301      	adds	r3, #1
 800c00e:	72fb      	strb	r3, [r7, #11]
      break;
 800c010:	bf00      	nop
  }

  if (err != 0U)
 800c012:	7afb      	ldrb	r3, [r7, #11]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11e      	bne.n	800c056 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	88db      	ldrh	r3, [r3, #6]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d016      	beq.n	800c04e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c020:	893b      	ldrh	r3, [r7, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	88da      	ldrh	r2, [r3, #6]
 800c02a:	893b      	ldrh	r3, [r7, #8]
 800c02c:	4293      	cmp	r3, r2
 800c02e:	bf28      	it	cs
 800c030:	4613      	movcs	r3, r2
 800c032:	b29b      	uxth	r3, r3
 800c034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c036:	893b      	ldrh	r3, [r7, #8]
 800c038:	461a      	mov	r2, r3
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fa69 	bl	800c514 <USBD_CtlSendData>
 800c042:	e009      	b.n	800c058 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f9e7 	bl	800c41a <USBD_CtlError>
 800c04c:	e004      	b.n	800c058 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 faba 	bl	800c5c8 <USBD_CtlSendStatus>
 800c054:	e000      	b.n	800c058 <USBD_GetDescriptor+0x320>
    return;
 800c056:	bf00      	nop
  }
}
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop

0800c060 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	889b      	ldrh	r3, [r3, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d131      	bne.n	800c0d6 <USBD_SetAddress+0x76>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	88db      	ldrh	r3, [r3, #6]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d12d      	bne.n	800c0d6 <USBD_SetAddress+0x76>
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	885b      	ldrh	r3, [r3, #2]
 800c07e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c080:	d829      	bhi.n	800c0d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	885b      	ldrh	r3, [r3, #2]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c08c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b03      	cmp	r3, #3
 800c098:	d104      	bne.n	800c0a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f9bc 	bl	800c41a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a2:	e01d      	b.n	800c0e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7bfa      	ldrb	r2, [r7, #15]
 800c0a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 ff93 	bl	800cfdc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa86 	bl	800c5c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ca:	e009      	b.n	800c0e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d4:	e004      	b.n	800c0e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f99e 	bl	800c41a <USBD_CtlError>
  }
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	4b4e      	ldr	r3, [pc, #312]	@ (800c238 <USBD_SetConfig+0x150>)
 800c0fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c100:	4b4d      	ldr	r3, [pc, #308]	@ (800c238 <USBD_SetConfig+0x150>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d905      	bls.n	800c114 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f985 	bl	800c41a <USBD_CtlError>
    return USBD_FAIL;
 800c110:	2303      	movs	r3, #3
 800c112:	e08c      	b.n	800c22e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d002      	beq.n	800c126 <USBD_SetConfig+0x3e>
 800c120:	2b03      	cmp	r3, #3
 800c122:	d029      	beq.n	800c178 <USBD_SetConfig+0x90>
 800c124:	e075      	b.n	800c212 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c126:	4b44      	ldr	r3, [pc, #272]	@ (800c238 <USBD_SetConfig+0x150>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d020      	beq.n	800c170 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c12e:	4b42      	ldr	r3, [pc, #264]	@ (800c238 <USBD_SetConfig+0x150>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c138:	4b3f      	ldr	r3, [pc, #252]	@ (800c238 <USBD_SetConfig+0x150>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	4619      	mov	r1, r3
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f7fe ffb9 	bl	800b0b6 <USBD_SetClassConfig>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d008      	beq.n	800c160 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f962 	bl	800c41a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c15e:	e065      	b.n	800c22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fa31 	bl	800c5c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2203      	movs	r2, #3
 800c16a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c16e:	e05d      	b.n	800c22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fa29 	bl	800c5c8 <USBD_CtlSendStatus>
      break;
 800c176:	e059      	b.n	800c22c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c178:	4b2f      	ldr	r3, [pc, #188]	@ (800c238 <USBD_SetConfig+0x150>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d112      	bne.n	800c1a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c188:	4b2b      	ldr	r3, [pc, #172]	@ (800c238 <USBD_SetConfig+0x150>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	461a      	mov	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c192:	4b29      	ldr	r3, [pc, #164]	@ (800c238 <USBD_SetConfig+0x150>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7fe ffa8 	bl	800b0ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa12 	bl	800c5c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1a4:	e042      	b.n	800c22c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c1a6:	4b24      	ldr	r3, [pc, #144]	@ (800c238 <USBD_SetConfig+0x150>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d02a      	beq.n	800c20a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7fe ff96 	bl	800b0ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800c238 <USBD_SetConfig+0x150>)
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c238 <USBD_SetConfig+0x150>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f7fe ff6f 	bl	800b0b6 <USBD_SetClassConfig>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00f      	beq.n	800c202 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f918 	bl	800c41a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7fe ff7b 	bl	800b0ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c200:	e014      	b.n	800c22c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f9e0 	bl	800c5c8 <USBD_CtlSendStatus>
      break;
 800c208:	e010      	b.n	800c22c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f9dc 	bl	800c5c8 <USBD_CtlSendStatus>
      break;
 800c210:	e00c      	b.n	800c22c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f900 	bl	800c41a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c21a:	4b07      	ldr	r3, [pc, #28]	@ (800c238 <USBD_SetConfig+0x150>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7fe ff64 	bl	800b0ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c226:	2303      	movs	r3, #3
 800c228:	73fb      	strb	r3, [r7, #15]
      break;
 800c22a:	bf00      	nop
  }

  return ret;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20000da4 	.word	0x20000da4

0800c23c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	88db      	ldrh	r3, [r3, #6]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d004      	beq.n	800c258 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f8e2 	bl	800c41a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c256:	e023      	b.n	800c2a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b02      	cmp	r3, #2
 800c262:	dc02      	bgt.n	800c26a <USBD_GetConfig+0x2e>
 800c264:	2b00      	cmp	r3, #0
 800c266:	dc03      	bgt.n	800c270 <USBD_GetConfig+0x34>
 800c268:	e015      	b.n	800c296 <USBD_GetConfig+0x5a>
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d00b      	beq.n	800c286 <USBD_GetConfig+0x4a>
 800c26e:	e012      	b.n	800c296 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3308      	adds	r3, #8
 800c27a:	2201      	movs	r2, #1
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f948 	bl	800c514 <USBD_CtlSendData>
        break;
 800c284:	e00c      	b.n	800c2a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3304      	adds	r3, #4
 800c28a:	2201      	movs	r2, #1
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f940 	bl	800c514 <USBD_CtlSendData>
        break;
 800c294:	e004      	b.n	800c2a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f8be 	bl	800c41a <USBD_CtlError>
        break;
 800c29e:	bf00      	nop
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d81e      	bhi.n	800c2fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	88db      	ldrh	r3, [r3, #6]
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d004      	beq.n	800c2d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f8a5 	bl	800c41a <USBD_CtlError>
        break;
 800c2d0:	e01a      	b.n	800c308 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d005      	beq.n	800c2ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	f043 0202 	orr.w	r2, r3, #2
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	330c      	adds	r3, #12
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f90c 	bl	800c514 <USBD_CtlSendData>
      break;
 800c2fc:	e004      	b.n	800c308 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 f88a 	bl	800c41a <USBD_CtlError>
      break;
 800c306:	bf00      	nop
  }
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	885b      	ldrh	r3, [r3, #2]
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d107      	bne.n	800c332 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f94c 	bl	800c5c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c330:	e013      	b.n	800c35a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	2b02      	cmp	r3, #2
 800c338:	d10b      	bne.n	800c352 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	889b      	ldrh	r3, [r3, #4]
 800c33e:	0a1b      	lsrs	r3, r3, #8
 800c340:	b29b      	uxth	r3, r3
 800c342:	b2da      	uxtb	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f93c 	bl	800c5c8 <USBD_CtlSendStatus>
}
 800c350:	e003      	b.n	800c35a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f860 	bl	800c41a <USBD_CtlError>
}
 800c35a:	bf00      	nop
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c372:	b2db      	uxtb	r3, r3
 800c374:	3b01      	subs	r3, #1
 800c376:	2b02      	cmp	r3, #2
 800c378:	d80b      	bhi.n	800c392 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	885b      	ldrh	r3, [r3, #2]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d10c      	bne.n	800c39c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f91c 	bl	800c5c8 <USBD_CtlSendStatus>
      }
      break;
 800c390:	e004      	b.n	800c39c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f840 	bl	800c41a <USBD_CtlError>
      break;
 800c39a:	e000      	b.n	800c39e <USBD_ClrFeature+0x3c>
      break;
 800c39c:	bf00      	nop
  }
}
 800c39e:	bf00      	nop
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7ff fa16 	bl	800b802 <SWAPBYTE>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff fa09 	bl	800b802 <SWAPBYTE>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3301      	adds	r3, #1
 800c402:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f7ff f9fc 	bl	800b802 <SWAPBYTE>
 800c40a:	4603      	mov	r3, r0
 800c40c:	461a      	mov	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	80da      	strh	r2, [r3, #6]
}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b082      	sub	sp, #8
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c424:	2180      	movs	r1, #128	@ 0x80
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fd6e 	bl	800cf08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c42c:	2100      	movs	r1, #0
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fd6a 	bl	800cf08 <USBD_LL_StallEP>
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d042      	beq.n	800c4d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f000 f842 	bl	800c4e0 <USBD_GetLen>
 800c45c:	4603      	mov	r3, r0
 800c45e:	3301      	adds	r3, #1
 800c460:	005b      	lsls	r3, r3, #1
 800c462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c466:	d808      	bhi.n	800c47a <USBD_GetString+0x3e>
 800c468:	6938      	ldr	r0, [r7, #16]
 800c46a:	f000 f839 	bl	800c4e0 <USBD_GetLen>
 800c46e:	4603      	mov	r3, r0
 800c470:	3301      	adds	r3, #1
 800c472:	b29b      	uxth	r3, r3
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	b29a      	uxth	r2, r3
 800c478:	e001      	b.n	800c47e <USBD_GetString+0x42>
 800c47a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	4413      	add	r3, r2
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7812      	ldrb	r2, [r2, #0]
 800c48c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	3301      	adds	r3, #1
 800c492:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	2203      	movs	r2, #3
 800c49c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4a4:	e013      	b.n	800c4ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	7812      	ldrb	r2, [r2, #0]
 800c4b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	613b      	str	r3, [r7, #16]
    idx++;
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e7      	bne.n	800c4a6 <USBD_GetString+0x6a>
 800c4d6:	e000      	b.n	800c4da <USBD_GetString+0x9e>
    return;
 800c4d8:	bf00      	nop
  }
}
 800c4da:	3718      	adds	r7, #24
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4f0:	e005      	b.n	800c4fe <USBD_GetLen+0x1e>
  {
    len++;
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1f5      	bne.n	800c4f2 <USBD_GetLen+0x12>
  }

  return len;
 800c506:	7bfb      	ldrb	r3, [r7, #15]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3714      	adds	r7, #20
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2202      	movs	r2, #2
 800c524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	2100      	movs	r1, #0
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f000 fd6d 	bl	800d01a <USBD_LL_Transmit>

  return USBD_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	2100      	movs	r1, #0
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f000 fd5c 	bl	800d01a <USBD_LL_Transmit>

  return USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2203      	movs	r2, #3
 800c57c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	2100      	movs	r1, #0
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 fd60 	bl	800d05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 fd4f 	bl	800d05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2204      	movs	r2, #4
 800c5d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5d8:	2300      	movs	r3, #0
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2100      	movs	r1, #0
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fd1b 	bl	800d01a <USBD_LL_Transmit>

  return USBD_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b082      	sub	sp, #8
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2205      	movs	r2, #5
 800c5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5fe:	2300      	movs	r3, #0
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fd29 	bl	800d05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c618:	2200      	movs	r2, #0
 800c61a:	4912      	ldr	r1, [pc, #72]	@ (800c664 <MX_USB_DEVICE_Init+0x50>)
 800c61c:	4812      	ldr	r0, [pc, #72]	@ (800c668 <MX_USB_DEVICE_Init+0x54>)
 800c61e:	f7fe fccd 	bl	800afbc <USBD_Init>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c628:	f7f6 fd56 	bl	80030d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c62c:	490f      	ldr	r1, [pc, #60]	@ (800c66c <MX_USB_DEVICE_Init+0x58>)
 800c62e:	480e      	ldr	r0, [pc, #56]	@ (800c668 <MX_USB_DEVICE_Init+0x54>)
 800c630:	f7fe fcf4 	bl	800b01c <USBD_RegisterClass>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c63a:	f7f6 fd4d 	bl	80030d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c63e:	490c      	ldr	r1, [pc, #48]	@ (800c670 <MX_USB_DEVICE_Init+0x5c>)
 800c640:	4809      	ldr	r0, [pc, #36]	@ (800c668 <MX_USB_DEVICE_Init+0x54>)
 800c642:	f7fe fbeb 	bl	800ae1c <USBD_CDC_RegisterInterface>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c64c:	f7f6 fd44 	bl	80030d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c650:	4805      	ldr	r0, [pc, #20]	@ (800c668 <MX_USB_DEVICE_Init+0x54>)
 800c652:	f7fe fd19 	bl	800b088 <USBD_Start>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c65c:	f7f6 fd3c 	bl	80030d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c660:	bf00      	nop
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200001f0 	.word	0x200001f0
 800c668:	20000da8 	.word	0x20000da8
 800c66c:	2000015c 	.word	0x2000015c
 800c670:	200001dc 	.word	0x200001dc

0800c674 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c678:	2200      	movs	r2, #0
 800c67a:	4905      	ldr	r1, [pc, #20]	@ (800c690 <CDC_Init_FS+0x1c>)
 800c67c:	4805      	ldr	r0, [pc, #20]	@ (800c694 <CDC_Init_FS+0x20>)
 800c67e:	f7fe fbe7 	bl	800ae50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c682:	4905      	ldr	r1, [pc, #20]	@ (800c698 <CDC_Init_FS+0x24>)
 800c684:	4803      	ldr	r0, [pc, #12]	@ (800c694 <CDC_Init_FS+0x20>)
 800c686:	f7fe fc05 	bl	800ae94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c68a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	20001884 	.word	0x20001884
 800c694:	20000da8 	.word	0x20000da8
 800c698:	20001084 	.word	0x20001084

0800c69c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c69c:	b480      	push	{r7}
 800c69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	71fb      	strb	r3, [r7, #7]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b23      	cmp	r3, #35	@ 0x23
 800c6c0:	d84a      	bhi.n	800c758 <CDC_Control_FS+0xac>
 800c6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c6c8 <CDC_Control_FS+0x1c>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c759 	.word	0x0800c759
 800c6cc:	0800c759 	.word	0x0800c759
 800c6d0:	0800c759 	.word	0x0800c759
 800c6d4:	0800c759 	.word	0x0800c759
 800c6d8:	0800c759 	.word	0x0800c759
 800c6dc:	0800c759 	.word	0x0800c759
 800c6e0:	0800c759 	.word	0x0800c759
 800c6e4:	0800c759 	.word	0x0800c759
 800c6e8:	0800c759 	.word	0x0800c759
 800c6ec:	0800c759 	.word	0x0800c759
 800c6f0:	0800c759 	.word	0x0800c759
 800c6f4:	0800c759 	.word	0x0800c759
 800c6f8:	0800c759 	.word	0x0800c759
 800c6fc:	0800c759 	.word	0x0800c759
 800c700:	0800c759 	.word	0x0800c759
 800c704:	0800c759 	.word	0x0800c759
 800c708:	0800c759 	.word	0x0800c759
 800c70c:	0800c759 	.word	0x0800c759
 800c710:	0800c759 	.word	0x0800c759
 800c714:	0800c759 	.word	0x0800c759
 800c718:	0800c759 	.word	0x0800c759
 800c71c:	0800c759 	.word	0x0800c759
 800c720:	0800c759 	.word	0x0800c759
 800c724:	0800c759 	.word	0x0800c759
 800c728:	0800c759 	.word	0x0800c759
 800c72c:	0800c759 	.word	0x0800c759
 800c730:	0800c759 	.word	0x0800c759
 800c734:	0800c759 	.word	0x0800c759
 800c738:	0800c759 	.word	0x0800c759
 800c73c:	0800c759 	.word	0x0800c759
 800c740:	0800c759 	.word	0x0800c759
 800c744:	0800c759 	.word	0x0800c759
 800c748:	0800c759 	.word	0x0800c759
 800c74c:	0800c759 	.word	0x0800c759
 800c750:	0800c759 	.word	0x0800c759
 800c754:	0800c759 	.word	0x0800c759
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c758:	bf00      	nop
  }

  return (USBD_OK);
 800c75a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	4830      	ldr	r0, [pc, #192]	@ (800c838 <CDC_Receive_FS+0xd0>)
 800c776:	f7fe fb8d 	bl	800ae94 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c77a:	482f      	ldr	r0, [pc, #188]	@ (800c838 <CDC_Receive_FS+0xd0>)
 800c77c:	f7fe fbe8 	bl	800af50 <USBD_CDC_ReceivePacket>

    memset(usbBuffer, '\0', 64); // clear the buffer
 800c780:	2240      	movs	r2, #64	@ 0x40
 800c782:	2100      	movs	r1, #0
 800c784:	482d      	ldr	r0, [pc, #180]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c786:	f000 fd63 	bl	800d250 <memset>
    uint8_t len = (uint8_t)*Len;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	75fb      	strb	r3, [r7, #23]
    memcpy(usbBuffer, Buf, len); // copy the data to the buffer
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	461a      	mov	r2, r3
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	4829      	ldr	r0, [pc, #164]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c798:	f000 fd8e 	bl	800d2b8 <memcpy>
    memset(Buf, '\0', len); // clear the Buf also
 800c79c:	7dfb      	ldrb	r3, [r7, #23]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fd54 	bl	800d250 <memset>

    // Check if valid command packet (7 bytes with 'S' command)
    if(len == 7 && usbBuffer[0] == 'S') {
 800c7a8:	7dfb      	ldrb	r3, [r7, #23]
 800c7aa:	2b07      	cmp	r3, #7
 800c7ac:	d13f      	bne.n	800c82e <CDC_Receive_FS+0xc6>
 800c7ae:	4b23      	ldr	r3, [pc, #140]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b53      	cmp	r3, #83	@ 0x53
 800c7b4:	d13b      	bne.n	800c82e <CDC_Receive_FS+0xc6>
        uint8_t motors[] = {0x02, 0x06, 0x08};  // Array of motor IDs
 800c7b6:	4a22      	ldr	r2, [pc, #136]	@ (800c840 <CDC_Receive_FS+0xd8>)
 800c7b8:	f107 030c 	add.w	r3, r7, #12
 800c7bc:	6812      	ldr	r2, [r2, #0]
 800c7be:	4611      	mov	r1, r2
 800c7c0:	8019      	strh	r1, [r3, #0]
 800c7c2:	3302      	adds	r3, #2
 800c7c4:	0c12      	lsrs	r2, r2, #16
 800c7c6:	701a      	strb	r2, [r3, #0]

        // Extract motor positions from packet - combine both methods for consistency
        uint16_t motor2_pos = (uint16_t)usbBuffer[1] | ((uint16_t)usbBuffer[2] << 8);
 800c7c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7ca:	785b      	ldrb	r3, [r3, #1]
 800c7cc:	b21a      	sxth	r2, r3
 800c7ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7d0:	789b      	ldrb	r3, [r3, #2]
 800c7d2:	021b      	lsls	r3, r3, #8
 800c7d4:	b21b      	sxth	r3, r3
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	b21b      	sxth	r3, r3
 800c7da:	82bb      	strh	r3, [r7, #20]
        uint16_t motor6_pos = (uint16_t)usbBuffer[3] | ((uint16_t)usbBuffer[4] << 8);
 800c7dc:	4b17      	ldr	r3, [pc, #92]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7de:	78db      	ldrb	r3, [r3, #3]
 800c7e0:	b21a      	sxth	r2, r3
 800c7e2:	4b16      	ldr	r3, [pc, #88]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	021b      	lsls	r3, r3, #8
 800c7e8:	b21b      	sxth	r3, r3
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	b21b      	sxth	r3, r3
 800c7ee:	827b      	strh	r3, [r7, #18]
        uint16_t motor8_pos = (uint16_t)usbBuffer[5] | ((uint16_t)usbBuffer[6] << 8);
 800c7f0:	4b12      	ldr	r3, [pc, #72]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7f2:	795b      	ldrb	r3, [r3, #5]
 800c7f4:	b21a      	sxth	r2, r3
 800c7f6:	4b11      	ldr	r3, [pc, #68]	@ (800c83c <CDC_Receive_FS+0xd4>)
 800c7f8:	799b      	ldrb	r3, [r3, #6]
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	b21b      	sxth	r3, r3
 800c7fe:	4313      	orrs	r3, r2
 800c800:	b21b      	sxth	r3, r3
 800c802:	823b      	strh	r3, [r7, #16]

        // Set positions for motors using consistent approach
        setServoPosition(motors[0], motor2_pos);
 800c804:	7b3b      	ldrb	r3, [r7, #12]
 800c806:	461a      	mov	r2, r3
 800c808:	8abb      	ldrh	r3, [r7, #20]
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7f5 fad5 	bl	8001dbc <setServoPosition>

        setServoPosition(motors[1], motor6_pos);
 800c812:	7b7b      	ldrb	r3, [r7, #13]
 800c814:	461a      	mov	r2, r3
 800c816:	8a7b      	ldrh	r3, [r7, #18]
 800c818:	4619      	mov	r1, r3
 800c81a:	4610      	mov	r0, r2
 800c81c:	f7f5 face 	bl	8001dbc <setServoPosition>

        setServoPosition(motors[2], motor8_pos);
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	461a      	mov	r2, r3
 800c824:	8a3b      	ldrh	r3, [r7, #16]
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f7f5 fac7 	bl	8001dbc <setServoPosition>
    }

    return (USBD_OK);
 800c82e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	20000da8 	.word	0x20000da8
 800c83c:	20000d18 	.word	0x20000d18
 800c840:	0800dcd4 	.word	0x0800dcd4

0800c844 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	460b      	mov	r3, r1
 800c84e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c854:	4b0d      	ldr	r3, [pc, #52]	@ (800c88c <CDC_Transmit_FS+0x48>)
 800c856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c85a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c866:	2301      	movs	r3, #1
 800c868:	e00b      	b.n	800c882 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c86a:	887b      	ldrh	r3, [r7, #2]
 800c86c:	461a      	mov	r2, r3
 800c86e:	6879      	ldr	r1, [r7, #4]
 800c870:	4806      	ldr	r0, [pc, #24]	@ (800c88c <CDC_Transmit_FS+0x48>)
 800c872:	f7fe faed 	bl	800ae50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c876:	4805      	ldr	r0, [pc, #20]	@ (800c88c <CDC_Transmit_FS+0x48>)
 800c878:	f7fe fb2a 	bl	800aed0 <USBD_CDC_TransmitPacket>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c880:	7bfb      	ldrb	r3, [r7, #15]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20000da8 	.word	0x20000da8

0800c890 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c890:	b480      	push	{r7}
 800c892:	b087      	sub	sp, #28
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	4613      	mov	r3, r2
 800c89c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c8a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	371c      	adds	r7, #28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2212      	movs	r2, #18
 800c8c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c8c6:	4b03      	ldr	r3, [pc, #12]	@ (800c8d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	20000210 	.word	0x20000210

0800c8d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	6039      	str	r1, [r7, #0]
 800c8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2204      	movs	r2, #4
 800c8e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8ea:	4b03      	ldr	r3, [pc, #12]	@ (800c8f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	20000230 	.word	0x20000230

0800c8fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	4603      	mov	r3, r0
 800c904:	6039      	str	r1, [r7, #0]
 800c906:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c908:	79fb      	ldrb	r3, [r7, #7]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	4907      	ldr	r1, [pc, #28]	@ (800c930 <USBD_FS_ProductStrDescriptor+0x34>)
 800c912:	4808      	ldr	r0, [pc, #32]	@ (800c934 <USBD_FS_ProductStrDescriptor+0x38>)
 800c914:	f7ff fd92 	bl	800c43c <USBD_GetString>
 800c918:	e004      	b.n	800c924 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c91a:	683a      	ldr	r2, [r7, #0]
 800c91c:	4904      	ldr	r1, [pc, #16]	@ (800c930 <USBD_FS_ProductStrDescriptor+0x34>)
 800c91e:	4805      	ldr	r0, [pc, #20]	@ (800c934 <USBD_FS_ProductStrDescriptor+0x38>)
 800c920:	f7ff fd8c 	bl	800c43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c924:	4b02      	ldr	r3, [pc, #8]	@ (800c930 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c926:	4618      	mov	r0, r3
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20002084 	.word	0x20002084
 800c934:	0800dcd8 	.word	0x0800dcd8

0800c938 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	6039      	str	r1, [r7, #0]
 800c942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	4904      	ldr	r1, [pc, #16]	@ (800c958 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c948:	4804      	ldr	r0, [pc, #16]	@ (800c95c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c94a:	f7ff fd77 	bl	800c43c <USBD_GetString>
  return USBD_StrDesc;
 800c94e:	4b02      	ldr	r3, [pc, #8]	@ (800c958 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	20002084 	.word	0x20002084
 800c95c:	0800dcf0 	.word	0x0800dcf0

0800c960 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	6039      	str	r1, [r7, #0]
 800c96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	221a      	movs	r2, #26
 800c970:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c972:	f000 f855 	bl	800ca20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c976:	4b02      	ldr	r3, [pc, #8]	@ (800c980 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20000234 	.word	0x20000234

0800c984 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	6039      	str	r1, [r7, #0]
 800c98e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d105      	bne.n	800c9a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4907      	ldr	r1, [pc, #28]	@ (800c9b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c99a:	4808      	ldr	r0, [pc, #32]	@ (800c9bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c99c:	f7ff fd4e 	bl	800c43c <USBD_GetString>
 800c9a0:	e004      	b.n	800c9ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	4904      	ldr	r1, [pc, #16]	@ (800c9b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c9a6:	4805      	ldr	r0, [pc, #20]	@ (800c9bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c9a8:	f7ff fd48 	bl	800c43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9ac:	4b02      	ldr	r3, [pc, #8]	@ (800c9b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20002084 	.word	0x20002084
 800c9bc:	0800dd04 	.word	0x0800dd04

0800c9c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9cc:	79fb      	ldrb	r3, [r7, #7]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d105      	bne.n	800c9de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	4907      	ldr	r1, [pc, #28]	@ (800c9f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9d6:	4808      	ldr	r0, [pc, #32]	@ (800c9f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9d8:	f7ff fd30 	bl	800c43c <USBD_GetString>
 800c9dc:	e004      	b.n	800c9e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	4904      	ldr	r1, [pc, #16]	@ (800c9f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9e2:	4805      	ldr	r0, [pc, #20]	@ (800c9f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9e4:	f7ff fd2a 	bl	800c43c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9e8:	4b02      	ldr	r3, [pc, #8]	@ (800c9f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20002084 	.word	0x20002084
 800c9f8:	0800dd10 	.word	0x0800dd10

0800c9fc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	4603      	mov	r3, r0
 800ca04:	6039      	str	r1, [r7, #0]
 800ca06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	220c      	movs	r2, #12
 800ca0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ca0e:	4b03      	ldr	r3, [pc, #12]	@ (800ca1c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	20000224 	.word	0x20000224

0800ca20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca26:	4b0f      	ldr	r3, [pc, #60]	@ (800ca64 <Get_SerialNum+0x44>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca68 <Get_SerialNum+0x48>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca32:	4b0e      	ldr	r3, [pc, #56]	@ (800ca6c <Get_SerialNum+0x4c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d009      	beq.n	800ca5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca46:	2208      	movs	r2, #8
 800ca48:	4909      	ldr	r1, [pc, #36]	@ (800ca70 <Get_SerialNum+0x50>)
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 f814 	bl	800ca78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca50:	2204      	movs	r2, #4
 800ca52:	4908      	ldr	r1, [pc, #32]	@ (800ca74 <Get_SerialNum+0x54>)
 800ca54:	68b8      	ldr	r0, [r7, #8]
 800ca56:	f000 f80f 	bl	800ca78 <IntToUnicode>
  }
}
 800ca5a:	bf00      	nop
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	1fff7a10 	.word	0x1fff7a10
 800ca68:	1fff7a14 	.word	0x1fff7a14
 800ca6c:	1fff7a18 	.word	0x1fff7a18
 800ca70:	20000236 	.word	0x20000236
 800ca74:	20000246 	.word	0x20000246

0800ca78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	4613      	mov	r3, r2
 800ca84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	75fb      	strb	r3, [r7, #23]
 800ca8e:	e027      	b.n	800cae0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	0f1b      	lsrs	r3, r3, #28
 800ca94:	2b09      	cmp	r3, #9
 800ca96:	d80b      	bhi.n	800cab0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	0f1b      	lsrs	r3, r3, #28
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	4619      	mov	r1, r3
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	440b      	add	r3, r1
 800caa8:	3230      	adds	r2, #48	@ 0x30
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	e00a      	b.n	800cac6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	0f1b      	lsrs	r3, r3, #28
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	005b      	lsls	r3, r3, #1
 800caba:	4619      	mov	r1, r3
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	440b      	add	r3, r1
 800cac0:	3237      	adds	r2, #55	@ 0x37
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	011b      	lsls	r3, r3, #4
 800caca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	3301      	adds	r3, #1
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	4413      	add	r3, r2
 800cad6:	2200      	movs	r2, #0
 800cad8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cada:	7dfb      	ldrb	r3, [r7, #23]
 800cadc:	3301      	adds	r3, #1
 800cade:	75fb      	strb	r3, [r7, #23]
 800cae0:	7dfa      	ldrb	r2, [r7, #23]
 800cae2:	79fb      	ldrb	r3, [r7, #7]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d3d3      	bcc.n	800ca90 <IntToUnicode+0x18>
  }
}
 800cae8:	bf00      	nop
 800caea:	bf00      	nop
 800caec:	371c      	adds	r7, #28
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
	...

0800caf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b0a0      	sub	sp, #128	@ 0x80
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb00:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	605a      	str	r2, [r3, #4]
 800cb0a:	609a      	str	r2, [r3, #8]
 800cb0c:	60da      	str	r2, [r3, #12]
 800cb0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb10:	f107 0310 	add.w	r3, r7, #16
 800cb14:	225c      	movs	r2, #92	@ 0x5c
 800cb16:	2100      	movs	r1, #0
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f000 fb99 	bl	800d250 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb26:	d149      	bne.n	800cbbc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cb28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cb32:	f107 0310 	add.w	r3, r7, #16
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7f8 fe7a 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cb42:	f7f6 fac9 	bl	80030d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb46:	2300      	movs	r3, #0
 800cb48:	60fb      	str	r3, [r7, #12]
 800cb4a:	4b1e      	ldr	r3, [pc, #120]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4e:	4a1d      	ldr	r2, [pc, #116]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb50:	f043 0301 	orr.w	r3, r3, #1
 800cb54:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb56:	4b1b      	ldr	r3, [pc, #108]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb62:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cb66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb68:	2302      	movs	r3, #2
 800cb6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb70:	2303      	movs	r3, #3
 800cb72:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cb74:	230a      	movs	r3, #10
 800cb76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4812      	ldr	r0, [pc, #72]	@ (800cbc8 <HAL_PCD_MspInit+0xd0>)
 800cb80:	f7f6 ffac 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb84:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb88:	4a0e      	ldr	r2, [pc, #56]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb8e:	6353      	str	r3, [r2, #52]	@ 0x34
 800cb90:	2300      	movs	r3, #0
 800cb92:	60bb      	str	r3, [r7, #8]
 800cb94:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb98:	4a0a      	ldr	r2, [pc, #40]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cb9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb9e:	6453      	str	r3, [r2, #68]	@ 0x44
 800cba0:	4b08      	ldr	r3, [pc, #32]	@ (800cbc4 <HAL_PCD_MspInit+0xcc>)
 800cba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cba8:	60bb      	str	r3, [r7, #8]
 800cbaa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cbac:	2200      	movs	r2, #0
 800cbae:	2100      	movs	r1, #0
 800cbb0:	2043      	movs	r0, #67	@ 0x43
 800cbb2:	f7f6 ff5c 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cbb6:	2043      	movs	r0, #67	@ 0x43
 800cbb8:	f7f6 ff75 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cbbc:	bf00      	nop
 800cbbe:	3780      	adds	r7, #128	@ 0x80
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	40023800 	.word	0x40023800
 800cbc8:	40020000 	.word	0x40020000

0800cbcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	f7fe fa9d 	bl	800b122 <USBD_LL_SetupStage>
}
 800cbe8:	bf00      	nop
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc02:	78fa      	ldrb	r2, [r7, #3]
 800cc04:	6879      	ldr	r1, [r7, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	00db      	lsls	r3, r3, #3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	440b      	add	r3, r1
 800cc10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f7fe fad7 	bl	800b1cc <USBD_LL_DataOutStage>
}
 800cc1e:	bf00      	nop
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b082      	sub	sp, #8
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc38:	78fa      	ldrb	r2, [r7, #3]
 800cc3a:	6879      	ldr	r1, [r7, #4]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	4413      	add	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	440b      	add	r3, r1
 800cc46:	3320      	adds	r3, #32
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	f7fe fb70 	bl	800b332 <USBD_LL_DataInStage>
}
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fe fcaa 	bl	800b5c2 <USBD_LL_SOF>
}
 800cc6e:	bf00      	nop
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b084      	sub	sp, #16
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	79db      	ldrb	r3, [r3, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d102      	bne.n	800cc90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	73fb      	strb	r3, [r7, #15]
 800cc8e:	e008      	b.n	800cca2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	79db      	ldrb	r3, [r3, #7]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d102      	bne.n	800cc9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	73fb      	strb	r3, [r7, #15]
 800cc9c:	e001      	b.n	800cca2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc9e:	f7f6 fa1b 	bl	80030d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cca8:	7bfa      	ldrb	r2, [r7, #15]
 800ccaa:	4611      	mov	r1, r2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fe fc44 	bl	800b53a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fe fbec 	bl	800b496 <USBD_LL_Reset>
}
 800ccbe:	bf00      	nop
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe fc3f 	bl	800b55a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	6812      	ldr	r2, [r2, #0]
 800ccea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ccee:	f043 0301 	orr.w	r3, r3, #1
 800ccf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	7adb      	ldrb	r3, [r3, #11]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ccfc:	4b04      	ldr	r3, [pc, #16]	@ (800cd10 <HAL_PCD_SuspendCallback+0x48>)
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	4a03      	ldr	r2, [pc, #12]	@ (800cd10 <HAL_PCD_SuspendCallback+0x48>)
 800cd02:	f043 0306 	orr.w	r3, r3, #6
 800cd06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	e000ed00 	.word	0xe000ed00

0800cd14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe fc35 	bl	800b592 <USBD_LL_Resume>
}
 800cd28:	bf00      	nop
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd42:	78fa      	ldrb	r2, [r7, #3]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fc8d 	bl	800b666 <USBD_LL_IsoOUTIncomplete>
}
 800cd4c:	bf00      	nop
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd66:	78fa      	ldrb	r2, [r7, #3]
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fe fc49 	bl	800b602 <USBD_LL_IsoINIncomplete>
}
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fc9f 	bl	800b6ca <USBD_LL_DevConnected>
}
 800cd8c:	bf00      	nop
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fe fc9c 	bl	800b6e0 <USBD_LL_DevDisconnected>
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d13c      	bne.n	800ce3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cdc0:	4a20      	ldr	r2, [pc, #128]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a1e      	ldr	r2, [pc, #120]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdcc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cdd0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cdd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdda:	2206      	movs	r2, #6
 800cddc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cdde:	4b19      	ldr	r3, [pc, #100]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cde0:	2202      	movs	r2, #2
 800cde2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cde4:	4b17      	ldr	r3, [pc, #92]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdea:	4b16      	ldr	r3, [pc, #88]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdec:	2202      	movs	r2, #2
 800cdee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cdf0:	4b14      	ldr	r3, [pc, #80]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cdf6:	4b13      	ldr	r3, [pc, #76]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cdfc:	4b11      	ldr	r3, [pc, #68]	@ (800ce44 <USBD_LL_Init+0x94>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ce02:	4b10      	ldr	r3, [pc, #64]	@ (800ce44 <USBD_LL_Init+0x94>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ce08:	4b0e      	ldr	r3, [pc, #56]	@ (800ce44 <USBD_LL_Init+0x94>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ce0e:	480d      	ldr	r0, [pc, #52]	@ (800ce44 <USBD_LL_Init+0x94>)
 800ce10:	f7f7 f956 	bl	80040c0 <HAL_PCD_Init>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ce1a:	f7f6 f95d 	bl	80030d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ce1e:	2180      	movs	r1, #128	@ 0x80
 800ce20:	4808      	ldr	r0, [pc, #32]	@ (800ce44 <USBD_LL_Init+0x94>)
 800ce22:	f7f8 fbb6 	bl	8005592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ce26:	2240      	movs	r2, #64	@ 0x40
 800ce28:	2100      	movs	r1, #0
 800ce2a:	4806      	ldr	r0, [pc, #24]	@ (800ce44 <USBD_LL_Init+0x94>)
 800ce2c:	f7f8 fb6a 	bl	8005504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ce30:	2280      	movs	r2, #128	@ 0x80
 800ce32:	2101      	movs	r1, #1
 800ce34:	4803      	ldr	r0, [pc, #12]	@ (800ce44 <USBD_LL_Init+0x94>)
 800ce36:	f7f8 fb65 	bl	8005504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	20002284 	.word	0x20002284

0800ce48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f7 fa44 	bl	80042ec <HAL_PCD_Start>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f000 f990 	bl	800d190 <USBD_Get_USB_Status>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
 800ce86:	4608      	mov	r0, r1
 800ce88:	4611      	mov	r1, r2
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	70fb      	strb	r3, [r7, #3]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70bb      	strb	r3, [r7, #2]
 800ce94:	4613      	mov	r3, r2
 800ce96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cea6:	78bb      	ldrb	r3, [r7, #2]
 800cea8:	883a      	ldrh	r2, [r7, #0]
 800ceaa:	78f9      	ldrb	r1, [r7, #3]
 800ceac:	f7f7 ff45 	bl	8004d3a <HAL_PCD_EP_Open>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 f96a 	bl	800d190 <USBD_Get_USB_Status>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b084      	sub	sp, #16
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	460b      	mov	r3, r1
 800ced4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cee4:	78fa      	ldrb	r2, [r7, #3]
 800cee6:	4611      	mov	r1, r2
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7f7 ff90 	bl	8004e0e <HAL_PCD_EP_Close>
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	4618      	mov	r0, r3
 800cef6:	f000 f94b 	bl	800d190 <USBD_Get_USB_Status>
 800cefa:	4603      	mov	r3, r0
 800cefc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cefe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf22:	78fa      	ldrb	r2, [r7, #3]
 800cf24:	4611      	mov	r1, r2
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7f8 f848 	bl	8004fbc <HAL_PCD_EP_SetStall>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf30:	7bfb      	ldrb	r3, [r7, #15]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 f92c 	bl	800d190 <USBD_Get_USB_Status>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	460b      	mov	r3, r1
 800cf50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf60:	78fa      	ldrb	r2, [r7, #3]
 800cf62:	4611      	mov	r1, r2
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7f8 f88c 	bl	8005082 <HAL_PCD_EP_ClrStall>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 f90d 	bl	800d190 <USBD_Get_USB_Status>
 800cf76:	4603      	mov	r3, r0
 800cf78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b085      	sub	sp, #20
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	da0b      	bge.n	800cfb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cfa0:	78fb      	ldrb	r3, [r7, #3]
 800cfa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfa6:	68f9      	ldr	r1, [r7, #12]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	00db      	lsls	r3, r3, #3
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	440b      	add	r3, r1
 800cfb2:	3316      	adds	r3, #22
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	e00b      	b.n	800cfd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfbe:	68f9      	ldr	r1, [r7, #12]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	4413      	add	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	440b      	add	r3, r1
 800cfca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cfce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cff6:	78fa      	ldrb	r2, [r7, #3]
 800cff8:	4611      	mov	r1, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7f7 fe79 	bl	8004cf2 <HAL_PCD_SetAddress>
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	4618      	mov	r0, r3
 800d008:	f000 f8c2 	bl	800d190 <USBD_Get_USB_Status>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d010:	7bbb      	ldrb	r3, [r7, #14]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b086      	sub	sp, #24
 800d01e:	af00      	add	r7, sp, #0
 800d020:	60f8      	str	r0, [r7, #12]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	603b      	str	r3, [r7, #0]
 800d026:	460b      	mov	r3, r1
 800d028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d038:	7af9      	ldrb	r1, [r7, #11]
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	f7f7 ff83 	bl	8004f48 <HAL_PCD_EP_Transmit>
 800d042:	4603      	mov	r3, r0
 800d044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d046:	7dfb      	ldrb	r3, [r7, #23]
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 f8a1 	bl	800d190 <USBD_Get_USB_Status>
 800d04e:	4603      	mov	r3, r0
 800d050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d052:	7dbb      	ldrb	r3, [r7, #22]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3718      	adds	r7, #24
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	607a      	str	r2, [r7, #4]
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	460b      	mov	r3, r1
 800d06a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d06c:	2300      	movs	r3, #0
 800d06e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d07a:	7af9      	ldrb	r1, [r7, #11]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	f7f7 ff0f 	bl	8004ea2 <HAL_PCD_EP_Receive>
 800d084:	4603      	mov	r3, r0
 800d086:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 f880 	bl	800d190 <USBD_Get_USB_Status>
 800d090:	4603      	mov	r3, r0
 800d092:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d094:	7dbb      	ldrb	r3, [r7, #22]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3718      	adds	r7, #24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b082      	sub	sp, #8
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0b0:	78fa      	ldrb	r2, [r7, #3]
 800d0b2:	4611      	mov	r1, r2
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f7 ff2f 	bl	8004f18 <HAL_PCD_EP_GetRxCount>
 800d0ba:	4603      	mov	r3, r0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <HAL_PCDEx_LPM_Callback+0x18>
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d01f      	beq.n	800d11a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d0da:	e03b      	b.n	800d154 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7adb      	ldrb	r3, [r3, #11]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d0e4:	f7f5 fc68 	bl	80029b8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d15c <HAL_PCDEx_LPM_Callback+0x98>)
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	4a1b      	ldr	r2, [pc, #108]	@ (800d15c <HAL_PCDEx_LPM_Callback+0x98>)
 800d0ee:	f023 0306 	bic.w	r3, r3, #6
 800d0f2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	6812      	ldr	r2, [r2, #0]
 800d102:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d106:	f023 0301 	bic.w	r3, r3, #1
 800d10a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe fa3d 	bl	800b592 <USBD_LL_Resume>
    break;
 800d118:	e01c      	b.n	800d154 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	6812      	ldr	r2, [r2, #0]
 800d128:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d12c:	f043 0301 	orr.w	r3, r3, #1
 800d130:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fa0e 	bl	800b55a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	7adb      	ldrb	r3, [r3, #11]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d005      	beq.n	800d152 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d146:	4b05      	ldr	r3, [pc, #20]	@ (800d15c <HAL_PCDEx_LPM_Callback+0x98>)
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	4a04      	ldr	r2, [pc, #16]	@ (800d15c <HAL_PCDEx_LPM_Callback+0x98>)
 800d14c:	f043 0306 	orr.w	r3, r3, #6
 800d150:	6113      	str	r3, [r2, #16]
    break;
 800d152:	bf00      	nop
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	e000ed00 	.word	0xe000ed00

0800d160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d168:	4b03      	ldr	r3, [pc, #12]	@ (800d178 <USBD_static_malloc+0x18>)
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	20002768 	.word	0x20002768

0800d17c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]

}
 800d184:	bf00      	nop
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d19e:	79fb      	ldrb	r3, [r7, #7]
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d817      	bhi.n	800d1d4 <USBD_Get_USB_Status+0x44>
 800d1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d1ac <USBD_Get_USB_Status+0x1c>)
 800d1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1aa:	bf00      	nop
 800d1ac:	0800d1bd 	.word	0x0800d1bd
 800d1b0:	0800d1c3 	.word	0x0800d1c3
 800d1b4:	0800d1c9 	.word	0x0800d1c9
 800d1b8:	0800d1cf 	.word	0x0800d1cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c0:	e00b      	b.n	800d1da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c6:	e008      	b.n	800d1da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d1cc:	e005      	b.n	800d1da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d2:	e002      	b.n	800d1da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d8:	bf00      	nop
  }
  return usb_status;
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <sniprintf>:
 800d1e8:	b40c      	push	{r2, r3}
 800d1ea:	b530      	push	{r4, r5, lr}
 800d1ec:	4b17      	ldr	r3, [pc, #92]	@ (800d24c <sniprintf+0x64>)
 800d1ee:	1e0c      	subs	r4, r1, #0
 800d1f0:	681d      	ldr	r5, [r3, #0]
 800d1f2:	b09d      	sub	sp, #116	@ 0x74
 800d1f4:	da08      	bge.n	800d208 <sniprintf+0x20>
 800d1f6:	238b      	movs	r3, #139	@ 0x8b
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1fe:	b01d      	add	sp, #116	@ 0x74
 800d200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d204:	b002      	add	sp, #8
 800d206:	4770      	bx	lr
 800d208:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d20c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d210:	bf14      	ite	ne
 800d212:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d216:	4623      	moveq	r3, r4
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	9307      	str	r3, [sp, #28]
 800d21c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d220:	9002      	str	r0, [sp, #8]
 800d222:	9006      	str	r0, [sp, #24]
 800d224:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d228:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d22a:	ab21      	add	r3, sp, #132	@ 0x84
 800d22c:	a902      	add	r1, sp, #8
 800d22e:	4628      	mov	r0, r5
 800d230:	9301      	str	r3, [sp, #4]
 800d232:	f000 f8ab 	bl	800d38c <_svfiprintf_r>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	bfbc      	itt	lt
 800d23a:	238b      	movlt	r3, #139	@ 0x8b
 800d23c:	602b      	strlt	r3, [r5, #0]
 800d23e:	2c00      	cmp	r4, #0
 800d240:	d0dd      	beq.n	800d1fe <sniprintf+0x16>
 800d242:	9b02      	ldr	r3, [sp, #8]
 800d244:	2200      	movs	r2, #0
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	e7d9      	b.n	800d1fe <sniprintf+0x16>
 800d24a:	bf00      	nop
 800d24c:	20000250 	.word	0x20000250

0800d250 <memset>:
 800d250:	4402      	add	r2, r0
 800d252:	4603      	mov	r3, r0
 800d254:	4293      	cmp	r3, r2
 800d256:	d100      	bne.n	800d25a <memset+0xa>
 800d258:	4770      	bx	lr
 800d25a:	f803 1b01 	strb.w	r1, [r3], #1
 800d25e:	e7f9      	b.n	800d254 <memset+0x4>

0800d260 <__errno>:
 800d260:	4b01      	ldr	r3, [pc, #4]	@ (800d268 <__errno+0x8>)
 800d262:	6818      	ldr	r0, [r3, #0]
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop
 800d268:	20000250 	.word	0x20000250

0800d26c <__libc_init_array>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4d0d      	ldr	r5, [pc, #52]	@ (800d2a4 <__libc_init_array+0x38>)
 800d270:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a8 <__libc_init_array+0x3c>)
 800d272:	1b64      	subs	r4, r4, r5
 800d274:	10a4      	asrs	r4, r4, #2
 800d276:	2600      	movs	r6, #0
 800d278:	42a6      	cmp	r6, r4
 800d27a:	d109      	bne.n	800d290 <__libc_init_array+0x24>
 800d27c:	4d0b      	ldr	r5, [pc, #44]	@ (800d2ac <__libc_init_array+0x40>)
 800d27e:	4c0c      	ldr	r4, [pc, #48]	@ (800d2b0 <__libc_init_array+0x44>)
 800d280:	f000 fc66 	bl	800db50 <_init>
 800d284:	1b64      	subs	r4, r4, r5
 800d286:	10a4      	asrs	r4, r4, #2
 800d288:	2600      	movs	r6, #0
 800d28a:	42a6      	cmp	r6, r4
 800d28c:	d105      	bne.n	800d29a <__libc_init_array+0x2e>
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	f855 3b04 	ldr.w	r3, [r5], #4
 800d294:	4798      	blx	r3
 800d296:	3601      	adds	r6, #1
 800d298:	e7ee      	b.n	800d278 <__libc_init_array+0xc>
 800d29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29e:	4798      	blx	r3
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	e7f2      	b.n	800d28a <__libc_init_array+0x1e>
 800d2a4:	0800dd98 	.word	0x0800dd98
 800d2a8:	0800dd98 	.word	0x0800dd98
 800d2ac:	0800dd98 	.word	0x0800dd98
 800d2b0:	0800dd9c 	.word	0x0800dd9c

0800d2b4 <__retarget_lock_acquire_recursive>:
 800d2b4:	4770      	bx	lr

0800d2b6 <__retarget_lock_release_recursive>:
 800d2b6:	4770      	bx	lr

0800d2b8 <memcpy>:
 800d2b8:	440a      	add	r2, r1
 800d2ba:	4291      	cmp	r1, r2
 800d2bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d2c0:	d100      	bne.n	800d2c4 <memcpy+0xc>
 800d2c2:	4770      	bx	lr
 800d2c4:	b510      	push	{r4, lr}
 800d2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2ce:	4291      	cmp	r1, r2
 800d2d0:	d1f9      	bne.n	800d2c6 <memcpy+0xe>
 800d2d2:	bd10      	pop	{r4, pc}

0800d2d4 <__ssputs_r>:
 800d2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d8:	688e      	ldr	r6, [r1, #8]
 800d2da:	461f      	mov	r7, r3
 800d2dc:	42be      	cmp	r6, r7
 800d2de:	680b      	ldr	r3, [r1, #0]
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	4690      	mov	r8, r2
 800d2e6:	d82d      	bhi.n	800d344 <__ssputs_r+0x70>
 800d2e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2f0:	d026      	beq.n	800d340 <__ssputs_r+0x6c>
 800d2f2:	6965      	ldr	r5, [r4, #20]
 800d2f4:	6909      	ldr	r1, [r1, #16]
 800d2f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2fa:	eba3 0901 	sub.w	r9, r3, r1
 800d2fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d302:	1c7b      	adds	r3, r7, #1
 800d304:	444b      	add	r3, r9
 800d306:	106d      	asrs	r5, r5, #1
 800d308:	429d      	cmp	r5, r3
 800d30a:	bf38      	it	cc
 800d30c:	461d      	movcc	r5, r3
 800d30e:	0553      	lsls	r3, r2, #21
 800d310:	d527      	bpl.n	800d362 <__ssputs_r+0x8e>
 800d312:	4629      	mov	r1, r5
 800d314:	f000 f958 	bl	800d5c8 <_malloc_r>
 800d318:	4606      	mov	r6, r0
 800d31a:	b360      	cbz	r0, 800d376 <__ssputs_r+0xa2>
 800d31c:	6921      	ldr	r1, [r4, #16]
 800d31e:	464a      	mov	r2, r9
 800d320:	f7ff ffca 	bl	800d2b8 <memcpy>
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	6126      	str	r6, [r4, #16]
 800d332:	6165      	str	r5, [r4, #20]
 800d334:	444e      	add	r6, r9
 800d336:	eba5 0509 	sub.w	r5, r5, r9
 800d33a:	6026      	str	r6, [r4, #0]
 800d33c:	60a5      	str	r5, [r4, #8]
 800d33e:	463e      	mov	r6, r7
 800d340:	42be      	cmp	r6, r7
 800d342:	d900      	bls.n	800d346 <__ssputs_r+0x72>
 800d344:	463e      	mov	r6, r7
 800d346:	6820      	ldr	r0, [r4, #0]
 800d348:	4632      	mov	r2, r6
 800d34a:	4641      	mov	r1, r8
 800d34c:	f000 fb84 	bl	800da58 <memmove>
 800d350:	68a3      	ldr	r3, [r4, #8]
 800d352:	1b9b      	subs	r3, r3, r6
 800d354:	60a3      	str	r3, [r4, #8]
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	4433      	add	r3, r6
 800d35a:	6023      	str	r3, [r4, #0]
 800d35c:	2000      	movs	r0, #0
 800d35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d362:	462a      	mov	r2, r5
 800d364:	f000 fb4a 	bl	800d9fc <_realloc_r>
 800d368:	4606      	mov	r6, r0
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d1e0      	bne.n	800d330 <__ssputs_r+0x5c>
 800d36e:	6921      	ldr	r1, [r4, #16]
 800d370:	4650      	mov	r0, sl
 800d372:	f000 fb9b 	bl	800daac <_free_r>
 800d376:	230c      	movs	r3, #12
 800d378:	f8ca 3000 	str.w	r3, [sl]
 800d37c:	89a3      	ldrh	r3, [r4, #12]
 800d37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d382:	81a3      	strh	r3, [r4, #12]
 800d384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d388:	e7e9      	b.n	800d35e <__ssputs_r+0x8a>
	...

0800d38c <_svfiprintf_r>:
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	4698      	mov	r8, r3
 800d392:	898b      	ldrh	r3, [r1, #12]
 800d394:	061b      	lsls	r3, r3, #24
 800d396:	b09d      	sub	sp, #116	@ 0x74
 800d398:	4607      	mov	r7, r0
 800d39a:	460d      	mov	r5, r1
 800d39c:	4614      	mov	r4, r2
 800d39e:	d510      	bpl.n	800d3c2 <_svfiprintf_r+0x36>
 800d3a0:	690b      	ldr	r3, [r1, #16]
 800d3a2:	b973      	cbnz	r3, 800d3c2 <_svfiprintf_r+0x36>
 800d3a4:	2140      	movs	r1, #64	@ 0x40
 800d3a6:	f000 f90f 	bl	800d5c8 <_malloc_r>
 800d3aa:	6028      	str	r0, [r5, #0]
 800d3ac:	6128      	str	r0, [r5, #16]
 800d3ae:	b930      	cbnz	r0, 800d3be <_svfiprintf_r+0x32>
 800d3b0:	230c      	movs	r3, #12
 800d3b2:	603b      	str	r3, [r7, #0]
 800d3b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3b8:	b01d      	add	sp, #116	@ 0x74
 800d3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3be:	2340      	movs	r3, #64	@ 0x40
 800d3c0:	616b      	str	r3, [r5, #20]
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c6:	2320      	movs	r3, #32
 800d3c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3d0:	2330      	movs	r3, #48	@ 0x30
 800d3d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d570 <_svfiprintf_r+0x1e4>
 800d3d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3da:	f04f 0901 	mov.w	r9, #1
 800d3de:	4623      	mov	r3, r4
 800d3e0:	469a      	mov	sl, r3
 800d3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e6:	b10a      	cbz	r2, 800d3ec <_svfiprintf_r+0x60>
 800d3e8:	2a25      	cmp	r2, #37	@ 0x25
 800d3ea:	d1f9      	bne.n	800d3e0 <_svfiprintf_r+0x54>
 800d3ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d3f0:	d00b      	beq.n	800d40a <_svfiprintf_r+0x7e>
 800d3f2:	465b      	mov	r3, fp
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	f7ff ff6b 	bl	800d2d4 <__ssputs_r>
 800d3fe:	3001      	adds	r0, #1
 800d400:	f000 80a7 	beq.w	800d552 <_svfiprintf_r+0x1c6>
 800d404:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d406:	445a      	add	r2, fp
 800d408:	9209      	str	r2, [sp, #36]	@ 0x24
 800d40a:	f89a 3000 	ldrb.w	r3, [sl]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 809f 	beq.w	800d552 <_svfiprintf_r+0x1c6>
 800d414:	2300      	movs	r3, #0
 800d416:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d41a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d41e:	f10a 0a01 	add.w	sl, sl, #1
 800d422:	9304      	str	r3, [sp, #16]
 800d424:	9307      	str	r3, [sp, #28]
 800d426:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d42a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d42c:	4654      	mov	r4, sl
 800d42e:	2205      	movs	r2, #5
 800d430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d434:	484e      	ldr	r0, [pc, #312]	@ (800d570 <_svfiprintf_r+0x1e4>)
 800d436:	f7f2 feeb 	bl	8000210 <memchr>
 800d43a:	9a04      	ldr	r2, [sp, #16]
 800d43c:	b9d8      	cbnz	r0, 800d476 <_svfiprintf_r+0xea>
 800d43e:	06d0      	lsls	r0, r2, #27
 800d440:	bf44      	itt	mi
 800d442:	2320      	movmi	r3, #32
 800d444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d448:	0711      	lsls	r1, r2, #28
 800d44a:	bf44      	itt	mi
 800d44c:	232b      	movmi	r3, #43	@ 0x2b
 800d44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d452:	f89a 3000 	ldrb.w	r3, [sl]
 800d456:	2b2a      	cmp	r3, #42	@ 0x2a
 800d458:	d015      	beq.n	800d486 <_svfiprintf_r+0xfa>
 800d45a:	9a07      	ldr	r2, [sp, #28]
 800d45c:	4654      	mov	r4, sl
 800d45e:	2000      	movs	r0, #0
 800d460:	f04f 0c0a 	mov.w	ip, #10
 800d464:	4621      	mov	r1, r4
 800d466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46a:	3b30      	subs	r3, #48	@ 0x30
 800d46c:	2b09      	cmp	r3, #9
 800d46e:	d94b      	bls.n	800d508 <_svfiprintf_r+0x17c>
 800d470:	b1b0      	cbz	r0, 800d4a0 <_svfiprintf_r+0x114>
 800d472:	9207      	str	r2, [sp, #28]
 800d474:	e014      	b.n	800d4a0 <_svfiprintf_r+0x114>
 800d476:	eba0 0308 	sub.w	r3, r0, r8
 800d47a:	fa09 f303 	lsl.w	r3, r9, r3
 800d47e:	4313      	orrs	r3, r2
 800d480:	9304      	str	r3, [sp, #16]
 800d482:	46a2      	mov	sl, r4
 800d484:	e7d2      	b.n	800d42c <_svfiprintf_r+0xa0>
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	1d19      	adds	r1, r3, #4
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	9103      	str	r1, [sp, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfbb      	ittet	lt
 800d492:	425b      	neglt	r3, r3
 800d494:	f042 0202 	orrlt.w	r2, r2, #2
 800d498:	9307      	strge	r3, [sp, #28]
 800d49a:	9307      	strlt	r3, [sp, #28]
 800d49c:	bfb8      	it	lt
 800d49e:	9204      	strlt	r2, [sp, #16]
 800d4a0:	7823      	ldrb	r3, [r4, #0]
 800d4a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4a4:	d10a      	bne.n	800d4bc <_svfiprintf_r+0x130>
 800d4a6:	7863      	ldrb	r3, [r4, #1]
 800d4a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4aa:	d132      	bne.n	800d512 <_svfiprintf_r+0x186>
 800d4ac:	9b03      	ldr	r3, [sp, #12]
 800d4ae:	1d1a      	adds	r2, r3, #4
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	9203      	str	r2, [sp, #12]
 800d4b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4b8:	3402      	adds	r4, #2
 800d4ba:	9305      	str	r3, [sp, #20]
 800d4bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d580 <_svfiprintf_r+0x1f4>
 800d4c0:	7821      	ldrb	r1, [r4, #0]
 800d4c2:	2203      	movs	r2, #3
 800d4c4:	4650      	mov	r0, sl
 800d4c6:	f7f2 fea3 	bl	8000210 <memchr>
 800d4ca:	b138      	cbz	r0, 800d4dc <_svfiprintf_r+0x150>
 800d4cc:	9b04      	ldr	r3, [sp, #16]
 800d4ce:	eba0 000a 	sub.w	r0, r0, sl
 800d4d2:	2240      	movs	r2, #64	@ 0x40
 800d4d4:	4082      	lsls	r2, r0
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	3401      	adds	r4, #1
 800d4da:	9304      	str	r3, [sp, #16]
 800d4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e0:	4824      	ldr	r0, [pc, #144]	@ (800d574 <_svfiprintf_r+0x1e8>)
 800d4e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4e6:	2206      	movs	r2, #6
 800d4e8:	f7f2 fe92 	bl	8000210 <memchr>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d036      	beq.n	800d55e <_svfiprintf_r+0x1d2>
 800d4f0:	4b21      	ldr	r3, [pc, #132]	@ (800d578 <_svfiprintf_r+0x1ec>)
 800d4f2:	bb1b      	cbnz	r3, 800d53c <_svfiprintf_r+0x1b0>
 800d4f4:	9b03      	ldr	r3, [sp, #12]
 800d4f6:	3307      	adds	r3, #7
 800d4f8:	f023 0307 	bic.w	r3, r3, #7
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	9303      	str	r3, [sp, #12]
 800d500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d502:	4433      	add	r3, r6
 800d504:	9309      	str	r3, [sp, #36]	@ 0x24
 800d506:	e76a      	b.n	800d3de <_svfiprintf_r+0x52>
 800d508:	fb0c 3202 	mla	r2, ip, r2, r3
 800d50c:	460c      	mov	r4, r1
 800d50e:	2001      	movs	r0, #1
 800d510:	e7a8      	b.n	800d464 <_svfiprintf_r+0xd8>
 800d512:	2300      	movs	r3, #0
 800d514:	3401      	adds	r4, #1
 800d516:	9305      	str	r3, [sp, #20]
 800d518:	4619      	mov	r1, r3
 800d51a:	f04f 0c0a 	mov.w	ip, #10
 800d51e:	4620      	mov	r0, r4
 800d520:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d524:	3a30      	subs	r2, #48	@ 0x30
 800d526:	2a09      	cmp	r2, #9
 800d528:	d903      	bls.n	800d532 <_svfiprintf_r+0x1a6>
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d0c6      	beq.n	800d4bc <_svfiprintf_r+0x130>
 800d52e:	9105      	str	r1, [sp, #20]
 800d530:	e7c4      	b.n	800d4bc <_svfiprintf_r+0x130>
 800d532:	fb0c 2101 	mla	r1, ip, r1, r2
 800d536:	4604      	mov	r4, r0
 800d538:	2301      	movs	r3, #1
 800d53a:	e7f0      	b.n	800d51e <_svfiprintf_r+0x192>
 800d53c:	ab03      	add	r3, sp, #12
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	462a      	mov	r2, r5
 800d542:	4b0e      	ldr	r3, [pc, #56]	@ (800d57c <_svfiprintf_r+0x1f0>)
 800d544:	a904      	add	r1, sp, #16
 800d546:	4638      	mov	r0, r7
 800d548:	f3af 8000 	nop.w
 800d54c:	1c42      	adds	r2, r0, #1
 800d54e:	4606      	mov	r6, r0
 800d550:	d1d6      	bne.n	800d500 <_svfiprintf_r+0x174>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	065b      	lsls	r3, r3, #25
 800d556:	f53f af2d 	bmi.w	800d3b4 <_svfiprintf_r+0x28>
 800d55a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d55c:	e72c      	b.n	800d3b8 <_svfiprintf_r+0x2c>
 800d55e:	ab03      	add	r3, sp, #12
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	462a      	mov	r2, r5
 800d564:	4b05      	ldr	r3, [pc, #20]	@ (800d57c <_svfiprintf_r+0x1f0>)
 800d566:	a904      	add	r1, sp, #16
 800d568:	4638      	mov	r0, r7
 800d56a:	f000 f91b 	bl	800d7a4 <_printf_i>
 800d56e:	e7ed      	b.n	800d54c <_svfiprintf_r+0x1c0>
 800d570:	0800dd5c 	.word	0x0800dd5c
 800d574:	0800dd66 	.word	0x0800dd66
 800d578:	00000000 	.word	0x00000000
 800d57c:	0800d2d5 	.word	0x0800d2d5
 800d580:	0800dd62 	.word	0x0800dd62

0800d584 <sbrk_aligned>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	4e0f      	ldr	r6, [pc, #60]	@ (800d5c4 <sbrk_aligned+0x40>)
 800d588:	460c      	mov	r4, r1
 800d58a:	6831      	ldr	r1, [r6, #0]
 800d58c:	4605      	mov	r5, r0
 800d58e:	b911      	cbnz	r1, 800d596 <sbrk_aligned+0x12>
 800d590:	f000 fa7c 	bl	800da8c <_sbrk_r>
 800d594:	6030      	str	r0, [r6, #0]
 800d596:	4621      	mov	r1, r4
 800d598:	4628      	mov	r0, r5
 800d59a:	f000 fa77 	bl	800da8c <_sbrk_r>
 800d59e:	1c43      	adds	r3, r0, #1
 800d5a0:	d103      	bne.n	800d5aa <sbrk_aligned+0x26>
 800d5a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}
 800d5aa:	1cc4      	adds	r4, r0, #3
 800d5ac:	f024 0403 	bic.w	r4, r4, #3
 800d5b0:	42a0      	cmp	r0, r4
 800d5b2:	d0f8      	beq.n	800d5a6 <sbrk_aligned+0x22>
 800d5b4:	1a21      	subs	r1, r4, r0
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 fa68 	bl	800da8c <_sbrk_r>
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d1f2      	bne.n	800d5a6 <sbrk_aligned+0x22>
 800d5c0:	e7ef      	b.n	800d5a2 <sbrk_aligned+0x1e>
 800d5c2:	bf00      	nop
 800d5c4:	20002ac4 	.word	0x20002ac4

0800d5c8 <_malloc_r>:
 800d5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5cc:	1ccd      	adds	r5, r1, #3
 800d5ce:	f025 0503 	bic.w	r5, r5, #3
 800d5d2:	3508      	adds	r5, #8
 800d5d4:	2d0c      	cmp	r5, #12
 800d5d6:	bf38      	it	cc
 800d5d8:	250c      	movcc	r5, #12
 800d5da:	2d00      	cmp	r5, #0
 800d5dc:	4606      	mov	r6, r0
 800d5de:	db01      	blt.n	800d5e4 <_malloc_r+0x1c>
 800d5e0:	42a9      	cmp	r1, r5
 800d5e2:	d904      	bls.n	800d5ee <_malloc_r+0x26>
 800d5e4:	230c      	movs	r3, #12
 800d5e6:	6033      	str	r3, [r6, #0]
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6c4 <_malloc_r+0xfc>
 800d5f2:	f000 f9f7 	bl	800d9e4 <__malloc_lock>
 800d5f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d5fa:	461c      	mov	r4, r3
 800d5fc:	bb44      	cbnz	r4, 800d650 <_malloc_r+0x88>
 800d5fe:	4629      	mov	r1, r5
 800d600:	4630      	mov	r0, r6
 800d602:	f7ff ffbf 	bl	800d584 <sbrk_aligned>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	4604      	mov	r4, r0
 800d60a:	d158      	bne.n	800d6be <_malloc_r+0xf6>
 800d60c:	f8d8 4000 	ldr.w	r4, [r8]
 800d610:	4627      	mov	r7, r4
 800d612:	2f00      	cmp	r7, #0
 800d614:	d143      	bne.n	800d69e <_malloc_r+0xd6>
 800d616:	2c00      	cmp	r4, #0
 800d618:	d04b      	beq.n	800d6b2 <_malloc_r+0xea>
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	4639      	mov	r1, r7
 800d61e:	4630      	mov	r0, r6
 800d620:	eb04 0903 	add.w	r9, r4, r3
 800d624:	f000 fa32 	bl	800da8c <_sbrk_r>
 800d628:	4581      	cmp	r9, r0
 800d62a:	d142      	bne.n	800d6b2 <_malloc_r+0xea>
 800d62c:	6821      	ldr	r1, [r4, #0]
 800d62e:	1a6d      	subs	r5, r5, r1
 800d630:	4629      	mov	r1, r5
 800d632:	4630      	mov	r0, r6
 800d634:	f7ff ffa6 	bl	800d584 <sbrk_aligned>
 800d638:	3001      	adds	r0, #1
 800d63a:	d03a      	beq.n	800d6b2 <_malloc_r+0xea>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	442b      	add	r3, r5
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	f8d8 3000 	ldr.w	r3, [r8]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	bb62      	cbnz	r2, 800d6a4 <_malloc_r+0xdc>
 800d64a:	f8c8 7000 	str.w	r7, [r8]
 800d64e:	e00f      	b.n	800d670 <_malloc_r+0xa8>
 800d650:	6822      	ldr	r2, [r4, #0]
 800d652:	1b52      	subs	r2, r2, r5
 800d654:	d420      	bmi.n	800d698 <_malloc_r+0xd0>
 800d656:	2a0b      	cmp	r2, #11
 800d658:	d917      	bls.n	800d68a <_malloc_r+0xc2>
 800d65a:	1961      	adds	r1, r4, r5
 800d65c:	42a3      	cmp	r3, r4
 800d65e:	6025      	str	r5, [r4, #0]
 800d660:	bf18      	it	ne
 800d662:	6059      	strne	r1, [r3, #4]
 800d664:	6863      	ldr	r3, [r4, #4]
 800d666:	bf08      	it	eq
 800d668:	f8c8 1000 	streq.w	r1, [r8]
 800d66c:	5162      	str	r2, [r4, r5]
 800d66e:	604b      	str	r3, [r1, #4]
 800d670:	4630      	mov	r0, r6
 800d672:	f000 f9bd 	bl	800d9f0 <__malloc_unlock>
 800d676:	f104 000b 	add.w	r0, r4, #11
 800d67a:	1d23      	adds	r3, r4, #4
 800d67c:	f020 0007 	bic.w	r0, r0, #7
 800d680:	1ac2      	subs	r2, r0, r3
 800d682:	bf1c      	itt	ne
 800d684:	1a1b      	subne	r3, r3, r0
 800d686:	50a3      	strne	r3, [r4, r2]
 800d688:	e7af      	b.n	800d5ea <_malloc_r+0x22>
 800d68a:	6862      	ldr	r2, [r4, #4]
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	bf0c      	ite	eq
 800d690:	f8c8 2000 	streq.w	r2, [r8]
 800d694:	605a      	strne	r2, [r3, #4]
 800d696:	e7eb      	b.n	800d670 <_malloc_r+0xa8>
 800d698:	4623      	mov	r3, r4
 800d69a:	6864      	ldr	r4, [r4, #4]
 800d69c:	e7ae      	b.n	800d5fc <_malloc_r+0x34>
 800d69e:	463c      	mov	r4, r7
 800d6a0:	687f      	ldr	r7, [r7, #4]
 800d6a2:	e7b6      	b.n	800d612 <_malloc_r+0x4a>
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	42a3      	cmp	r3, r4
 800d6aa:	d1fb      	bne.n	800d6a4 <_malloc_r+0xdc>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	6053      	str	r3, [r2, #4]
 800d6b0:	e7de      	b.n	800d670 <_malloc_r+0xa8>
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	6033      	str	r3, [r6, #0]
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f000 f99a 	bl	800d9f0 <__malloc_unlock>
 800d6bc:	e794      	b.n	800d5e8 <_malloc_r+0x20>
 800d6be:	6005      	str	r5, [r0, #0]
 800d6c0:	e7d6      	b.n	800d670 <_malloc_r+0xa8>
 800d6c2:	bf00      	nop
 800d6c4:	20002ac8 	.word	0x20002ac8

0800d6c8 <_printf_common>:
 800d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6cc:	4616      	mov	r6, r2
 800d6ce:	4698      	mov	r8, r3
 800d6d0:	688a      	ldr	r2, [r1, #8]
 800d6d2:	690b      	ldr	r3, [r1, #16]
 800d6d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	bfb8      	it	lt
 800d6dc:	4613      	movlt	r3, r2
 800d6de:	6033      	str	r3, [r6, #0]
 800d6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	b10a      	cbz	r2, 800d6ee <_printf_common+0x26>
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	6033      	str	r3, [r6, #0]
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	0699      	lsls	r1, r3, #26
 800d6f2:	bf42      	ittt	mi
 800d6f4:	6833      	ldrmi	r3, [r6, #0]
 800d6f6:	3302      	addmi	r3, #2
 800d6f8:	6033      	strmi	r3, [r6, #0]
 800d6fa:	6825      	ldr	r5, [r4, #0]
 800d6fc:	f015 0506 	ands.w	r5, r5, #6
 800d700:	d106      	bne.n	800d710 <_printf_common+0x48>
 800d702:	f104 0a19 	add.w	sl, r4, #25
 800d706:	68e3      	ldr	r3, [r4, #12]
 800d708:	6832      	ldr	r2, [r6, #0]
 800d70a:	1a9b      	subs	r3, r3, r2
 800d70c:	42ab      	cmp	r3, r5
 800d70e:	dc26      	bgt.n	800d75e <_printf_common+0x96>
 800d710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	3b00      	subs	r3, #0
 800d718:	bf18      	it	ne
 800d71a:	2301      	movne	r3, #1
 800d71c:	0692      	lsls	r2, r2, #26
 800d71e:	d42b      	bmi.n	800d778 <_printf_common+0xb0>
 800d720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d724:	4641      	mov	r1, r8
 800d726:	4638      	mov	r0, r7
 800d728:	47c8      	blx	r9
 800d72a:	3001      	adds	r0, #1
 800d72c:	d01e      	beq.n	800d76c <_printf_common+0xa4>
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	6922      	ldr	r2, [r4, #16]
 800d732:	f003 0306 	and.w	r3, r3, #6
 800d736:	2b04      	cmp	r3, #4
 800d738:	bf02      	ittt	eq
 800d73a:	68e5      	ldreq	r5, [r4, #12]
 800d73c:	6833      	ldreq	r3, [r6, #0]
 800d73e:	1aed      	subeq	r5, r5, r3
 800d740:	68a3      	ldr	r3, [r4, #8]
 800d742:	bf0c      	ite	eq
 800d744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d748:	2500      	movne	r5, #0
 800d74a:	4293      	cmp	r3, r2
 800d74c:	bfc4      	itt	gt
 800d74e:	1a9b      	subgt	r3, r3, r2
 800d750:	18ed      	addgt	r5, r5, r3
 800d752:	2600      	movs	r6, #0
 800d754:	341a      	adds	r4, #26
 800d756:	42b5      	cmp	r5, r6
 800d758:	d11a      	bne.n	800d790 <_printf_common+0xc8>
 800d75a:	2000      	movs	r0, #0
 800d75c:	e008      	b.n	800d770 <_printf_common+0xa8>
 800d75e:	2301      	movs	r3, #1
 800d760:	4652      	mov	r2, sl
 800d762:	4641      	mov	r1, r8
 800d764:	4638      	mov	r0, r7
 800d766:	47c8      	blx	r9
 800d768:	3001      	adds	r0, #1
 800d76a:	d103      	bne.n	800d774 <_printf_common+0xac>
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d774:	3501      	adds	r5, #1
 800d776:	e7c6      	b.n	800d706 <_printf_common+0x3e>
 800d778:	18e1      	adds	r1, r4, r3
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	2030      	movs	r0, #48	@ 0x30
 800d77e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d782:	4422      	add	r2, r4
 800d784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d78c:	3302      	adds	r3, #2
 800d78e:	e7c7      	b.n	800d720 <_printf_common+0x58>
 800d790:	2301      	movs	r3, #1
 800d792:	4622      	mov	r2, r4
 800d794:	4641      	mov	r1, r8
 800d796:	4638      	mov	r0, r7
 800d798:	47c8      	blx	r9
 800d79a:	3001      	adds	r0, #1
 800d79c:	d0e6      	beq.n	800d76c <_printf_common+0xa4>
 800d79e:	3601      	adds	r6, #1
 800d7a0:	e7d9      	b.n	800d756 <_printf_common+0x8e>
	...

0800d7a4 <_printf_i>:
 800d7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	7e0f      	ldrb	r7, [r1, #24]
 800d7aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7ac:	2f78      	cmp	r7, #120	@ 0x78
 800d7ae:	4691      	mov	r9, r2
 800d7b0:	4680      	mov	r8, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	469a      	mov	sl, r3
 800d7b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7ba:	d807      	bhi.n	800d7cc <_printf_i+0x28>
 800d7bc:	2f62      	cmp	r7, #98	@ 0x62
 800d7be:	d80a      	bhi.n	800d7d6 <_printf_i+0x32>
 800d7c0:	2f00      	cmp	r7, #0
 800d7c2:	f000 80d2 	beq.w	800d96a <_printf_i+0x1c6>
 800d7c6:	2f58      	cmp	r7, #88	@ 0x58
 800d7c8:	f000 80b9 	beq.w	800d93e <_printf_i+0x19a>
 800d7cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7d4:	e03a      	b.n	800d84c <_printf_i+0xa8>
 800d7d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7da:	2b15      	cmp	r3, #21
 800d7dc:	d8f6      	bhi.n	800d7cc <_printf_i+0x28>
 800d7de:	a101      	add	r1, pc, #4	@ (adr r1, 800d7e4 <_printf_i+0x40>)
 800d7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7e4:	0800d83d 	.word	0x0800d83d
 800d7e8:	0800d851 	.word	0x0800d851
 800d7ec:	0800d7cd 	.word	0x0800d7cd
 800d7f0:	0800d7cd 	.word	0x0800d7cd
 800d7f4:	0800d7cd 	.word	0x0800d7cd
 800d7f8:	0800d7cd 	.word	0x0800d7cd
 800d7fc:	0800d851 	.word	0x0800d851
 800d800:	0800d7cd 	.word	0x0800d7cd
 800d804:	0800d7cd 	.word	0x0800d7cd
 800d808:	0800d7cd 	.word	0x0800d7cd
 800d80c:	0800d7cd 	.word	0x0800d7cd
 800d810:	0800d951 	.word	0x0800d951
 800d814:	0800d87b 	.word	0x0800d87b
 800d818:	0800d90b 	.word	0x0800d90b
 800d81c:	0800d7cd 	.word	0x0800d7cd
 800d820:	0800d7cd 	.word	0x0800d7cd
 800d824:	0800d973 	.word	0x0800d973
 800d828:	0800d7cd 	.word	0x0800d7cd
 800d82c:	0800d87b 	.word	0x0800d87b
 800d830:	0800d7cd 	.word	0x0800d7cd
 800d834:	0800d7cd 	.word	0x0800d7cd
 800d838:	0800d913 	.word	0x0800d913
 800d83c:	6833      	ldr	r3, [r6, #0]
 800d83e:	1d1a      	adds	r2, r3, #4
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6032      	str	r2, [r6, #0]
 800d844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d84c:	2301      	movs	r3, #1
 800d84e:	e09d      	b.n	800d98c <_printf_i+0x1e8>
 800d850:	6833      	ldr	r3, [r6, #0]
 800d852:	6820      	ldr	r0, [r4, #0]
 800d854:	1d19      	adds	r1, r3, #4
 800d856:	6031      	str	r1, [r6, #0]
 800d858:	0606      	lsls	r6, r0, #24
 800d85a:	d501      	bpl.n	800d860 <_printf_i+0xbc>
 800d85c:	681d      	ldr	r5, [r3, #0]
 800d85e:	e003      	b.n	800d868 <_printf_i+0xc4>
 800d860:	0645      	lsls	r5, r0, #25
 800d862:	d5fb      	bpl.n	800d85c <_printf_i+0xb8>
 800d864:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d868:	2d00      	cmp	r5, #0
 800d86a:	da03      	bge.n	800d874 <_printf_i+0xd0>
 800d86c:	232d      	movs	r3, #45	@ 0x2d
 800d86e:	426d      	negs	r5, r5
 800d870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d874:	4859      	ldr	r0, [pc, #356]	@ (800d9dc <_printf_i+0x238>)
 800d876:	230a      	movs	r3, #10
 800d878:	e011      	b.n	800d89e <_printf_i+0xfa>
 800d87a:	6821      	ldr	r1, [r4, #0]
 800d87c:	6833      	ldr	r3, [r6, #0]
 800d87e:	0608      	lsls	r0, r1, #24
 800d880:	f853 5b04 	ldr.w	r5, [r3], #4
 800d884:	d402      	bmi.n	800d88c <_printf_i+0xe8>
 800d886:	0649      	lsls	r1, r1, #25
 800d888:	bf48      	it	mi
 800d88a:	b2ad      	uxthmi	r5, r5
 800d88c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d88e:	4853      	ldr	r0, [pc, #332]	@ (800d9dc <_printf_i+0x238>)
 800d890:	6033      	str	r3, [r6, #0]
 800d892:	bf14      	ite	ne
 800d894:	230a      	movne	r3, #10
 800d896:	2308      	moveq	r3, #8
 800d898:	2100      	movs	r1, #0
 800d89a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d89e:	6866      	ldr	r6, [r4, #4]
 800d8a0:	60a6      	str	r6, [r4, #8]
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	bfa2      	ittt	ge
 800d8a6:	6821      	ldrge	r1, [r4, #0]
 800d8a8:	f021 0104 	bicge.w	r1, r1, #4
 800d8ac:	6021      	strge	r1, [r4, #0]
 800d8ae:	b90d      	cbnz	r5, 800d8b4 <_printf_i+0x110>
 800d8b0:	2e00      	cmp	r6, #0
 800d8b2:	d04b      	beq.n	800d94c <_printf_i+0x1a8>
 800d8b4:	4616      	mov	r6, r2
 800d8b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8ba:	fb03 5711 	mls	r7, r3, r1, r5
 800d8be:	5dc7      	ldrb	r7, [r0, r7]
 800d8c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8c4:	462f      	mov	r7, r5
 800d8c6:	42bb      	cmp	r3, r7
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	d9f4      	bls.n	800d8b6 <_printf_i+0x112>
 800d8cc:	2b08      	cmp	r3, #8
 800d8ce:	d10b      	bne.n	800d8e8 <_printf_i+0x144>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	07df      	lsls	r7, r3, #31
 800d8d4:	d508      	bpl.n	800d8e8 <_printf_i+0x144>
 800d8d6:	6923      	ldr	r3, [r4, #16]
 800d8d8:	6861      	ldr	r1, [r4, #4]
 800d8da:	4299      	cmp	r1, r3
 800d8dc:	bfde      	ittt	le
 800d8de:	2330      	movle	r3, #48	@ 0x30
 800d8e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d8e8:	1b92      	subs	r2, r2, r6
 800d8ea:	6122      	str	r2, [r4, #16]
 800d8ec:	f8cd a000 	str.w	sl, [sp]
 800d8f0:	464b      	mov	r3, r9
 800d8f2:	aa03      	add	r2, sp, #12
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	f7ff fee6 	bl	800d6c8 <_printf_common>
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	d14a      	bne.n	800d996 <_printf_i+0x1f2>
 800d900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d904:	b004      	add	sp, #16
 800d906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	f043 0320 	orr.w	r3, r3, #32
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	4833      	ldr	r0, [pc, #204]	@ (800d9e0 <_printf_i+0x23c>)
 800d914:	2778      	movs	r7, #120	@ 0x78
 800d916:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	6831      	ldr	r1, [r6, #0]
 800d91e:	061f      	lsls	r7, r3, #24
 800d920:	f851 5b04 	ldr.w	r5, [r1], #4
 800d924:	d402      	bmi.n	800d92c <_printf_i+0x188>
 800d926:	065f      	lsls	r7, r3, #25
 800d928:	bf48      	it	mi
 800d92a:	b2ad      	uxthmi	r5, r5
 800d92c:	6031      	str	r1, [r6, #0]
 800d92e:	07d9      	lsls	r1, r3, #31
 800d930:	bf44      	itt	mi
 800d932:	f043 0320 	orrmi.w	r3, r3, #32
 800d936:	6023      	strmi	r3, [r4, #0]
 800d938:	b11d      	cbz	r5, 800d942 <_printf_i+0x19e>
 800d93a:	2310      	movs	r3, #16
 800d93c:	e7ac      	b.n	800d898 <_printf_i+0xf4>
 800d93e:	4827      	ldr	r0, [pc, #156]	@ (800d9dc <_printf_i+0x238>)
 800d940:	e7e9      	b.n	800d916 <_printf_i+0x172>
 800d942:	6823      	ldr	r3, [r4, #0]
 800d944:	f023 0320 	bic.w	r3, r3, #32
 800d948:	6023      	str	r3, [r4, #0]
 800d94a:	e7f6      	b.n	800d93a <_printf_i+0x196>
 800d94c:	4616      	mov	r6, r2
 800d94e:	e7bd      	b.n	800d8cc <_printf_i+0x128>
 800d950:	6833      	ldr	r3, [r6, #0]
 800d952:	6825      	ldr	r5, [r4, #0]
 800d954:	6961      	ldr	r1, [r4, #20]
 800d956:	1d18      	adds	r0, r3, #4
 800d958:	6030      	str	r0, [r6, #0]
 800d95a:	062e      	lsls	r6, r5, #24
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	d501      	bpl.n	800d964 <_printf_i+0x1c0>
 800d960:	6019      	str	r1, [r3, #0]
 800d962:	e002      	b.n	800d96a <_printf_i+0x1c6>
 800d964:	0668      	lsls	r0, r5, #25
 800d966:	d5fb      	bpl.n	800d960 <_printf_i+0x1bc>
 800d968:	8019      	strh	r1, [r3, #0]
 800d96a:	2300      	movs	r3, #0
 800d96c:	6123      	str	r3, [r4, #16]
 800d96e:	4616      	mov	r6, r2
 800d970:	e7bc      	b.n	800d8ec <_printf_i+0x148>
 800d972:	6833      	ldr	r3, [r6, #0]
 800d974:	1d1a      	adds	r2, r3, #4
 800d976:	6032      	str	r2, [r6, #0]
 800d978:	681e      	ldr	r6, [r3, #0]
 800d97a:	6862      	ldr	r2, [r4, #4]
 800d97c:	2100      	movs	r1, #0
 800d97e:	4630      	mov	r0, r6
 800d980:	f7f2 fc46 	bl	8000210 <memchr>
 800d984:	b108      	cbz	r0, 800d98a <_printf_i+0x1e6>
 800d986:	1b80      	subs	r0, r0, r6
 800d988:	6060      	str	r0, [r4, #4]
 800d98a:	6863      	ldr	r3, [r4, #4]
 800d98c:	6123      	str	r3, [r4, #16]
 800d98e:	2300      	movs	r3, #0
 800d990:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d994:	e7aa      	b.n	800d8ec <_printf_i+0x148>
 800d996:	6923      	ldr	r3, [r4, #16]
 800d998:	4632      	mov	r2, r6
 800d99a:	4649      	mov	r1, r9
 800d99c:	4640      	mov	r0, r8
 800d99e:	47d0      	blx	sl
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d0ad      	beq.n	800d900 <_printf_i+0x15c>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	079b      	lsls	r3, r3, #30
 800d9a8:	d413      	bmi.n	800d9d2 <_printf_i+0x22e>
 800d9aa:	68e0      	ldr	r0, [r4, #12]
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	4298      	cmp	r0, r3
 800d9b0:	bfb8      	it	lt
 800d9b2:	4618      	movlt	r0, r3
 800d9b4:	e7a6      	b.n	800d904 <_printf_i+0x160>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	4632      	mov	r2, r6
 800d9ba:	4649      	mov	r1, r9
 800d9bc:	4640      	mov	r0, r8
 800d9be:	47d0      	blx	sl
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	d09d      	beq.n	800d900 <_printf_i+0x15c>
 800d9c4:	3501      	adds	r5, #1
 800d9c6:	68e3      	ldr	r3, [r4, #12]
 800d9c8:	9903      	ldr	r1, [sp, #12]
 800d9ca:	1a5b      	subs	r3, r3, r1
 800d9cc:	42ab      	cmp	r3, r5
 800d9ce:	dcf2      	bgt.n	800d9b6 <_printf_i+0x212>
 800d9d0:	e7eb      	b.n	800d9aa <_printf_i+0x206>
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	f104 0619 	add.w	r6, r4, #25
 800d9d8:	e7f5      	b.n	800d9c6 <_printf_i+0x222>
 800d9da:	bf00      	nop
 800d9dc:	0800dd6d 	.word	0x0800dd6d
 800d9e0:	0800dd7e 	.word	0x0800dd7e

0800d9e4 <__malloc_lock>:
 800d9e4:	4801      	ldr	r0, [pc, #4]	@ (800d9ec <__malloc_lock+0x8>)
 800d9e6:	f7ff bc65 	b.w	800d2b4 <__retarget_lock_acquire_recursive>
 800d9ea:	bf00      	nop
 800d9ec:	20002ac0 	.word	0x20002ac0

0800d9f0 <__malloc_unlock>:
 800d9f0:	4801      	ldr	r0, [pc, #4]	@ (800d9f8 <__malloc_unlock+0x8>)
 800d9f2:	f7ff bc60 	b.w	800d2b6 <__retarget_lock_release_recursive>
 800d9f6:	bf00      	nop
 800d9f8:	20002ac0 	.word	0x20002ac0

0800d9fc <_realloc_r>:
 800d9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da00:	4680      	mov	r8, r0
 800da02:	4615      	mov	r5, r2
 800da04:	460c      	mov	r4, r1
 800da06:	b921      	cbnz	r1, 800da12 <_realloc_r+0x16>
 800da08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da0c:	4611      	mov	r1, r2
 800da0e:	f7ff bddb 	b.w	800d5c8 <_malloc_r>
 800da12:	b92a      	cbnz	r2, 800da20 <_realloc_r+0x24>
 800da14:	f000 f84a 	bl	800daac <_free_r>
 800da18:	2400      	movs	r4, #0
 800da1a:	4620      	mov	r0, r4
 800da1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da20:	f000 f88e 	bl	800db40 <_malloc_usable_size_r>
 800da24:	4285      	cmp	r5, r0
 800da26:	4606      	mov	r6, r0
 800da28:	d802      	bhi.n	800da30 <_realloc_r+0x34>
 800da2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da2e:	d8f4      	bhi.n	800da1a <_realloc_r+0x1e>
 800da30:	4629      	mov	r1, r5
 800da32:	4640      	mov	r0, r8
 800da34:	f7ff fdc8 	bl	800d5c8 <_malloc_r>
 800da38:	4607      	mov	r7, r0
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0ec      	beq.n	800da18 <_realloc_r+0x1c>
 800da3e:	42b5      	cmp	r5, r6
 800da40:	462a      	mov	r2, r5
 800da42:	4621      	mov	r1, r4
 800da44:	bf28      	it	cs
 800da46:	4632      	movcs	r2, r6
 800da48:	f7ff fc36 	bl	800d2b8 <memcpy>
 800da4c:	4621      	mov	r1, r4
 800da4e:	4640      	mov	r0, r8
 800da50:	f000 f82c 	bl	800daac <_free_r>
 800da54:	463c      	mov	r4, r7
 800da56:	e7e0      	b.n	800da1a <_realloc_r+0x1e>

0800da58 <memmove>:
 800da58:	4288      	cmp	r0, r1
 800da5a:	b510      	push	{r4, lr}
 800da5c:	eb01 0402 	add.w	r4, r1, r2
 800da60:	d902      	bls.n	800da68 <memmove+0x10>
 800da62:	4284      	cmp	r4, r0
 800da64:	4623      	mov	r3, r4
 800da66:	d807      	bhi.n	800da78 <memmove+0x20>
 800da68:	1e43      	subs	r3, r0, #1
 800da6a:	42a1      	cmp	r1, r4
 800da6c:	d008      	beq.n	800da80 <memmove+0x28>
 800da6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da76:	e7f8      	b.n	800da6a <memmove+0x12>
 800da78:	4402      	add	r2, r0
 800da7a:	4601      	mov	r1, r0
 800da7c:	428a      	cmp	r2, r1
 800da7e:	d100      	bne.n	800da82 <memmove+0x2a>
 800da80:	bd10      	pop	{r4, pc}
 800da82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da8a:	e7f7      	b.n	800da7c <memmove+0x24>

0800da8c <_sbrk_r>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	4d06      	ldr	r5, [pc, #24]	@ (800daa8 <_sbrk_r+0x1c>)
 800da90:	2300      	movs	r3, #0
 800da92:	4604      	mov	r4, r0
 800da94:	4608      	mov	r0, r1
 800da96:	602b      	str	r3, [r5, #0]
 800da98:	f7f5 fe06 	bl	80036a8 <_sbrk>
 800da9c:	1c43      	adds	r3, r0, #1
 800da9e:	d102      	bne.n	800daa6 <_sbrk_r+0x1a>
 800daa0:	682b      	ldr	r3, [r5, #0]
 800daa2:	b103      	cbz	r3, 800daa6 <_sbrk_r+0x1a>
 800daa4:	6023      	str	r3, [r4, #0]
 800daa6:	bd38      	pop	{r3, r4, r5, pc}
 800daa8:	20002acc 	.word	0x20002acc

0800daac <_free_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4605      	mov	r5, r0
 800dab0:	2900      	cmp	r1, #0
 800dab2:	d041      	beq.n	800db38 <_free_r+0x8c>
 800dab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab8:	1f0c      	subs	r4, r1, #4
 800daba:	2b00      	cmp	r3, #0
 800dabc:	bfb8      	it	lt
 800dabe:	18e4      	addlt	r4, r4, r3
 800dac0:	f7ff ff90 	bl	800d9e4 <__malloc_lock>
 800dac4:	4a1d      	ldr	r2, [pc, #116]	@ (800db3c <_free_r+0x90>)
 800dac6:	6813      	ldr	r3, [r2, #0]
 800dac8:	b933      	cbnz	r3, 800dad8 <_free_r+0x2c>
 800daca:	6063      	str	r3, [r4, #4]
 800dacc:	6014      	str	r4, [r2, #0]
 800dace:	4628      	mov	r0, r5
 800dad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dad4:	f7ff bf8c 	b.w	800d9f0 <__malloc_unlock>
 800dad8:	42a3      	cmp	r3, r4
 800dada:	d908      	bls.n	800daee <_free_r+0x42>
 800dadc:	6820      	ldr	r0, [r4, #0]
 800dade:	1821      	adds	r1, r4, r0
 800dae0:	428b      	cmp	r3, r1
 800dae2:	bf01      	itttt	eq
 800dae4:	6819      	ldreq	r1, [r3, #0]
 800dae6:	685b      	ldreq	r3, [r3, #4]
 800dae8:	1809      	addeq	r1, r1, r0
 800daea:	6021      	streq	r1, [r4, #0]
 800daec:	e7ed      	b.n	800daca <_free_r+0x1e>
 800daee:	461a      	mov	r2, r3
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	b10b      	cbz	r3, 800daf8 <_free_r+0x4c>
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	d9fa      	bls.n	800daee <_free_r+0x42>
 800daf8:	6811      	ldr	r1, [r2, #0]
 800dafa:	1850      	adds	r0, r2, r1
 800dafc:	42a0      	cmp	r0, r4
 800dafe:	d10b      	bne.n	800db18 <_free_r+0x6c>
 800db00:	6820      	ldr	r0, [r4, #0]
 800db02:	4401      	add	r1, r0
 800db04:	1850      	adds	r0, r2, r1
 800db06:	4283      	cmp	r3, r0
 800db08:	6011      	str	r1, [r2, #0]
 800db0a:	d1e0      	bne.n	800dace <_free_r+0x22>
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	6053      	str	r3, [r2, #4]
 800db12:	4408      	add	r0, r1
 800db14:	6010      	str	r0, [r2, #0]
 800db16:	e7da      	b.n	800dace <_free_r+0x22>
 800db18:	d902      	bls.n	800db20 <_free_r+0x74>
 800db1a:	230c      	movs	r3, #12
 800db1c:	602b      	str	r3, [r5, #0]
 800db1e:	e7d6      	b.n	800dace <_free_r+0x22>
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	1821      	adds	r1, r4, r0
 800db24:	428b      	cmp	r3, r1
 800db26:	bf04      	itt	eq
 800db28:	6819      	ldreq	r1, [r3, #0]
 800db2a:	685b      	ldreq	r3, [r3, #4]
 800db2c:	6063      	str	r3, [r4, #4]
 800db2e:	bf04      	itt	eq
 800db30:	1809      	addeq	r1, r1, r0
 800db32:	6021      	streq	r1, [r4, #0]
 800db34:	6054      	str	r4, [r2, #4]
 800db36:	e7ca      	b.n	800dace <_free_r+0x22>
 800db38:	bd38      	pop	{r3, r4, r5, pc}
 800db3a:	bf00      	nop
 800db3c:	20002ac8 	.word	0x20002ac8

0800db40 <_malloc_usable_size_r>:
 800db40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db44:	1f18      	subs	r0, r3, #4
 800db46:	2b00      	cmp	r3, #0
 800db48:	bfbc      	itt	lt
 800db4a:	580b      	ldrlt	r3, [r1, r0]
 800db4c:	18c0      	addlt	r0, r0, r3
 800db4e:	4770      	bx	lr

0800db50 <_init>:
 800db50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db52:	bf00      	nop
 800db54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db56:	bc08      	pop	{r3}
 800db58:	469e      	mov	lr, r3
 800db5a:	4770      	bx	lr

0800db5c <_fini>:
 800db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5e:	bf00      	nop
 800db60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db62:	bc08      	pop	{r3}
 800db64:	469e      	mov	lr, r3
 800db66:	4770      	bx	lr
