
capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dae4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800dcb4  0800dcb4  0000ecb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  0000f2a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea4  0800dea4  0000eea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deac  0800deac  0000f2a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deac  0800deac  0000eeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800deb0  0800deb0  0000eeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  0800deb4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029dc  200002a0  0800e154  0000f2a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c7c  0800e154  0000fc7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fecb  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004678  00000000  00000000  0002f19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ca  00000000  00000000  000353f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ea2  00000000  00000000  000369c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233a3  00000000  00000000  0005e864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8111  00000000  00000000  00081c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169d18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d2c  00000000  00000000  00169d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00171a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a0 	.word	0x200002a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc9c 	.word	0x0800dc9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002a4 	.word	0x200002a4
 800020c:	0800dc9c 	.word	0x0800dc9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <_DoInit+0xa0>)
 8000de4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000de6:	22a8      	movs	r2, #168	@ 0xa8
 8000de8:	2100      	movs	r1, #0
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f00c fad6 	bl	800d39c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2203      	movs	r2, #3
 8000df4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4a20      	ldr	r2, [pc, #128]	@ (8000e80 <_DoInit+0xa4>)
 8000e00:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <_DoInit+0xa8>)
 8000e06:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <_DoInit+0xa4>)
 8000e26:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <_DoInit+0xac>)
 8000e2c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2210      	movs	r2, #16
 8000e32:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2200      	movs	r2, #0
 8000e38:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000e46:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	e00c      	b.n	8000e6a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1c3 030f 	rsb	r3, r3, #15
 8000e56:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <_DoInit+0xb0>)
 8000e58:	5cd1      	ldrb	r1, [r2, r3]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	460a      	mov	r2, r1
 8000e62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3301      	adds	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d9ef      	bls.n	8000e50 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000e70:	f3bf 8f5f 	dmb	sy
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002bc 	.word	0x200002bc
 8000e80:	0800dcb4 	.word	0x0800dcb4
 8000e84:	20000364 	.word	0x20000364
 8000e88:	20000764 	.word	0x20000764
 8000e8c:	0800de34 	.word	0x0800de34

08000e90 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d905      	bls.n	8000ec0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ebe:	e007      	b.n	8000ed0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69b9      	ldr	r1, [r7, #24]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eda:	4293      	cmp	r3, r2
 8000edc:	bf28      	it	cs
 8000ede:	4613      	movcs	r3, r2
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bf28      	it	cs
 8000eea:	4613      	movcs	r3, r2
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f00c fa81 	bl	800d404 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000f02:	6a3a      	ldr	r2, [r7, #32]
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	4413      	add	r3, r2
 8000f08:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	4413      	add	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1e:	4413      	add	r3, r2
 8000f20:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d101      	bne.n	8000f30 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000f30:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1b2      	bne.n	8000ea6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000f40:	6a3b      	ldr	r3, [r7, #32]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b088      	sub	sp, #32
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d911      	bls.n	8000f92 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	4413      	add	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6938      	ldr	r0, [r7, #16]
 8000f7e:	f00c fa41 	bl	800d404 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000f82:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000f90:	e01f      	b.n	8000fd2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	6938      	ldr	r0, [r7, #16]
 8000fa6:	f00c fa2d 	bl	800d404 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	f00c fa1e 	bl	800d404 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000fc8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000fda:	b480      	push	{r7}
 8000fdc:	b087      	sub	sp, #28
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d808      	bhi.n	8001008 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4413      	add	r3, r2
 8001002:	3b01      	subs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e004      	b.n	8001012 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	3b01      	subs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  }
  return r;
 8001012:	697b      	ldr	r3, [r7, #20]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <SEGGER_RTT_WriteNoLock+0x9c>)
 800103e:	4413      	add	r3, r2
 8001040:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d029      	beq.n	800109e <SEGGER_RTT_WriteNoLock+0x7e>
 800104a:	2b02      	cmp	r3, #2
 800104c:	d82e      	bhi.n	80010ac <SEGGER_RTT_WriteNoLock+0x8c>
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <SEGGER_RTT_WriteNoLock+0x38>
 8001052:	2b01      	cmp	r3, #1
 8001054:	d013      	beq.n	800107e <SEGGER_RTT_WriteNoLock+0x5e>
 8001056:	e029      	b.n	80010ac <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8001058:	6978      	ldr	r0, [r7, #20]
 800105a:	f7ff ffbe 	bl	8000fda <_GetAvailWriteSpace>
 800105e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d202      	bcs.n	800106e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800106c:	e021      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	69b9      	ldr	r1, [r7, #24]
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f7ff ff67 	bl	8000f4a <_WriteNoCheck>
    break;
 800107c:	e019      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	f7ff ffab 	bl	8000fda <_GetAvailWriteSpace>
 8001084:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4293      	cmp	r3, r2
 800108c:	bf28      	it	cs
 800108e:	4613      	movcs	r3, r2
 8001090:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff57 	bl	8000f4a <_WriteNoCheck>
    break;
 800109c:	e009      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	69b9      	ldr	r1, [r7, #24]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff fef4 	bl	8000e90 <_WriteBlocking>
 80010a8:	61f8      	str	r0, [r7, #28]
    break;
 80010aa:	e002      	b.n	80010b2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    break;
 80010b0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80010b2:	69fb      	ldr	r3, [r7, #28]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002bc 	.word	0x200002bc

080010c0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <SEGGER_RTT_Write+0x48>)
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <SEGGER_RTT_Write+0x1e>
 80010da:	f7ff fe7f 	bl	8000ddc <_DoInit>
  SEGGER_RTT_LOCK();
 80010de:	f3ef 8311 	mrs	r3, BASEPRI
 80010e2:	f04f 0120 	mov.w	r1, #32
 80010e6:	f381 8811 	msr	BASEPRI, r1
 80010ea:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff95 	bl	8001020 <SEGGER_RTT_WriteNoLock>
 80010f6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80010fe:	697b      	ldr	r3, [r7, #20]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200002bc 	.word	0x200002bc

0800110c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d80e      	bhi.n	8001148 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	78fa      	ldrb	r2, [r7, #3]
 8001134:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	d115      	bne.n	8001180 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6918      	ldr	r0, [r3, #16]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	461a      	mov	r2, r3
 8001162:	f7ff ffad 	bl	80010c0 <SEGGER_RTT_Write>
 8001166:	4602      	mov	r2, r0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d004      	beq.n	800117a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001176:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8001178:	e002      	b.n	8001180 <_StoreChar+0x74>
      p->Cnt = 0u;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800119a:	2301      	movs	r3, #1
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80011a2:	e007      	b.n	80011b4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ac:	623b      	str	r3, [r7, #32]
    Width++;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3301      	adds	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d2f3      	bcs.n	80011a4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d901      	bls.n	80011c8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80011c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d125      	bne.n	800121e <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 80011d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d022      	beq.n	800121e <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80011d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <_PrintUnsigned+0x66>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_PrintUnsigned+0x66>
        c = '0';
 80011e8:	2330      	movs	r3, #48	@ 0x30
 80011ea:	76fb      	strb	r3, [r7, #27]
 80011ec:	e001      	b.n	80011f2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80011ee:	2320      	movs	r3, #32
 80011f0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80011f2:	e00b      	b.n	800120c <_PrintUnsigned+0x84>
        FieldWidth--;
 80011f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f6:	3b01      	subs	r3, #1
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80011fa:	7efb      	ldrb	r3, [r7, #27]
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff ff84 	bl	800110c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db07      	blt.n	800121c <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800120c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <_PrintUnsigned+0x96>
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	429a      	cmp	r2, r3
 8001218:	d3ec      	bcc.n	80011f4 <_PrintUnsigned+0x6c>
 800121a:	e000      	b.n	800121e <_PrintUnsigned+0x96>
          break;
 800121c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db55      	blt.n	80012d2 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d903      	bls.n	8001234 <_PrintUnsigned+0xac>
        NumDigits--;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	3b01      	subs	r3, #1
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	e009      	b.n	8001248 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	429a      	cmp	r2, r3
 8001244:	d200      	bcs.n	8001248 <_PrintUnsigned+0xc0>
          break;
 8001246:	e005      	b.n	8001254 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8001252:	e7e8      	b.n	8001226 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <_PrintUnsigned+0x154>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff ff48 	bl	800110c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db08      	blt.n	8001296 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8001284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	fbb2 f3f3 	udiv	r3, r2, r3
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1df      	bne.n	8001254 <_PrintUnsigned+0xcc>
 8001294:	e000      	b.n	8001298 <_PrintUnsigned+0x110>
        break;
 8001296:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8001298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d017      	beq.n	80012d2 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80012a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d014      	beq.n	80012d2 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80012a8:	e00a      	b.n	80012c0 <_PrintUnsigned+0x138>
          FieldWidth--;
 80012aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ac:	3b01      	subs	r3, #1
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80012b0:	2120      	movs	r1, #32
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff2a 	bl	800110c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db07      	blt.n	80012d0 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80012c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <_PrintUnsigned+0x14a>
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3ed      	bcc.n	80012aa <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 80012ce:	e000      	b.n	80012d2 <_PrintUnsigned+0x14a>
            break;
 80012d0:	bf00      	nop
}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	@ 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	0800de48 	.word	0x0800de48

080012e0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bfb8      	it	lt
 80012f4:	425b      	neglt	r3, r3
 80012f6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80012fc:	e007      	b.n	800130e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	fb92 f3f3 	sdiv	r3, r2, r3
 8001306:	613b      	str	r3, [r7, #16]
    Width++;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	429a      	cmp	r2, r3
 8001314:	daf3      	bge.n	80012fe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	429a      	cmp	r2, r3
 800131c:	d901      	bls.n	8001322 <_PrintInt+0x42>
    Width = NumDigits;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00a      	beq.n	800133e <_PrintInt+0x5e>
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db04      	blt.n	8001338 <_PrintInt+0x58>
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <_PrintInt+0x5e>
    FieldWidth--;
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	3b01      	subs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <_PrintInt+0x6e>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01c      	beq.n	8001388 <_PrintInt+0xa8>
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d117      	bne.n	8001388 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d014      	beq.n	8001388 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800135e:	e00a      	b.n	8001376 <_PrintInt+0x96>
        FieldWidth--;
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	3b01      	subs	r3, #1
 8001364:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8001366:	2120      	movs	r1, #32
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff fecf 	bl	800110c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db07      	blt.n	8001386 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <_PrintInt+0xa8>
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3ed      	bcc.n	8001360 <_PrintInt+0x80>
 8001384:	e000      	b.n	8001388 <_PrintInt+0xa8>
          break;
 8001386:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db4a      	blt.n	8001426 <_PrintInt+0x146>
    if (v < 0) {
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da07      	bge.n	80013a6 <_PrintInt+0xc6>
      v = -v;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	425b      	negs	r3, r3
 800139a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 800139c:	212d      	movs	r1, #45	@ 0x2d
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff feb4 	bl	800110c <_StoreChar>
 80013a4:	e008      	b.n	80013b8 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80013b0:	212b      	movs	r1, #43	@ 0x2b
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff feaa 	bl	800110c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db32      	blt.n	8001426 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01f      	beq.n	800140a <_PrintInt+0x12a>
 80013ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11a      	bne.n	800140a <_PrintInt+0x12a>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d117      	bne.n	800140a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80013e0:	e00a      	b.n	80013f8 <_PrintInt+0x118>
            FieldWidth--;
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80013e8:	2130      	movs	r1, #48	@ 0x30
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff fe8e 	bl	800110c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db07      	blt.n	8001408 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <_PrintInt+0x12a>
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3ed      	bcc.n	80013e2 <_PrintInt+0x102>
 8001406:	e000      	b.n	800140a <_PrintInt+0x12a>
              break;
 8001408:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db09      	blt.n	8001426 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff feb1 	bl	8001188 <_PrintUnsigned>
      }
    }
  }
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b0a2      	sub	sp, #136	@ 0x88
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8001442:	2340      	movs	r3, #64	@ 0x40
 8001444:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt            = 0u;
 8001446:	2300      	movs	r3, #0
 8001448:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue    = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8001460:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 819f 	beq.w	80017a8 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 800146a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800146e:	2b25      	cmp	r3, #37	@ 0x25
 8001470:	f040 818d 	bne.w	800178e <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8001474:	2300      	movs	r3, #0
 8001476:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 8001478:	2301      	movs	r3, #1
 800147a:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 8001484:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001488:	3b23      	subs	r3, #35	@ 0x23
 800148a:	2b0d      	cmp	r3, #13
 800148c:	d83e      	bhi.n	800150c <SEGGER_RTT_vprintf+0xdc>
 800148e:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <SEGGER_RTT_vprintf+0x64>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	080014fd 	.word	0x080014fd
 8001498:	0800150d 	.word	0x0800150d
 800149c:	0800150d 	.word	0x0800150d
 80014a0:	0800150d 	.word	0x0800150d
 80014a4:	0800150d 	.word	0x0800150d
 80014a8:	0800150d 	.word	0x0800150d
 80014ac:	0800150d 	.word	0x0800150d
 80014b0:	0800150d 	.word	0x0800150d
 80014b4:	080014ed 	.word	0x080014ed
 80014b8:	0800150d 	.word	0x0800150d
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	0800150d 	.word	0x0800150d
 80014c4:	0800150d 	.word	0x0800150d
 80014c8:	080014dd 	.word	0x080014dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80014cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	e01a      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80014dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	e012      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80014ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	e00a      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80014fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	673b      	str	r3, [r7, #112]	@ 0x70
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	e002      	b.n	8001512 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 800150c:	2300      	movs	r3, #0
 800150e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001510:	bf00      	nop
        }
      } while (v);
 8001512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1b1      	bne.n	800147c <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8001518:	2300      	movs	r3, #0
 800151a:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8001524:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001528:	2b2f      	cmp	r3, #47	@ 0x2f
 800152a:	d912      	bls.n	8001552 <SEGGER_RTT_vprintf+0x122>
 800152c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001530:	2b39      	cmp	r3, #57	@ 0x39
 8001532:	d80e      	bhi.n	8001552 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800153a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	461a      	mov	r2, r3
 8001546:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800154a:	4413      	add	r3, r2
 800154c:	3b30      	subs	r3, #48	@ 0x30
 800154e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8001550:	e7e4      	b.n	800151c <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8001552:	2300      	movs	r3, #0
 8001554:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 800155e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001562:	2b2e      	cmp	r3, #46	@ 0x2e
 8001564:	d11d      	bne.n	80015a2 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 8001574:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001578:	2b2f      	cmp	r3, #47	@ 0x2f
 800157a:	d912      	bls.n	80015a2 <SEGGER_RTT_vprintf+0x172>
 800157c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001580:	2b39      	cmp	r3, #57	@ 0x39
 8001582:	d80e      	bhi.n	80015a2 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	3301      	adds	r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800158a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	461a      	mov	r2, r3
 8001596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800159a:	4413      	add	r3, r2
 800159c:	3b30      	subs	r3, #48	@ 0x30
 800159e:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 80015a0:	e7e4      	b.n	800156c <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80015aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80015ae:	2b6c      	cmp	r3, #108	@ 0x6c
 80015b0:	d003      	beq.n	80015ba <SEGGER_RTT_vprintf+0x18a>
 80015b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80015b6:	2b68      	cmp	r3, #104	@ 0x68
 80015b8:	d107      	bne.n	80015ca <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3301      	adds	r3, #1
 80015be:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 80015c8:	e7ef      	b.n	80015aa <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80015ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80015ce:	2b25      	cmp	r3, #37	@ 0x25
 80015d0:	f000 80d1 	beq.w	8001776 <SEGGER_RTT_vprintf+0x346>
 80015d4:	2b25      	cmp	r3, #37	@ 0x25
 80015d6:	f2c0 80d5 	blt.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015da:	2b78      	cmp	r3, #120	@ 0x78
 80015dc:	f300 80d2 	bgt.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015e0:	2b58      	cmp	r3, #88	@ 0x58
 80015e2:	f2c0 80cf 	blt.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015e6:	3b58      	subs	r3, #88	@ 0x58
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	f200 80cb 	bhi.w	8001784 <SEGGER_RTT_vprintf+0x354>
 80015ee:	a201      	add	r2, pc, #4	@ (adr r2, 80015f4 <SEGGER_RTT_vprintf+0x1c4>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	080016eb 	.word	0x080016eb
 80015f8:	08001785 	.word	0x08001785
 80015fc:	08001785 	.word	0x08001785
 8001600:	08001785 	.word	0x08001785
 8001604:	08001785 	.word	0x08001785
 8001608:	08001785 	.word	0x08001785
 800160c:	08001785 	.word	0x08001785
 8001610:	08001785 	.word	0x08001785
 8001614:	08001785 	.word	0x08001785
 8001618:	08001785 	.word	0x08001785
 800161c:	08001785 	.word	0x08001785
 8001620:	08001679 	.word	0x08001679
 8001624:	0800169f 	.word	0x0800169f
 8001628:	08001785 	.word	0x08001785
 800162c:	08001785 	.word	0x08001785
 8001630:	08001785 	.word	0x08001785
 8001634:	08001785 	.word	0x08001785
 8001638:	08001785 	.word	0x08001785
 800163c:	08001785 	.word	0x08001785
 8001640:	08001785 	.word	0x08001785
 8001644:	08001785 	.word	0x08001785
 8001648:	08001785 	.word	0x08001785
 800164c:	08001785 	.word	0x08001785
 8001650:	08001785 	.word	0x08001785
 8001654:	08001751 	.word	0x08001751
 8001658:	08001785 	.word	0x08001785
 800165c:	08001785 	.word	0x08001785
 8001660:	08001711 	.word	0x08001711
 8001664:	08001785 	.word	0x08001785
 8001668:	080016c5 	.word	0x080016c5
 800166c:	08001785 	.word	0x08001785
 8001670:	08001785 	.word	0x08001785
 8001674:	080016eb 	.word	0x080016eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1d19      	adds	r1, r3, #4
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6011      	str	r1, [r2, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	67bb      	str	r3, [r7, #120]	@ 0x78
        c0 = (char)v;
 8001686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001688:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        _StoreChar(&BufferDesc, c0);
 800168c:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001690:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd38 	bl	800110c <_StoreChar>
        break;
 800169c:	e073      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	1d19      	adds	r1, r3, #4
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6011      	str	r1, [r2, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80016ac:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80016b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ba:	220a      	movs	r2, #10
 80016bc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016be:	f7ff fe0f 	bl	80012e0 <_PrintInt>
        break;
 80016c2:	e060      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1d19      	adds	r1, r3, #4
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6011      	str	r1, [r2, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80016d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016d4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80016d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e2:	220a      	movs	r2, #10
 80016e4:	f7ff fd50 	bl	8001188 <_PrintUnsigned>
        break;
 80016e8:	e04d      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1d19      	adds	r1, r3, #4
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6011      	str	r1, [r2, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80016f8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016fa:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80016fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001708:	2210      	movs	r2, #16
 800170a:	f7ff fd3d 	bl	8001188 <_PrintUnsigned>
        break;
 800170e:	e03a      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	1d19      	adds	r1, r3, #4
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6011      	str	r1, [r2, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	66bb      	str	r3, [r7, #104]	@ 0x68
          do {
            c = *s;
 800171e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8001726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001728:	3301      	adds	r3, #1
 800172a:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 800172c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8001734:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001738:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fce4 	bl	800110c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8001744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001746:	2b00      	cmp	r3, #0
 8001748:	dae9      	bge.n	800171e <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 800174a:	e01c      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
              break;
 800174c:	bf00      	nop
        break;
 800174e:	e01a      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	1d19      	adds	r1, r3, #4
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6011      	str	r1, [r2, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800175e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001760:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001764:	2300      	movs	r3, #0
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	2308      	movs	r3, #8
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2308      	movs	r3, #8
 800176e:	2210      	movs	r2, #16
 8001770:	f7ff fd0a 	bl	8001188 <_PrintUnsigned>
        break;
 8001774:	e007      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8001776:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800177a:	2125      	movs	r1, #37	@ 0x25
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fcc5 	bl	800110c <_StoreChar>
        break;
 8001782:	e000      	b.n	8001786 <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8001784:	bf00      	nop
      }
      sFormat++;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3301      	adds	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	e007      	b.n	800179e <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 800178e:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001792:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fcb7 	bl	800110c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800179e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f6bf ae56 	bge.w	8001452 <SEGGER_RTT_vprintf+0x22>
 80017a6:	e000      	b.n	80017aa <SEGGER_RTT_vprintf+0x37a>
      break;
 80017a8:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80017aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd0d      	ble.n	80017cc <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80017b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80017b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fc7e 	bl	80010c0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80017c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017c8:	4413      	add	r3, r2
 80017ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3780      	adds	r7, #128	@ 0x80
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop

080017d8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80017d8:	b40e      	push	{r1, r2, r3}
 80017da:	b580      	push	{r7, lr}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	461a      	mov	r2, r3
 80017ee:	69f9      	ldr	r1, [r7, #28]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fe1d 	bl	8001430 <SEGGER_RTT_vprintf>
 80017f6:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001804:	b003      	add	sp, #12
 8001806:	4770      	bx	lr

08001808 <accWrite>:
**************************************************************/

gpio_Pin imuInt = { .gpioGroup = GPIOC, .gpioPin = GPIO_PIN_13 };          //IMU_INR
gpio_Pin imuCS = { .gpioGroup = GPIOC, .gpioPin = GPIO_PIN_5};            //CS

void accWrite(uint8_t add, uint8_t *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8001814:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <accWrite+0x4c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <accWrite+0x4c>)
 800181a:	8891      	ldrh	r1, [r2, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f002 fbd4 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &add, 1, 100);
 8001824:	1df9      	adds	r1, r7, #7
 8001826:	2364      	movs	r3, #100	@ 0x64
 8001828:	2201      	movs	r2, #1
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <accWrite+0x50>)
 800182c:	f005 f8df 	bl	80069ee <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, data, 1, 100);
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	2201      	movs	r2, #1
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	4808      	ldr	r0, [pc, #32]	@ (8001858 <accWrite+0x50>)
 8001838:	f005 f8d9 	bl	80069ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <accWrite+0x4c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <accWrite+0x4c>)
 8001842:	8891      	ldrh	r1, [r2, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fbc0 	bl	8003fcc <HAL_GPIO_WritePin>
	return;
 800184c:	bf00      	nop
}
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000013c 	.word	0x2000013c
 8001858:	20000810 	.word	0x20000810

0800185c <accRead>:


uint8_t accRead(uint8_t add){
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	uint8_t buff;
  uint8_t data = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	73bb      	strb	r3, [r7, #14]
	buff = add | 0x80;
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 0); // setting CS LOW
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <accRead+0x60>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a10      	ldr	r2, [pc, #64]	@ (80018bc <accRead+0x60>)
 800187a:	8891      	ldrh	r1, [r2, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fba4 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &buff, sizeof buff, 100);
 8001884:	f107 010f 	add.w	r1, r7, #15
 8001888:	2364      	movs	r3, #100	@ 0x64
 800188a:	2201      	movs	r2, #1
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <accRead+0x64>)
 800188e:	f005 f8ae 	bl	80069ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, sizeof data, 100);
 8001892:	f107 010e 	add.w	r1, r7, #14
 8001896:	2364      	movs	r3, #100	@ 0x64
 8001898:	2201      	movs	r2, #1
 800189a:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <accRead+0x64>)
 800189c:	f005 f9eb 	bl	8006c76 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(imuCS.gpioGroup, imuCS.gpioPin, 1);// setting CS HIGH
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <accRead+0x60>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <accRead+0x60>)
 80018a6:	8891      	ldrh	r1, [r2, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fb8e 	bl	8003fcc <HAL_GPIO_WritePin>
	return data;
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000013c 	.word	0x2000013c
 80018c0:	20000810 	.word	0x20000810

080018c4 <accInit>:

void accInit(void){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  uint8_t changeState;
  uint8_t ret;

  SEGGER_RTT_printf(0, "\nAccelerometer Sensor Check... \n");
 80018ca:	494c      	ldr	r1, [pc, #304]	@ (80019fc <accInit+0x138>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ff83 	bl	80017d8 <SEGGER_RTT_printf>
  SEGGER_RTT_printf(0, "______________________ \n");
 80018d2:	494b      	ldr	r1, [pc, #300]	@ (8001a00 <accInit+0x13c>)
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff ff7f 	bl	80017d8 <SEGGER_RTT_printf>
  //accelerometer Control Reg

  ret = accRead(0x0F);
 80018da:	200f      	movs	r0, #15
 80018dc:	f7ff ffbe 	bl	800185c <accRead>
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "CHIP ID: 0x%02X\n", ret);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4946      	ldr	r1, [pc, #280]	@ (8001a04 <accInit+0x140>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff ff74 	bl	80017d8 <SEGGER_RTT_printf>
  // we are expecting 0x6C here

  ret = accRead(0x10);
 80018f0:	2010      	movs	r0, #16
 80018f2:	f7ff ffb3 	bl	800185c <accRead>
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "ACCELEROMETER CONTROL REG: 0x%02X\n", ret);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4942      	ldr	r1, [pc, #264]	@ (8001a08 <accInit+0x144>)
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff ff69 	bl	80017d8 <SEGGER_RTT_printf>
  changeState = ret | 0b10100000;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800190c:	b2db      	uxtb	r3, r3
 800190e:	71bb      	strb	r3, [r7, #6]
  accWrite(0x10, &changeState);
 8001910:	1dbb      	adds	r3, r7, #6
 8001912:	4619      	mov	r1, r3
 8001914:	2010      	movs	r0, #16
 8001916:	f7ff ff77 	bl	8001808 <accWrite>
  ret = accRead(0x10);
 800191a:	2010      	movs	r0, #16
 800191c:	f7ff ff9e 	bl	800185c <accRead>
 8001920:	4603      	mov	r3, r0
 8001922:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "ACCELEROMETER CONTROL REG UPDATED: 0x%02X\n", ret);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	461a      	mov	r2, r3
 8001928:	4938      	ldr	r1, [pc, #224]	@ (8001a0c <accInit+0x148>)
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff ff54 	bl	80017d8 <SEGGER_RTT_printf>

  //GyroControl Reg
  ret = accRead(0x11);
 8001930:	2011      	movs	r0, #17
 8001932:	f7ff ff93 	bl	800185c <accRead>
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "GYRO CONTROL REG: 0x%02X\n", ret);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	461a      	mov	r2, r3
 800193e:	4934      	ldr	r1, [pc, #208]	@ (8001a10 <accInit+0x14c>)
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ff49 	bl	80017d8 <SEGGER_RTT_printf>
  changeState = ret | 0b01010000;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800194c:	b2db      	uxtb	r3, r3
 800194e:	71bb      	strb	r3, [r7, #6]
  accWrite(0x11, &changeState);
 8001950:	1dbb      	adds	r3, r7, #6
 8001952:	4619      	mov	r1, r3
 8001954:	2011      	movs	r0, #17
 8001956:	f7ff ff57 	bl	8001808 <accWrite>
  ret = accRead(0x11);
 800195a:	2011      	movs	r0, #17
 800195c:	f7ff ff7e 	bl	800185c <accRead>
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "GYRO CONTROL REG UPDATED: 0x%02X\n", ret);
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	461a      	mov	r2, r3
 8001968:	492a      	ldr	r1, [pc, #168]	@ (8001a14 <accInit+0x150>)
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff ff34 	bl	80017d8 <SEGGER_RTT_printf>

  //
  ret = accRead(0x13);
 8001970:	2013      	movs	r0, #19
 8001972:	f7ff ff73 	bl	800185c <accRead>
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  changeState = ret | 0b01000000;
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	b2db      	uxtb	r3, r3
 8001982:	71bb      	strb	r3, [r7, #6]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	461a      	mov	r2, r3
 8001988:	4923      	ldr	r1, [pc, #140]	@ (8001a18 <accInit+0x154>)
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff ff24 	bl	80017d8 <SEGGER_RTT_printf>
  accWrite(0x13, &changeState);
 8001990:	1dbb      	adds	r3, r7, #6
 8001992:	4619      	mov	r1, r3
 8001994:	2013      	movs	r0, #19
 8001996:	f7ff ff37 	bl	8001808 <accWrite>
  ret = accRead(0x13);
 800199a:	2013      	movs	r0, #19
 800199c:	f7ff ff5e 	bl	800185c <accRead>
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	461a      	mov	r2, r3
 80019a8:	491b      	ldr	r1, [pc, #108]	@ (8001a18 <accInit+0x154>)
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff ff14 	bl	80017d8 <SEGGER_RTT_printf>

  // Control Register 7
  ret = accRead(0x16);
 80019b0:	2016      	movs	r0, #22
 80019b2:	f7ff ff53 	bl	800185c <accRead>
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  changeState = ret | 0b00000000;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	71bb      	strb	r3, [r7, #6]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4915      	ldr	r1, [pc, #84]	@ (8001a18 <accInit+0x154>)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ff07 	bl	80017d8 <SEGGER_RTT_printf>
  accWrite(0x16, &changeState);
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	4619      	mov	r1, r3
 80019ce:	2016      	movs	r0, #22
 80019d0:	f7ff ff1a 	bl	8001808 <accWrite>
  ret = accRead(0x16);
 80019d4:	2016      	movs	r0, #22
 80019d6:	f7ff ff41 	bl	800185c <accRead>
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_RTT_printf(0, "CONTROL REG 4: 0x%02X\n", ret);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	461a      	mov	r2, r3
 80019e2:	490d      	ldr	r1, [pc, #52]	@ (8001a18 <accInit+0x154>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fef7 	bl	80017d8 <SEGGER_RTT_printf>


  // Control Register 7
  accWrite(0x12, 0x01);
 80019ea:	2101      	movs	r1, #1
 80019ec:	2012      	movs	r0, #18
 80019ee:	f7ff ff0b 	bl	8001808 <accWrite>

}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0800dcc0 	.word	0x0800dcc0
 8001a00:	0800dce4 	.word	0x0800dce4
 8001a04:	0800dd00 	.word	0x0800dd00
 8001a08:	0800dd14 	.word	0x0800dd14
 8001a0c:	0800dd38 	.word	0x0800dd38
 8001a10:	0800dd64 	.word	0x0800dd64
 8001a14:	0800dd80 	.word	0x0800dd80
 8001a18:	0800dda4 	.word	0x0800dda4

08001a1c <accTask>:

void accTask(void){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  uint8_t LSB;
  uint16_t combinedZ;
  uint16_t combinedY;
  uint16_t combinedX;

  MSB = accRead(0x2D);
 8001a22:	202d      	movs	r0, #45	@ 0x2d
 8001a24:	f7ff ff1a 	bl	800185c <accRead>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  LSB = accRead(0x2C);
 8001a2c:	202c      	movs	r0, #44	@ 0x2c
 8001a2e:	f7ff ff15 	bl	800185c <accRead>
 8001a32:	4603      	mov	r3, r0
 8001a34:	71bb      	strb	r3, [r7, #6]
  combinedZ = (MSB << 8) | LSB;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	80bb      	strh	r3, [r7, #4]

  MSB = accRead(0x2B);
 8001a46:	202b      	movs	r0, #43	@ 0x2b
 8001a48:	f7ff ff08 	bl	800185c <accRead>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  LSB = accRead(0x2A);
 8001a50:	202a      	movs	r0, #42	@ 0x2a
 8001a52:	f7ff ff03 	bl	800185c <accRead>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71bb      	strb	r3, [r7, #6]
  combinedY = (MSB << 8) | LSB;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	807b      	strh	r3, [r7, #2]

  MSB = accRead(0x29);
 8001a6a:	2029      	movs	r0, #41	@ 0x29
 8001a6c:	f7ff fef6 	bl	800185c <accRead>
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  LSB = accRead(0x28);
 8001a74:	2028      	movs	r0, #40	@ 0x28
 8001a76:	f7ff fef1 	bl	800185c <accRead>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71bb      	strb	r3, [r7, #6]
  combinedX = (MSB << 8) | LSB;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	79bb      	ldrb	r3, [r7, #6]
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	803b      	strh	r3, [r7, #0]

  // +- 4g

  zAcceleration = 4.0f * gravity * ((float)combinedZ / 65536.0f);
 8001a8e:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <accTask+0x14c>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa6:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8001b6c <accTask+0x150>
 8001aaa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <accTask+0x154>)
 8001ab4:	edc3 7a00 	vstr	s15, [r3]
  yAcceleration = 4.0f * gravity * ((float)combinedY / 65536.0f);
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <accTask+0x14c>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001ac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ad0:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8001b6c <accTask+0x150>
 8001ad4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <accTask+0x158>)
 8001ade:	edc3 7a00 	vstr	s15, [r3]
  xAcceleration = 4.0f * gravity * ((float)combinedX / 65536.0f);
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <accTask+0x14c>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af0:	883b      	ldrh	r3, [r7, #0]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001afa:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8001b6c <accTask+0x150>
 8001afe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <accTask+0x15c>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]

  firFilterUpdate(&lpfAccZ, zAcceleration, 'A');
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <accTask+0x154>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	2141      	movs	r1, #65	@ 0x41
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	4818      	ldr	r0, [pc, #96]	@ (8001b7c <accTask+0x160>)
 8001b1a:	f000 f94f 	bl	8001dbc <firFilterUpdate>
  firFilterUpdate(&lpfAccY, yAcceleration, 'A');
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <accTask+0x158>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	2141      	movs	r1, #65	@ 0x41
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	4815      	ldr	r0, [pc, #84]	@ (8001b80 <accTask+0x164>)
 8001b2c:	f000 f946 	bl	8001dbc <firFilterUpdate>
  firFilterUpdate(&lpfAccX, xAcceleration, 'A');
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <accTask+0x15c>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	2141      	movs	r1, #65	@ 0x41
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <accTask+0x168>)
 8001b3e:	f000 f93d 	bl	8001dbc <firFilterUpdate>

  avgZAcceleration = lpfAccZ.out;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <accTask+0x160>)
 8001b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <accTask+0x16c>)
 8001b4a:	6013      	str	r3, [r2, #0]
  avgYAcceleration = lpfAccY.out;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <accTask+0x164>)
 8001b4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b52:	4a0e      	ldr	r2, [pc, #56]	@ (8001b8c <accTask+0x170>)
 8001b54:	6013      	str	r3, [r2, #0]
  avgXAcceleration = lpfAccX.out;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <accTask+0x168>)
 8001b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <accTask+0x174>)
 8001b5e:	6013      	str	r3, [r2, #0]

  return;
 8001b60:	bf00      	nop
}
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000138 	.word	0x20000138
 8001b6c:	47800000 	.word	0x47800000
 8001b70:	20000ac8 	.word	0x20000ac8
 8001b74:	20000ac0 	.word	0x20000ac0
 8001b78:	20000ac4 	.word	0x20000ac4
 8001b7c:	20000af0 	.word	0x20000af0
 8001b80:	20000b94 	.word	0x20000b94
 8001b84:	20000c38 	.word	0x20000c38
 8001b88:	20000aec 	.word	0x20000aec
 8001b8c:	20000ae8 	.word	0x20000ae8
 8001b90:	20000ae4 	.word	0x20000ae4

08001b94 <readTemp>:


void readTemp(void){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	uint8_t MSB;
	uint8_t LSB;
	uint16_t combinedTemperature;
	MSB = accRead(0x21);
 8001b9a:	2021      	movs	r0, #33	@ 0x21
 8001b9c:	f7ff fe5e 	bl	800185c <accRead>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
	LSB = accRead(0x20);
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f7ff fe59 	bl	800185c <accRead>
 8001baa:	4603      	mov	r3, r0
 8001bac:	71bb      	strb	r3, [r7, #6]

	combinedTemperature = (MSB << 8) | LSB;
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	80bb      	strh	r3, [r7, #4]
	temperature = 4.0f * gravity * ((float)combinedTemperature / 65536.0f);
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <readTemp+0x5c>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001bc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bcc:	88bb      	ldrh	r3, [r7, #4]
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bd6:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8001bf4 <readTemp+0x60>
 8001bda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <readTemp+0x64>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000138 	.word	0x20000138
 8001bf4:	47800000 	.word	0x47800000
 8001bf8:	20000abc 	.word	0x20000abc

08001bfc <readGyro>:

void readGyro(void){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	  uint8_t LSB;
	  uint16_t combinedRoll;
	  uint16_t combinedYaw;
	  uint16_t combinedPitch;

	  MSB = accRead(0x23);
 8001c02:	2023      	movs	r0, #35	@ 0x23
 8001c04:	f7ff fe2a 	bl	800185c <accRead>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
	  LSB = accRead(0x22);
 8001c0c:	2022      	movs	r0, #34	@ 0x22
 8001c0e:	f7ff fe25 	bl	800185c <accRead>
 8001c12:	4603      	mov	r3, r0
 8001c14:	71bb      	strb	r3, [r7, #6]
	  combinedRoll = (MSB << 8) | LSB;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	80bb      	strh	r3, [r7, #4]

	  MSB = accRead(0x27);
 8001c26:	2027      	movs	r0, #39	@ 0x27
 8001c28:	f7ff fe18 	bl	800185c <accRead>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
	  LSB = accRead(0x26);
 8001c30:	2026      	movs	r0, #38	@ 0x26
 8001c32:	f7ff fe13 	bl	800185c <accRead>
 8001c36:	4603      	mov	r3, r0
 8001c38:	71bb      	strb	r3, [r7, #6]
	  combinedYaw = (MSB << 8) | LSB;
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	807b      	strh	r3, [r7, #2]

	  MSB = accRead(0x25);
 8001c4a:	2025      	movs	r0, #37	@ 0x25
 8001c4c:	f7ff fe06 	bl	800185c <accRead>
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
	  LSB = accRead(0x24);
 8001c54:	2024      	movs	r0, #36	@ 0x24
 8001c56:	f7ff fe01 	bl	800185c <accRead>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71bb      	strb	r3, [r7, #6]
	  combinedPitch = (MSB << 8) | LSB;
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	803b      	strh	r3, [r7, #0]

	  firFilterUpdate(&lpfRoll, roll , 'G');
 8001c6e:	4b36      	ldr	r3, [pc, #216]	@ (8001d48 <readGyro+0x14c>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	2147      	movs	r1, #71	@ 0x47
 8001c76:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7a:	4834      	ldr	r0, [pc, #208]	@ (8001d4c <readGyro+0x150>)
 8001c7c:	f000 f89e 	bl	8001dbc <firFilterUpdate>
	  firFilterUpdate(&lpfPitch, pitch, 'G');
 8001c80:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <readGyro+0x154>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	2147      	movs	r1, #71	@ 0x47
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	4831      	ldr	r0, [pc, #196]	@ (8001d54 <readGyro+0x158>)
 8001c8e:	f000 f895 	bl	8001dbc <firFilterUpdate>
	  firFilterUpdate(&lpfYaw, yaw, 'G');
 8001c92:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <readGyro+0x15c>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	2147      	movs	r1, #71	@ 0x47
 8001c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9e:	482f      	ldr	r0, [pc, #188]	@ (8001d5c <readGyro+0x160>)
 8001ca0:	f000 f88c 	bl	8001dbc <firFilterUpdate>

	  roll = 4.0f * gravity * ((float)combinedRoll / 65536.0f);
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d60 <readGyro+0x164>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001cae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb2:	88bb      	ldrh	r3, [r7, #4]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cbc:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8001d64 <readGyro+0x168>
 8001cc0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <readGyro+0x14c>)
 8001cca:	edc3 7a00 	vstr	s15, [r3]
	  pitch = 4.0f * gravity * ((float)combinedPitch / 65536.0f);
 8001cce:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <readGyro+0x164>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001cd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cdc:	883b      	ldrh	r3, [r7, #0]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ce6:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8001d64 <readGyro+0x168>
 8001cea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <readGyro+0x154>)
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
	  yaw = 4.0f * gravity * ((float)combinedYaw / 65536.0f);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <readGyro+0x164>)
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d10:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8001d64 <readGyro+0x168>
 8001d14:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <readGyro+0x15c>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]

	  avgRoll = lpfRoll.out;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <readGyro+0x150>)
 8001d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001d28:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <readGyro+0x16c>)
 8001d2a:	6013      	str	r3, [r2, #0]
	  avgPitch = lpfPitch.out;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <readGyro+0x158>)
 8001d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001d32:	4a0e      	ldr	r2, [pc, #56]	@ (8001d6c <readGyro+0x170>)
 8001d34:	6013      	str	r3, [r2, #0]
	  avgYaw = lpfYaw.out;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <readGyro+0x160>)
 8001d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d70 <readGyro+0x174>)
 8001d3e:	6013      	str	r3, [r2, #0]

}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000acc 	.word	0x20000acc
 8001d4c:	20000cdc 	.word	0x20000cdc
 8001d50:	20000ad0 	.word	0x20000ad0
 8001d54:	20000d80 	.word	0x20000d80
 8001d58:	20000ad4 	.word	0x20000ad4
 8001d5c:	20000e24 	.word	0x20000e24
 8001d60:	20000138 	.word	0x20000138
 8001d64:	47800000 	.word	0x47800000
 8001d68:	20000ad8 	.word	0x20000ad8
 8001d6c:	20000adc 	.word	0x20000adc
 8001d70:	20000ae0 	.word	0x20000ae0

08001d74 <firFilterInit>:
        output[i] = y0;
    }
}


void firFilterInit(FIRFilter * fir){
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e009      	b.n	8001d96 <firFilterInit+0x22>
    fir->buf[n] = 0.0f;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b26      	cmp	r3, #38	@ 0x26
 8001d9a:	ddf2      	ble.n	8001d82 <firFilterInit+0xe>
  }
  fir->bufIndex = 0;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  fir->out      = 0.0f;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <firFilterUpdate>:

float firFilterUpdate(FIRFilter * fir, float inp, char sensor){
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	71fb      	strb	r3, [r7, #7]
  fir->buf[fir->bufIndex] = inp;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	601a      	str	r2, [r3, #0]
  fir->bufIndex++;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  if(fir->bufIndex == FIR_FILTER_LENGTH){
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001df0:	2b27      	cmp	r3, #39	@ 0x27
 8001df2:	d103      	bne.n	8001dfc <firFilterUpdate+0x40>
    fir->bufIndex = 0;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }
  fir->out = 0.0f;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  int sumIndex = fir->bufIndex;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e0c:	617b      	str	r3, [r7, #20]

  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e03e      	b.n	8001e92 <firFilterUpdate+0xd6>
    if(sumIndex > 0){
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dd03      	ble.n	8001e22 <firFilterUpdate+0x66>
      sumIndex--;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e001      	b.n	8001e26 <firFilterUpdate+0x6a>
    }
    else{
      sumIndex = FIR_FILTER_LENGTH - 1;
 8001e22:	2326      	movs	r3, #38	@ 0x26
 8001e24:	617b      	str	r3, [r7, #20]
    }
    if(sensor == 'A'){
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b41      	cmp	r3, #65	@ 0x41
 8001e2a:	d116      	bne.n	8001e5a <firFilterUpdate+0x9e>
        fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 8001e32:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <firFilterUpdate+0xf4>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	edd3 6a00 	vldr	s13, [r3]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
 8001e58:	e018      	b.n	8001e8c <firFilterUpdate+0xd0>
    }
    else if (sensor == 'G'){
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b47      	cmp	r3, #71	@ 0x47
 8001e5e:	d115      	bne.n	8001e8c <firFilterUpdate+0xd0>
        fir->out += FIR_HIGH_PASS[n] * fir->buf[sumIndex];
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 8001e66:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <firFilterUpdate+0xf8>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
  for(int n = 0; n < FIR_FILTER_LENGTH; n++){
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b26      	cmp	r3, #38	@ 0x26
 8001e96:	ddbd      	ble.n	8001e14 <firFilterUpdate+0x58>
    }
  }
  return fir->out;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001e9e:	ee07 3a90 	vmov	s15, r3
}
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	2000009c 	.word	0x2000009c

08001eb8 <HAL_TIM_PeriodElapsedCallback>:
void reverse();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	if(htim == &htim7){
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x16>
		accTask();
 8001ec8:	f7ff fda8 	bl	8001a1c <accTask>
	}
	else if(htim == &htim10){
		readGyro();
		readTemp();
	}
}
 8001ecc:	e007      	b.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim == &htim10){
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d103      	bne.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x26>
		readGyro();
 8001ed6:	f7ff fe91 	bl	8001bfc <readGyro>
		readTemp();
 8001eda:	f7ff fe5b 	bl	8001b94 <readTemp>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000988 	.word	0x20000988
 8001eec:	200009d0 	.word	0x200009d0

08001ef0 <motorInit>:
void motorInit(){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	//motor timers start
	HAL_TIM_Base_Start(&htim3);
 8001ef4:	4823      	ldr	r0, [pc, #140]	@ (8001f84 <motorInit+0x94>)
 8001ef6:	f005 fb13 	bl	8007520 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001efa:	2100      	movs	r1, #0
 8001efc:	4821      	ldr	r0, [pc, #132]	@ (8001f84 <motorInit+0x94>)
 8001efe:	f005 fc37 	bl	8007770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001f02:	2104      	movs	r1, #4
 8001f04:	481f      	ldr	r0, [pc, #124]	@ (8001f84 <motorInit+0x94>)
 8001f06:	f005 fc33 	bl	8007770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f0a:	2108      	movs	r1, #8
 8001f0c:	481d      	ldr	r0, [pc, #116]	@ (8001f84 <motorInit+0x94>)
 8001f0e:	f005 fc2f 	bl	8007770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001f12:	210c      	movs	r1, #12
 8001f14:	481b      	ldr	r0, [pc, #108]	@ (8001f84 <motorInit+0x94>)
 8001f16:	f005 fc2b 	bl	8007770 <HAL_TIM_PWM_Start>

	htim3.Instance->CCR1 = 0; // M2 FWD
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <motorInit+0x94>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = 0; // M2 REV
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <motorInit+0x94>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3 = 0; // M1 FWD
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <motorInit+0x94>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4 = 0; // M1 FWD
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <motorInit+0x94>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_TIM_Base_Start(&htim4);
 8001f3a:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <motorInit+0x98>)
 8001f3c:	f005 faf0 	bl	8007520 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f40:	2100      	movs	r1, #0
 8001f42:	4811      	ldr	r0, [pc, #68]	@ (8001f88 <motorInit+0x98>)
 8001f44:	f005 fc14 	bl	8007770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f48:	2104      	movs	r1, #4
 8001f4a:	480f      	ldr	r0, [pc, #60]	@ (8001f88 <motorInit+0x98>)
 8001f4c:	f005 fc10 	bl	8007770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f50:	2108      	movs	r1, #8
 8001f52:	480d      	ldr	r0, [pc, #52]	@ (8001f88 <motorInit+0x98>)
 8001f54:	f005 fc0c 	bl	8007770 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f58:	210c      	movs	r1, #12
 8001f5a:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <motorInit+0x98>)
 8001f5c:	f005 fc08 	bl	8007770 <HAL_TIM_PWM_Start>

	htim4.Instance->CCR1 = 0; // M3 FWD
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <motorInit+0x98>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2 = 0; // M3 FWD
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <motorInit+0x98>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR3 = 0; //
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <motorInit+0x98>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim4.Instance->CCR4 = 0; // M4 FWD
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <motorInit+0x98>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200008f8 	.word	0x200008f8
 8001f88:	20000940 	.word	0x20000940

08001f8c <forward>:


void forward(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 10, GPIO_PIN_SET);  // en1
 8001f90:	2201      	movs	r2, #1
 8001f92:	210a      	movs	r1, #10
 8001f94:	4819      	ldr	r0, [pc, #100]	@ (8001ffc <forward+0x70>)
 8001f96:	f002 f819 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 11, GPIO_PIN_SET);  // en2
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	210b      	movs	r1, #11
 8001f9e:	4817      	ldr	r0, [pc, #92]	@ (8001ffc <forward+0x70>)
 8001fa0:	f002 f814 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 12, GPIO_PIN_SET);  // en3
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	210c      	movs	r1, #12
 8001fa8:	4814      	ldr	r0, [pc, #80]	@ (8001ffc <forward+0x70>)
 8001faa:	f002 f80f 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 13, GPIO_PIN_SET);  // en4
 8001fae:	2201      	movs	r2, #1
 8001fb0:	210d      	movs	r1, #13
 8001fb2:	4812      	ldr	r0, [pc, #72]	@ (8001ffc <forward+0x70>)
 8001fb4:	f002 f80a 	bl	8003fcc <HAL_GPIO_WritePin>

	htim3.Instance->CCR1 = 100; // M2 FWD
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <forward+0x74>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2264      	movs	r2, #100	@ 0x64
 8001fbe:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = 0; // M2 REV
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <forward+0x74>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3 = 100; // M1 FWD
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <forward+0x74>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2264      	movs	r2, #100	@ 0x64
 8001fce:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4 = 0; // M1 REV
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <forward+0x74>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40

	htim4.Instance->CCR1 = 100; // M3 FWD
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <forward+0x78>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2264      	movs	r2, #100	@ 0x64
 8001fde:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2 = 0; // M3 REV
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <forward+0x78>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR3 = 100; // M4 FWD
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <forward+0x78>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2264      	movs	r2, #100	@ 0x64
 8001fee:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim4.Instance->CCR4 = 0; // M4 REV
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <forward+0x78>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40020400 	.word	0x40020400
 8002000:	200008f8 	.word	0x200008f8
 8002004:	20000940 	.word	0x20000940

08002008 <reverse>:

void reverse(){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 10, GPIO_PIN_SET);  // en1
 800200c:	2201      	movs	r2, #1
 800200e:	210a      	movs	r1, #10
 8002010:	4819      	ldr	r0, [pc, #100]	@ (8002078 <reverse+0x70>)
 8002012:	f001 ffdb 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 11, GPIO_PIN_SET);  // en2
 8002016:	2201      	movs	r2, #1
 8002018:	210b      	movs	r1, #11
 800201a:	4817      	ldr	r0, [pc, #92]	@ (8002078 <reverse+0x70>)
 800201c:	f001 ffd6 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 12, GPIO_PIN_SET);  // en3
 8002020:	2201      	movs	r2, #1
 8002022:	210c      	movs	r1, #12
 8002024:	4814      	ldr	r0, [pc, #80]	@ (8002078 <reverse+0x70>)
 8002026:	f001 ffd1 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 13, GPIO_PIN_SET);  // en4
 800202a:	2201      	movs	r2, #1
 800202c:	210d      	movs	r1, #13
 800202e:	4812      	ldr	r0, [pc, #72]	@ (8002078 <reverse+0x70>)
 8002030:	f001 ffcc 	bl	8003fcc <HAL_GPIO_WritePin>

	htim3.Instance->CCR1 = 0; // M2 FWD
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <reverse+0x74>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = 100; // M2 REV
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <reverse+0x74>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2264      	movs	r2, #100	@ 0x64
 8002042:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3 = 0; // M1 FWD
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <reverse+0x74>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4 = 0; // M1 REV
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <reverse+0x74>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	641a      	str	r2, [r3, #64]	@ 0x40

	htim4.Instance->CCR1 = 0; // M3 FWD
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <reverse+0x78>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2 = 100; // M3 REV
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <reverse+0x78>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2264      	movs	r2, #100	@ 0x64
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR3 = 0; // M4 FWD
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <reverse+0x78>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim4.Instance->CCR4 = 100; // M4 REV
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <reverse+0x78>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2264      	movs	r2, #100	@ 0x64
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020400 	.word	0x40020400
 800207c:	200008f8 	.word	0x200008f8
 8002080:	20000940 	.word	0x20000940

08002084 <left>:

void left(){
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 10, GPIO_PIN_SET);  // en1
 8002088:	2201      	movs	r2, #1
 800208a:	210a      	movs	r1, #10
 800208c:	4819      	ldr	r0, [pc, #100]	@ (80020f4 <left+0x70>)
 800208e:	f001 ff9d 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 11, GPIO_PIN_SET);  // en2
 8002092:	2201      	movs	r2, #1
 8002094:	210b      	movs	r1, #11
 8002096:	4817      	ldr	r0, [pc, #92]	@ (80020f4 <left+0x70>)
 8002098:	f001 ff98 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 12, GPIO_PIN_SET);  // en3
 800209c:	2201      	movs	r2, #1
 800209e:	210c      	movs	r1, #12
 80020a0:	4814      	ldr	r0, [pc, #80]	@ (80020f4 <left+0x70>)
 80020a2:	f001 ff93 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 13, GPIO_PIN_SET);  // en4
 80020a6:	2201      	movs	r2, #1
 80020a8:	210d      	movs	r1, #13
 80020aa:	4812      	ldr	r0, [pc, #72]	@ (80020f4 <left+0x70>)
 80020ac:	f001 ff8e 	bl	8003fcc <HAL_GPIO_WritePin>

	htim3.Instance->CCR1 = 0; // M2 FWD
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <left+0x74>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = 100; // M2 REV
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <left+0x74>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2264      	movs	r2, #100	@ 0x64
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3 = 0; // M1 FWD
 80020c0:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <left+0x74>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2200      	movs	r2, #0
 80020c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4 = 100; // M1 REV
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <left+0x74>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2264      	movs	r2, #100	@ 0x64
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40

	htim4.Instance->CCR1 = 100; // M3 FWD
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <left+0x78>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2264      	movs	r2, #100	@ 0x64
 80020d6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2 = 0; // M3 REV
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <left+0x78>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR3 = 100; // M4 FWD
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <left+0x78>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2264      	movs	r2, #100	@ 0x64
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim4.Instance->CCR4 = 0; // M4 REV
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <left+0x78>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020400 	.word	0x40020400
 80020f8:	200008f8 	.word	0x200008f8
 80020fc:	20000940 	.word	0x20000940

08002100 <right>:

void right(){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 10, GPIO_PIN_SET);  // en1
 8002104:	2201      	movs	r2, #1
 8002106:	210a      	movs	r1, #10
 8002108:	4819      	ldr	r0, [pc, #100]	@ (8002170 <right+0x70>)
 800210a:	f001 ff5f 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 11, GPIO_PIN_SET);  // en2
 800210e:	2201      	movs	r2, #1
 8002110:	210b      	movs	r1, #11
 8002112:	4817      	ldr	r0, [pc, #92]	@ (8002170 <right+0x70>)
 8002114:	f001 ff5a 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 12, GPIO_PIN_SET);  // en3
 8002118:	2201      	movs	r2, #1
 800211a:	210c      	movs	r1, #12
 800211c:	4814      	ldr	r0, [pc, #80]	@ (8002170 <right+0x70>)
 800211e:	f001 ff55 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 13, GPIO_PIN_SET);  // en4
 8002122:	2201      	movs	r2, #1
 8002124:	210d      	movs	r1, #13
 8002126:	4812      	ldr	r0, [pc, #72]	@ (8002170 <right+0x70>)
 8002128:	f001 ff50 	bl	8003fcc <HAL_GPIO_WritePin>

	htim3.Instance->CCR1 = 100; // M2 FWD
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <right+0x74>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2264      	movs	r2, #100	@ 0x64
 8002132:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = 0; // M2 REV
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <right+0x74>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3 = 100; // M1 FWD
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <right+0x74>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2264      	movs	r2, #100	@ 0x64
 8002142:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4 = 0; // M1 REV
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <right+0x74>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

	htim4.Instance->CCR1 = 0; // M3 FWD
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <right+0x78>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2 = 100; // M3 REV
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <right+0x78>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2264      	movs	r2, #100	@ 0x64
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR3 = 0; // M4 FWD
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <right+0x78>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim4.Instance->CCR4 = 100; // M4 REV
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <right+0x78>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2264      	movs	r2, #100	@ 0x64
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020400 	.word	0x40020400
 8002174:	200008f8 	.word	0x200008f8
 8002178:	20000940 	.word	0x20000940

0800217c <stopMotors>:

void stopMotors(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, 10, GPIO_PIN_RESET);  // en1
 8002180:	2200      	movs	r2, #0
 8002182:	210a      	movs	r1, #10
 8002184:	4809      	ldr	r0, [pc, #36]	@ (80021ac <stopMotors+0x30>)
 8002186:	f001 ff21 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 11, GPIO_PIN_RESET);  // en2
 800218a:	2200      	movs	r2, #0
 800218c:	210b      	movs	r1, #11
 800218e:	4807      	ldr	r0, [pc, #28]	@ (80021ac <stopMotors+0x30>)
 8002190:	f001 ff1c 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 12, GPIO_PIN_RESET);  // en3
 8002194:	2200      	movs	r2, #0
 8002196:	210c      	movs	r1, #12
 8002198:	4804      	ldr	r0, [pc, #16]	@ (80021ac <stopMotors+0x30>)
 800219a:	f001 ff17 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, 13, GPIO_PIN_RESET);  // en4
 800219e:	2200      	movs	r2, #0
 80021a0:	210d      	movs	r1, #13
 80021a2:	4802      	ldr	r0, [pc, #8]	@ (80021ac <stopMotors+0x30>)
 80021a4:	f001 ff12 	bl	8003fcc <HAL_GPIO_WritePin>

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40020400 	.word	0x40020400

080021b0 <HAL_TIM_IC_CaptureCallback>:
/*************************************************************
                      STEREOSENSOR CODE
**************************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7f1b      	ldrb	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d17e      	bne.n	80022be <HAL_TIM_IC_CaptureCallback+0x10e>
	  {
		if (Is_First_Captured_1 == 0) // if the first value is not captured
 80021c0:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11a      	bne.n	80021fe <HAL_TIM_IC_CaptureCallback+0x4e>
		{
		  IC_Val1_Left = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4); // read the first value
 80021c8:	210c      	movs	r1, #12
 80021ca:	4842      	ldr	r0, [pc, #264]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021cc:	f005 ffb6 	bl	800813c <HAL_TIM_ReadCapturedValue>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a41      	ldr	r2, [pc, #260]	@ (80022d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80021d4:	6013      	str	r3, [r2, #0]
		  Is_First_Captured_1 = 1;  // set the first captured as true
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
		  // Now change the polarity to falling edge
		  __HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80021dc:	4b3f      	ldr	r3, [pc, #252]	@ (80022dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a1a      	ldr	r2, [r3, #32]
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020a 	bic.w	r2, r2, #10
 80021ea:	621a      	str	r2, [r3, #32]
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0202 	orr.w	r2, r2, #2
 80021fa:	621a      	str	r2, [r3, #32]
		  __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
		  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_4);
		}
	  }

}
 80021fc:	e05f      	b.n	80022be <HAL_TIM_IC_CaptureCallback+0x10e>
		else if (Is_First_Captured_1 == 1)   // if the first is already captured
 80021fe:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d15b      	bne.n	80022be <HAL_TIM_IC_CaptureCallback+0x10e>
		  IC_Val2_Left = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4);  // read second value
 8002206:	210c      	movs	r1, #12
 8002208:	4832      	ldr	r0, [pc, #200]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 800220a:	f005 ff97 	bl	800813c <HAL_TIM_ReadCapturedValue>
 800220e:	4603      	mov	r3, r0
 8002210:	4a33      	ldr	r2, [pc, #204]	@ (80022e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002212:	6013      	str	r3, [r2, #0]
		  if (IC_Val2_Left > IC_Val1_Left)
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d907      	bls.n	8002230 <HAL_TIM_IC_CaptureCallback+0x80>
			Difference = IC_Val2_Left-IC_Val1_Left;
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b2c      	ldr	r3, [pc, #176]	@ (80022d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	4a2e      	ldr	r2, [pc, #184]	@ (80022e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00f      	b.n	8002250 <HAL_TIM_IC_CaptureCallback+0xa0>
		  else if (IC_Val1_Left > IC_Val2_Left)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d909      	bls.n	8002250 <HAL_TIM_IC_CaptureCallback+0xa0>
			Difference = (0xffff - IC_Val1_Left) + IC_Val2_Left;
 800223c:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800224a:	33ff      	adds	r3, #255	@ 0xff
 800224c:	4a25      	ldr	r2, [pc, #148]	@ (80022e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800224e:	6013      	str	r3, [r2, #0]
		  Distance_Front = (float)Difference * .034/2;
 8002250:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225c:	ee17 0a90 	vmov	r0, s15
 8002260:	f7fe f98a 	bl	8000578 <__aeabi_f2d>
 8002264:	a318      	add	r3, pc, #96	@ (adr r3, 80022c8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe f9dd 	bl	8000628 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800227e:	f7fe fafd 	bl	800087c <__aeabi_ddiv>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fbdf 	bl	8000a4c <__aeabi_d2f>
 800228e:	4603      	mov	r3, r0
 8002290:	4a15      	ldr	r2, [pc, #84]	@ (80022e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002292:	6013      	str	r3, [r2, #0]
		  Is_First_Captured_1 = 0; // set it back to false
 8002294:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80022a8:	621a      	str	r2, [r3, #32]
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a12      	ldr	r2, [r2, #32]
 80022b4:	621a      	str	r2, [r3, #32]
		  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80022b6:	210c      	movs	r1, #12
 80022b8:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80022ba:	f005 fb7b 	bl	80079b4 <HAL_TIM_IC_Stop_IT>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	b020c49c 	.word	0xb020c49c
 80022cc:	3fa16872 	.word	0x3fa16872
 80022d0:	20000ab4 	.word	0x20000ab4
 80022d4:	200008b0 	.word	0x200008b0
 80022d8:	20000aa8 	.word	0x20000aa8
 80022dc:	200008f8 	.word	0x200008f8
 80022e0:	20000aac 	.word	0x20000aac
 80022e4:	20000ab0 	.word	0x20000ab0
 80022e8:	20000ab8 	.word	0x20000ab8

080022ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b0cd      	sub	sp, #308	@ 0x134
 80022f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f2:	f001 f8bd 	bl	8003470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f6:	f000 f8c3 	bl	8002480 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_USB_DEVICE_Init();
 80022fa:	f00a fa59 	bl	800c7b0 <MX_USB_DEVICE_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f000 fc5d 	bl	8002bbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002302:	f000 f9a9 	bl	8002658 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002306:	f000 f9dd 	bl	80026c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800230a:	f000 fa2b 	bl	8002764 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800230e:	f000 fc2b 	bl	8002b68 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002312:	f000 f921 	bl	8002558 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002316:	f000 fab5 	bl	8002884 <MX_TIM3_Init>
  MX_TIM4_Init();
 800231a:	f000 fb2d 	bl	8002978 <MX_TIM4_Init>
  MX_I2C3_Init();
 800231e:	f000 f96d 	bl	80025fc <MX_I2C3_Init>
  MX_TIM7_Init();
 8002322:	f000 fba3 	bl	8002a6c <MX_TIM7_Init>
  MX_TIM14_Init();
 8002326:	f000 fbfb 	bl	8002b20 <MX_TIM14_Init>
  MX_USB_DEVICE_Init();
 800232a:	f00a fa41 	bl	800c7b0 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 800232e:	f000 fbd3 	bl	8002ad8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  char rxBuffer[8];

  char txBuffer[8];

  motorInit();
 8002332:	f7ff fddd 	bl	8001ef0 <motorInit>
  accInit();
 8002336:	f7ff fac5 	bl	80018c4 <accInit>
  firFilterInit(&lpfAccZ);
 800233a:	4843      	ldr	r0, [pc, #268]	@ (8002448 <main+0x15c>)
 800233c:	f7ff fd1a 	bl	8001d74 <firFilterInit>
  firFilterInit(&lpfAccY);
 8002340:	4842      	ldr	r0, [pc, #264]	@ (800244c <main+0x160>)
 8002342:	f7ff fd17 	bl	8001d74 <firFilterInit>
  firFilterInit(&lpfAccX);
 8002346:	4842      	ldr	r0, [pc, #264]	@ (8002450 <main+0x164>)
 8002348:	f7ff fd14 	bl	8001d74 <firFilterInit>
  firFilterInit(&lpfRoll);
 800234c:	4841      	ldr	r0, [pc, #260]	@ (8002454 <main+0x168>)
 800234e:	f7ff fd11 	bl	8001d74 <firFilterInit>
  firFilterInit(&lpfPitch);
 8002352:	4841      	ldr	r0, [pc, #260]	@ (8002458 <main+0x16c>)
 8002354:	f7ff fd0e 	bl	8001d74 <firFilterInit>
  firFilterInit(&lpfYaw);
 8002358:	4840      	ldr	r0, [pc, #256]	@ (800245c <main+0x170>)
 800235a:	f7ff fd0b 	bl	8001d74 <firFilterInit>
  HAL_TIM_Base_Start_IT(&htim7); // accelerometer sampling timer
 800235e:	4840      	ldr	r0, [pc, #256]	@ (8002460 <main+0x174>)
 8002360:	f005 f946 	bl	80075f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); // gyro sampling timer
 8002364:	483f      	ldr	r0, [pc, #252]	@ (8002464 <main+0x178>)
 8002366:	f005 f943 	bl	80075f0 <HAL_TIM_Base_Start_IT>
  char * newData[64];
  int blink = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    /* USER CODE BEGIN 3 */
	  int result;


	  memset(data, 0, BUFFER_SIZE);
 8002370:	2240      	movs	r2, #64	@ 0x40
 8002372:	2100      	movs	r1, #0
 8002374:	483c      	ldr	r0, [pc, #240]	@ (8002468 <main+0x17c>)
 8002376:	f00b f811 	bl	800d39c <memset>
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d\n",
 800237a:	4b3c      	ldr	r3, [pc, #240]	@ (800246c <main+0x180>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eefd 6ae7 	vcvt.s32.f32	s13, s15
			  	  	  	 (int)avgXAcceleration,
			  	         (int)((avgXAcceleration - (int)avgXAcceleration) * 100),
 8002384:	4b39      	ldr	r3, [pc, #228]	@ (800246c <main+0x180>)
 8002386:	ed93 7a00 	vldr	s14, [r3]
 800238a:	4b38      	ldr	r3, [pc, #224]	@ (800246c <main+0x180>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002470 <main+0x184>
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d\n",
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 2a90 	vmov	r2, s15
 80023ac:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <main+0x188>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b6:	ee17 1a90 	vmov	r1, s15
			  	  	  	 (int)avgYAcceleration,
			  	         (int)((avgYAcceleration - (int)avgYAcceleration) * 100),
 80023ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <main+0x188>)
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002474 <main+0x188>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002470 <main+0x184>
 80023d6:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d\n",
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 0a90 	vmov	r0, s15
 80023e2:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <main+0x18c>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ec:	ee17 4a90 	vmov	r4, s15
	                     (int)avgZAcceleration,
	                     (int)((avgZAcceleration - (int)avgZAcceleration) * 100));
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <main+0x18c>)
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <main+0x18c>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002408:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002470 <main+0x184>
 800240c:	ee67 7a87 	vmul.f32	s15, s15, s14
	  result = snprintf(data, BUFFER_SIZE, "AvgX: %d.%02d, AvgY: %d.%02d, AvgZ: %d.%02d\n",
 8002410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	9304      	str	r3, [sp, #16]
 800241a:	9403      	str	r4, [sp, #12]
 800241c:	9002      	str	r0, [sp, #8]
 800241e:	9101      	str	r1, [sp, #4]
 8002420:	9200      	str	r2, [sp, #0]
 8002422:	ee16 3a90 	vmov	r3, s13
 8002426:	4a15      	ldr	r2, [pc, #84]	@ (800247c <main+0x190>)
 8002428:	2140      	movs	r1, #64	@ 0x40
 800242a:	480f      	ldr	r0, [pc, #60]	@ (8002468 <main+0x17c>)
 800242c:	f00a ff82 	bl	800d334 <sniprintf>
 8002430:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

	  CDC_Transmit_FS(data, sizeof(data));
 8002434:	2140      	movs	r1, #64	@ 0x40
 8002436:	480c      	ldr	r0, [pc, #48]	@ (8002468 <main+0x17c>)
 8002438:	f00a faaa 	bl	800c990 <CDC_Transmit_FS>
	  HAL_Delay (1000);
 800243c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002440:	f001 f888 	bl	8003554 <HAL_Delay>
  {
 8002444:	bf00      	nop
 8002446:	e793      	b.n	8002370 <main+0x84>
 8002448:	20000af0 	.word	0x20000af0
 800244c:	20000b94 	.word	0x20000b94
 8002450:	20000c38 	.word	0x20000c38
 8002454:	20000cdc 	.word	0x20000cdc
 8002458:	20000d80 	.word	0x20000d80
 800245c:	20000e24 	.word	0x20000e24
 8002460:	20000988 	.word	0x20000988
 8002464:	200009d0 	.word	0x200009d0
 8002468:	20000ec8 	.word	0x20000ec8
 800246c:	20000ae4 	.word	0x20000ae4
 8002470:	42c80000 	.word	0x42c80000
 8002474:	20000ae8 	.word	0x20000ae8
 8002478:	20000aec 	.word	0x20000aec
 800247c:	0800ddbc 	.word	0x0800ddbc

08002480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b094      	sub	sp, #80	@ 0x50
 8002484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	2234      	movs	r2, #52	@ 0x34
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f00a ff84 	bl	800d39c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b29      	ldr	r3, [pc, #164]	@ (8002550 <SystemClock_Config+0xd0>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <SystemClock_Config+0xd0>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <SystemClock_Config+0xd0>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024c0:	2300      	movs	r3, #0
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <SystemClock_Config+0xd4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80024cc:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <SystemClock_Config+0xd4>)
 80024ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <SystemClock_Config+0xd4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024e0:	2302      	movs	r3, #2
 80024e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e8:	2310      	movs	r3, #16
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ec:	2302      	movs	r3, #2
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f0:	2300      	movs	r3, #0
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024f4:	2308      	movs	r3, #8
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80024f8:	2348      	movs	r3, #72	@ 0x48
 80024fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024fc:	2302      	movs	r3, #2
 80024fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002500:	2303      	movs	r3, #3
 8002502:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002504:	2302      	movs	r3, #2
 8002506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff47 	bl	80063a0 <HAL_RCC_OscConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002518:	f000 fbea 	bl	8002cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251c:	230f      	movs	r3, #15
 800251e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f003 f944 	bl	80057c4 <HAL_RCC_ClockConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002542:	f000 fbd5 	bl	8002cf0 <Error_Handler>
  }
}
 8002546:	bf00      	nop
 8002548:	3750      	adds	r7, #80	@ 0x50
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40007000 	.word	0x40007000

08002558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800255e:	463b      	mov	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800256a:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <MX_ADC1_Init+0x98>)
 800256c:	4a21      	ldr	r2, [pc, #132]	@ (80025f4 <MX_ADC1_Init+0x9c>)
 800256e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002570:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <MX_ADC1_Init+0x98>)
 8002572:	2200      	movs	r2, #0
 8002574:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <MX_ADC1_Init+0x98>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <MX_ADC1_Init+0x98>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <MX_ADC1_Init+0x98>)
 8002584:	2200      	movs	r2, #0
 8002586:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <MX_ADC1_Init+0x98>)
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <MX_ADC1_Init+0x98>)
 8002592:	2200      	movs	r2, #0
 8002594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <MX_ADC1_Init+0x98>)
 8002598:	4a17      	ldr	r2, [pc, #92]	@ (80025f8 <MX_ADC1_Init+0xa0>)
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800259c:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <MX_ADC1_Init+0x98>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80025a2:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <MX_ADC1_Init+0x98>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <MX_ADC1_Init+0x98>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <MX_ADC1_Init+0x98>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025b6:	480e      	ldr	r0, [pc, #56]	@ (80025f0 <MX_ADC1_Init+0x98>)
 80025b8:	f000 fff0 	bl	800359c <HAL_ADC_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80025c2:	f000 fb95 	bl	8002cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025d2:	463b      	mov	r3, r7
 80025d4:	4619      	mov	r1, r3
 80025d6:	4806      	ldr	r0, [pc, #24]	@ (80025f0 <MX_ADC1_Init+0x98>)
 80025d8:	f001 f824 	bl	8003624 <HAL_ADC_ConfigChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80025e2:	f000 fb85 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000774 	.word	0x20000774
 80025f4:	40012000 	.word	0x40012000
 80025f8:	0f000001 	.word	0x0f000001

080025fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <MX_I2C3_Init+0x50>)
 8002602:	4a13      	ldr	r2, [pc, #76]	@ (8002650 <MX_I2C3_Init+0x54>)
 8002604:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <MX_I2C3_Init+0x50>)
 8002608:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <MX_I2C3_Init+0x58>)
 800260a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <MX_I2C3_Init+0x50>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <MX_I2C3_Init+0x50>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <MX_I2C3_Init+0x50>)
 800261a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800261e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002620:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <MX_I2C3_Init+0x50>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <MX_I2C3_Init+0x50>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800262c:	4b07      	ldr	r3, [pc, #28]	@ (800264c <MX_I2C3_Init+0x50>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <MX_I2C3_Init+0x50>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002638:	4804      	ldr	r0, [pc, #16]	@ (800264c <MX_I2C3_Init+0x50>)
 800263a:	f001 fce1 	bl	8004000 <HAL_I2C_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002644:	f000 fb54 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200007bc 	.word	0x200007bc
 8002650:	40005c00 	.word	0x40005c00
 8002654:	000186a0 	.word	0x000186a0

08002658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800265c:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <MX_SPI1_Init+0x64>)
 800265e:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <MX_SPI1_Init+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <MX_SPI1_Init+0x64>)
 8002664:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <MX_SPI1_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <MX_SPI1_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <MX_SPI1_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <MX_SPI1_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <MX_SPI1_Init+0x64>)
 8002684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002688:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <MX_SPI1_Init+0x64>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002690:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <MX_SPI1_Init+0x64>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <MX_SPI1_Init+0x64>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800269c:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <MX_SPI1_Init+0x64>)
 800269e:	2200      	movs	r2, #0
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <MX_SPI1_Init+0x64>)
 80026a4:	220a      	movs	r2, #10
 80026a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026a8:	4804      	ldr	r0, [pc, #16]	@ (80026bc <MX_SPI1_Init+0x64>)
 80026aa:	f004 f917 	bl	80068dc <HAL_SPI_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026b4:	f000 fb1c 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000810 	.word	0x20000810
 80026c0:	40013000 	.word	0x40013000

080026c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d8:	463b      	mov	r3, r7
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	@ (800275c <MX_TIM1_Init+0x98>)
 80026e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002760 <MX_TIM1_Init+0x9c>)
 80026e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <MX_TIM1_Init+0x98>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	@ (800275c <MX_TIM1_Init+0x98>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <MX_TIM1_Init+0x98>)
 80026f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <MX_TIM1_Init+0x98>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <MX_TIM1_Init+0x98>)
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <MX_TIM1_Init+0x98>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800270c:	4813      	ldr	r0, [pc, #76]	@ (800275c <MX_TIM1_Init+0x98>)
 800270e:	f004 feb7 	bl	8007480 <HAL_TIM_Base_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002718:	f000 faea 	bl	8002cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4619      	mov	r1, r3
 8002728:	480c      	ldr	r0, [pc, #48]	@ (800275c <MX_TIM1_Init+0x98>)
 800272a:	f005 fc3f 	bl	8007fac <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002734:	f000 fadc 	bl	8002cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	@ (800275c <MX_TIM1_Init+0x98>)
 8002746:	f006 f9a1 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002750:	f000 face 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000868 	.word	0x20000868
 8002760:	40010000 	.word	0x40010000

08002764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0318 	add.w	r3, r7, #24
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002782:	463b      	mov	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800278e:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <MX_TIM2_Init+0x11c>)
 8002790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8002796:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <MX_TIM2_Init+0x11c>)
 8002798:	2210      	movs	r2, #16
 800279a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <MX_TIM2_Init+0x11c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <MX_TIM2_Init+0x11c>)
 80027a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027aa:	4b35      	ldr	r3, [pc, #212]	@ (8002880 <MX_TIM2_Init+0x11c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b0:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <MX_TIM2_Init+0x11c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027b6:	4832      	ldr	r0, [pc, #200]	@ (8002880 <MX_TIM2_Init+0x11c>)
 80027b8:	f004 fe62 	bl	8007480 <HAL_TIM_Base_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80027c2:	f000 fa95 	bl	8002cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	4619      	mov	r1, r3
 80027d2:	482b      	ldr	r0, [pc, #172]	@ (8002880 <MX_TIM2_Init+0x11c>)
 80027d4:	f005 fbea 	bl	8007fac <HAL_TIM_ConfigClockSource>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80027de:	f000 fa87 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80027e2:	4827      	ldr	r0, [pc, #156]	@ (8002880 <MX_TIM2_Init+0x11c>)
 80027e4:	f005 f88c 	bl	8007900 <HAL_TIM_IC_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027ee:	f000 fa7f 	bl	8002cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027fa:	f107 0310 	add.w	r3, r7, #16
 80027fe:	4619      	mov	r1, r3
 8002800:	481f      	ldr	r0, [pc, #124]	@ (8002880 <MX_TIM2_Init+0x11c>)
 8002802:	f006 f943 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800280c:	f000 fa70 	bl	8002cf0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002810:	2300      	movs	r3, #0
 8002812:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002814:	2301      	movs	r3, #1
 8002816:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002820:	463b      	mov	r3, r7
 8002822:	2200      	movs	r2, #0
 8002824:	4619      	mov	r1, r3
 8002826:	4816      	ldr	r0, [pc, #88]	@ (8002880 <MX_TIM2_Init+0x11c>)
 8002828:	f005 fa62 	bl	8007cf0 <HAL_TIM_IC_ConfigChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002832:	f000 fa5d 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002836:	463b      	mov	r3, r7
 8002838:	2204      	movs	r2, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4810      	ldr	r0, [pc, #64]	@ (8002880 <MX_TIM2_Init+0x11c>)
 800283e:	f005 fa57 	bl	8007cf0 <HAL_TIM_IC_ConfigChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002848:	f000 fa52 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800284c:	463b      	mov	r3, r7
 800284e:	2208      	movs	r2, #8
 8002850:	4619      	mov	r1, r3
 8002852:	480b      	ldr	r0, [pc, #44]	@ (8002880 <MX_TIM2_Init+0x11c>)
 8002854:	f005 fa4c 	bl	8007cf0 <HAL_TIM_IC_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 800285e:	f000 fa47 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002862:	463b      	mov	r3, r7
 8002864:	220c      	movs	r2, #12
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	@ (8002880 <MX_TIM2_Init+0x11c>)
 800286a:	f005 fa41 	bl	8007cf0 <HAL_TIM_IC_ConfigChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8002874:	f000 fa3c 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	@ 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200008b0 	.word	0x200008b0

08002884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	@ 0x28
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288a:	f107 0320 	add.w	r3, r7, #32
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
 80028a2:	615a      	str	r2, [r3, #20]
 80028a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a6:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028a8:	4a32      	ldr	r2, [pc, #200]	@ (8002974 <MX_TIM3_Init+0xf0>)
 80028aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80028ac:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028ae:	2210      	movs	r2, #16
 80028b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80028b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028ba:	22ff      	movs	r2, #255	@ 0xff
 80028bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028be:	4b2c      	ldr	r3, [pc, #176]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028ca:	4829      	ldr	r0, [pc, #164]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028cc:	f004 ff00 	bl	80076d0 <HAL_TIM_PWM_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80028d6:	f000 fa0b 	bl	8002cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	4619      	mov	r1, r3
 80028e8:	4821      	ldr	r0, [pc, #132]	@ (8002970 <MX_TIM3_Init+0xec>)
 80028ea:	f006 f8cf 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80028f4:	f000 f9fc 	bl	8002cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f8:	2360      	movs	r3, #96	@ 0x60
 80028fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002908:	1d3b      	adds	r3, r7, #4
 800290a:	2200      	movs	r2, #0
 800290c:	4619      	mov	r1, r3
 800290e:	4818      	ldr	r0, [pc, #96]	@ (8002970 <MX_TIM3_Init+0xec>)
 8002910:	f005 fa8a 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800291a:	f000 f9e9 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2204      	movs	r2, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4812      	ldr	r0, [pc, #72]	@ (8002970 <MX_TIM3_Init+0xec>)
 8002926:	f005 fa7f 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002930:	f000 f9de 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2208      	movs	r2, #8
 8002938:	4619      	mov	r1, r3
 800293a:	480d      	ldr	r0, [pc, #52]	@ (8002970 <MX_TIM3_Init+0xec>)
 800293c:	f005 fa74 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002946:	f000 f9d3 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	220c      	movs	r2, #12
 800294e:	4619      	mov	r1, r3
 8002950:	4807      	ldr	r0, [pc, #28]	@ (8002970 <MX_TIM3_Init+0xec>)
 8002952:	f005 fa69 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800295c:	f000 f9c8 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002960:	4803      	ldr	r0, [pc, #12]	@ (8002970 <MX_TIM3_Init+0xec>)
 8002962:	f000 fbf9 	bl	8003158 <HAL_TIM_MspPostInit>

}
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	@ 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200008f8 	.word	0x200008f8
 8002974:	40000400 	.word	0x40000400

08002978 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297e:	f107 0320 	add.w	r3, r7, #32
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	615a      	str	r2, [r3, #20]
 8002998:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800299a:	4b32      	ldr	r3, [pc, #200]	@ (8002a64 <MX_TIM4_Init+0xec>)
 800299c:	4a32      	ldr	r2, [pc, #200]	@ (8002a68 <MX_TIM4_Init+0xf0>)
 800299e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 80029a0:	4b30      	ldr	r3, [pc, #192]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029ae:	22ff      	movs	r2, #255	@ 0xff
 80029b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029be:	4829      	ldr	r0, [pc, #164]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029c0:	f004 fe86 	bl	80076d0 <HAL_TIM_PWM_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80029ca:	f000 f991 	bl	8002cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	4619      	mov	r1, r3
 80029dc:	4821      	ldr	r0, [pc, #132]	@ (8002a64 <MX_TIM4_Init+0xec>)
 80029de:	f006 f855 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80029e8:	f000 f982 	bl	8002cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ec:	2360      	movs	r3, #96	@ 0x60
 80029ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2200      	movs	r2, #0
 8002a00:	4619      	mov	r1, r3
 8002a02:	4818      	ldr	r0, [pc, #96]	@ (8002a64 <MX_TIM4_Init+0xec>)
 8002a04:	f005 fa10 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002a0e:	f000 f96f 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2204      	movs	r2, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4812      	ldr	r0, [pc, #72]	@ (8002a64 <MX_TIM4_Init+0xec>)
 8002a1a:	f005 fa05 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002a24:	f000 f964 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <MX_TIM4_Init+0xec>)
 8002a30:	f005 f9fa 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8002a3a:	f000 f959 	bl	8002cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	220c      	movs	r2, #12
 8002a42:	4619      	mov	r1, r3
 8002a44:	4807      	ldr	r0, [pc, #28]	@ (8002a64 <MX_TIM4_Init+0xec>)
 8002a46:	f005 f9ef 	bl	8007e28 <HAL_TIM_PWM_ConfigChannel>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002a50:	f000 f94e 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a54:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <MX_TIM4_Init+0xec>)
 8002a56:	f000 fb7f 	bl	8003158 <HAL_TIM_MspPostInit>

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	@ 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000940 	.word	0x20000940
 8002a68:	40000800 	.word	0x40000800

08002a6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a72:	463b      	mov	r3, r7
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002a7c:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <MX_TIM7_Init+0x68>)
 8002a7e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002a82:	2264      	movs	r2, #100	@ 0x64
 8002a84:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a86:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 800;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002a8e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002a92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a9a:	480d      	ldr	r0, [pc, #52]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002a9c:	f004 fcf0 	bl	8007480 <HAL_TIM_Base_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002aa6:	f000 f923 	bl	8002cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	@ (8002ad0 <MX_TIM7_Init+0x64>)
 8002ab8:	f005 ffe8 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002ac2:	f000 f915 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000988 	.word	0x20000988
 8002ad4:	40001400 	.word	0x40001400

08002ad8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002ade:	4a0f      	ldr	r2, [pc, #60]	@ (8002b1c <MX_TIM10_Init+0x44>)
 8002ae0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100;
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002ae4:	2264      	movs	r2, #100	@ 0x64
 8002ae6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002af0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002af4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b02:	4805      	ldr	r0, [pc, #20]	@ (8002b18 <MX_TIM10_Init+0x40>)
 8002b04:	f004 fcbc 	bl	8007480 <HAL_TIM_Base_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002b0e:	f000 f8ef 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200009d0 	.word	0x200009d0
 8002b1c:	40014400 	.word	0x40014400

08002b20 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b26:	4a0f      	ldr	r2, [pc, #60]	@ (8002b64 <MX_TIM14_Init+0x44>)
 8002b28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16;
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b3c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <MX_TIM14_Init+0x40>)
 8002b4c:	f004 fc98 	bl	8007480 <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002b56:	f000 f8cb 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000a18 	.word	0x20000a18
 8002b64:	40002000 	.word	0x40002000

08002b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <MX_USART1_UART_Init+0x50>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b9e:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <MX_USART1_UART_Init+0x4c>)
 8002ba0:	f006 f804 	bl	8008bac <HAL_UART_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002baa:	f000 f8a1 	bl	8002cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000a60 	.word	0x20000a60
 8002bb8:	40011000 	.word	0x40011000

08002bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	@ 0x28
 8002bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b42      	ldr	r3, [pc, #264]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a41      	ldr	r2, [pc, #260]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b38      	ldr	r3, [pc, #224]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a33      	ldr	r2, [pc, #204]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce0 <MX_GPIO_Init+0x124>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c42:	2200      	movs	r2, #0
 8002c44:	f640 412f 	movw	r1, #3119	@ 0xc2f
 8002c48:	4826      	ldr	r0, [pc, #152]	@ (8002ce4 <MX_GPIO_Init+0x128>)
 8002c4a:	f001 f9bf 	bl	8003fcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2110      	movs	r1, #16
 8002c52:	4825      	ldr	r0, [pc, #148]	@ (8002ce8 <MX_GPIO_Init+0x12c>)
 8002c54:	f001 f9ba 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002c5e:	4823      	ldr	r0, [pc, #140]	@ (8002cec <MX_GPIO_Init+0x130>)
 8002c60:	f001 f9b4 	bl	8003fcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC5 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c64:	f640 432f 	movw	r3, #3119	@ 0xc2f
 8002c68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4819      	ldr	r0, [pc, #100]	@ (8002ce4 <MX_GPIO_Init+0x128>)
 8002c7e:	f001 f811 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c82:	2310      	movs	r3, #16
 8002c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4813      	ldr	r0, [pc, #76]	@ (8002ce8 <MX_GPIO_Init+0x12c>)
 8002c9a:	f001 f803 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002c9e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002ca2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480d      	ldr	r0, [pc, #52]	@ (8002cec <MX_GPIO_Init+0x130>)
 8002cb8:	f000 fff4 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4804      	ldr	r0, [pc, #16]	@ (8002ce4 <MX_GPIO_Init+0x128>)
 8002cd4:	f000 ffe6 	bl	8003ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	@ 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020000 	.word	0x40020000
 8002cec:	40020400 	.word	0x40020400

08002cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf4:	b672      	cpsid	i
}
 8002cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <Error_Handler+0x8>

08002cfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_MspInit+0x4c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	@ 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_ADC_MspInit+0x7c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d127      	bne.n	8002dbe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_ADC_MspInit+0x80>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	4a15      	ldr	r2, [pc, #84]	@ (8002dcc <HAL_ADC_MspInit+0x80>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d7e:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <HAL_ADC_MspInit+0x80>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_ADC_MspInit+0x80>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	4a0e      	ldr	r2, [pc, #56]	@ (8002dcc <HAL_ADC_MspInit+0x80>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dcc <HAL_ADC_MspInit+0x80>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002da6:	230f      	movs	r3, #15
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002daa:	2303      	movs	r3, #3
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <HAL_ADC_MspInit+0x84>)
 8002dba:	f000 ff73 	bl	8003ca4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	@ 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40012000 	.word	0x40012000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	@ 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a29      	ldr	r2, [pc, #164]	@ (8002e98 <HAL_I2C_MspInit+0xc4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d14b      	bne.n	8002e8e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e00:	f043 0304 	orr.w	r3, r3, #4
 8002e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e06:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4a20      	ldr	r2, [pc, #128]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e22:	4b1e      	ldr	r3, [pc, #120]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e34:	2312      	movs	r3, #18
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e40:	2304      	movs	r3, #4
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4815      	ldr	r0, [pc, #84]	@ (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e4c:	f000 ff2a 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e56:	2312      	movs	r3, #18
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e62:	2304      	movs	r3, #4
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	480d      	ldr	r0, [pc, #52]	@ (8002ea4 <HAL_I2C_MspInit+0xd0>)
 8002e6e:	f000 ff19 	bl	8003ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	4a08      	ldr	r2, [pc, #32]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	@ 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40005c00 	.word	0x40005c00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	@ 0x28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	@ (8002f2c <HAL_SPI_MspInit+0x84>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12b      	bne.n	8002f22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <HAL_SPI_MspInit+0x88>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <HAL_SPI_MspInit+0x88>)
 8002ed4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_SPI_MspInit+0x88>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <HAL_SPI_MspInit+0x88>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	4a10      	ldr	r2, [pc, #64]	@ (8002f30 <HAL_SPI_MspInit+0x88>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <HAL_SPI_MspInit+0x88>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f02:	23e0      	movs	r3, #224	@ 0xe0
 8002f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f12:	2305      	movs	r3, #5
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <HAL_SPI_MspInit+0x8c>)
 8002f1e:	f000 fec1 	bl	8003ca4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f22:	bf00      	nop
 8002f24:	3728      	adds	r7, #40	@ 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40013000 	.word	0x40013000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000

08002f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	@ 0x38
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a5d      	ldr	r2, [pc, #372]	@ (80030cc <HAL_TIM_Base_MspInit+0x194>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d116      	bne.n	8002f88 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a5b      	ldr	r2, [pc, #364]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2019      	movs	r0, #25
 8002f7c:	f000 fe5b 	bl	8003c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f80:	2019      	movs	r0, #25
 8002f82:	f000 fe74 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002f86:	e09c      	b.n	80030c2 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f90:	d14c      	bne.n	800302c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	4b4e      	ldr	r3, [pc, #312]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a4d      	ldr	r2, [pc, #308]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a46      	ldr	r2, [pc, #280]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b44      	ldr	r3, [pc, #272]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	4b40      	ldr	r3, [pc, #256]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fda:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3;
 8002fe6:	f240 430c 	movw	r3, #1036	@ 0x40c
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003000:	4619      	mov	r1, r3
 8003002:	4834      	ldr	r0, [pc, #208]	@ (80030d4 <HAL_TIM_Base_MspInit+0x19c>)
 8003004:	f000 fe4e 	bl	8003ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003008:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800301a:	2301      	movs	r3, #1
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003022:	4619      	mov	r1, r3
 8003024:	482c      	ldr	r0, [pc, #176]	@ (80030d8 <HAL_TIM_Base_MspInit+0x1a0>)
 8003026:	f000 fe3d 	bl	8003ca4 <HAL_GPIO_Init>
}
 800302a:	e04a      	b.n	80030c2 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM7)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2a      	ldr	r2, [pc, #168]	@ (80030dc <HAL_TIM_Base_MspInit+0x1a4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d116      	bne.n	8003064 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	4a24      	ldr	r2, [pc, #144]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8003040:	f043 0320 	orr.w	r3, r3, #32
 8003044:	6413      	str	r3, [r2, #64]	@ 0x40
 8003046:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2037      	movs	r0, #55	@ 0x37
 8003058:	f000 fded 	bl	8003c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800305c:	2037      	movs	r0, #55	@ 0x37
 800305e:	f000 fe06 	bl	8003c6e <HAL_NVIC_EnableIRQ>
}
 8003062:	e02e      	b.n	80030c2 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM10)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1d      	ldr	r2, [pc, #116]	@ (80030e0 <HAL_TIM_Base_MspInit+0x1a8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d116      	bne.n	800309c <HAL_TIM_Base_MspInit+0x164>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8003078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307c:	6453      	str	r3, [r2, #68]	@ 0x44
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	2019      	movs	r0, #25
 8003090:	f000 fdd1 	bl	8003c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003094:	2019      	movs	r0, #25
 8003096:	f000 fdea 	bl	8003c6e <HAL_NVIC_EnableIRQ>
}
 800309a:	e012      	b.n	80030c2 <HAL_TIM_Base_MspInit+0x18a>
  else if(htim_base->Instance==TIM14)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a10      	ldr	r2, [pc, #64]	@ (80030e4 <HAL_TIM_Base_MspInit+0x1ac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10d      	bne.n	80030c2 <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a08      	ldr	r2, [pc, #32]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <HAL_TIM_Base_MspInit+0x198>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
}
 80030c2:	bf00      	nop
 80030c4:	3738      	adds	r7, #56	@ 0x38
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020000 	.word	0x40020000
 80030dc:	40001400 	.word	0x40001400
 80030e0:	40014400 	.word	0x40014400
 80030e4:	40002000 	.word	0x40002000

080030e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a15      	ldr	r2, [pc, #84]	@ (800314c <HAL_TIM_PWM_MspInit+0x64>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <HAL_TIM_PWM_MspInit+0x68>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a13      	ldr	r2, [pc, #76]	@ (8003150 <HAL_TIM_PWM_MspInit+0x68>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <HAL_TIM_PWM_MspInit+0x68>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003116:	e012      	b.n	800313e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	@ (8003154 <HAL_TIM_PWM_MspInit+0x6c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10d      	bne.n	800313e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_TIM_PWM_MspInit+0x68>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <HAL_TIM_PWM_MspInit+0x68>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6413      	str	r3, [r2, #64]	@ 0x40
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_TIM_PWM_MspInit+0x68>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40000400 	.word	0x40000400
 8003150:	40023800 	.word	0x40023800
 8003154:	40000800 	.word	0x40000800

08003158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a33      	ldr	r2, [pc, #204]	@ (8003244 <HAL_TIM_MspPostInit+0xec>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d13c      	bne.n	80031f4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	4b32      	ldr	r3, [pc, #200]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	4a31      	ldr	r2, [pc, #196]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	@ 0x30
 800318a:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a6:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031b2:	2303      	movs	r3, #3
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031c2:	2302      	movs	r3, #2
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	481f      	ldr	r0, [pc, #124]	@ (800324c <HAL_TIM_MspPostInit+0xf4>)
 80031ce:	f000 fd69 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031d2:	23c0      	movs	r3, #192	@ 0xc0
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031e2:	2302      	movs	r3, #2
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	4818      	ldr	r0, [pc, #96]	@ (8003250 <HAL_TIM_MspPostInit+0xf8>)
 80031ee:	f000 fd59 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80031f2:	e023      	b.n	800323c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a16      	ldr	r2, [pc, #88]	@ (8003254 <HAL_TIM_MspPostInit+0xfc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d11e      	bne.n	800323c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a10      	ldr	r2, [pc, #64]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <HAL_TIM_MspPostInit+0xf0>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800321a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800321e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800322c:	2302      	movs	r3, #2
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4619      	mov	r1, r3
 8003236:	4805      	ldr	r0, [pc, #20]	@ (800324c <HAL_TIM_MspPostInit+0xf4>)
 8003238:	f000 fd34 	bl	8003ca4 <HAL_GPIO_Init>
}
 800323c:	bf00      	nop
 800323e:	3728      	adds	r7, #40	@ 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40000400 	.word	0x40000400
 8003248:	40023800 	.word	0x40023800
 800324c:	40020400 	.word	0x40020400
 8003250:	40020800 	.word	0x40020800
 8003254:	40000800 	.word	0x40000800

08003258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <HAL_UART_MspInit+0x84>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d12c      	bne.n	80032d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <HAL_UART_MspInit+0x88>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	4a17      	ldr	r2, [pc, #92]	@ (80032e0 <HAL_UART_MspInit+0x88>)
 8003284:	f043 0310 	orr.w	r3, r3, #16
 8003288:	6453      	str	r3, [r2, #68]	@ 0x44
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <HAL_UART_MspInit+0x88>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_UART_MspInit+0x88>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a10      	ldr	r2, [pc, #64]	@ (80032e0 <HAL_UART_MspInit+0x88>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b0e      	ldr	r3, [pc, #56]	@ (80032e0 <HAL_UART_MspInit+0x88>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c4:	2307      	movs	r3, #7
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	4805      	ldr	r0, [pc, #20]	@ (80032e4 <HAL_UART_MspInit+0x8c>)
 80032d0:	f000 fce8 	bl	8003ca4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80032d4:	bf00      	nop
 80032d6:	3728      	adds	r7, #40	@ 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40011000 	.word	0x40011000
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020000 	.word	0x40020000

080032e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <NMI_Handler+0x4>

080032f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <MemManage_Handler+0x4>

08003300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <BusFault_Handler+0x4>

08003308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <UsageFault_Handler+0x4>

08003310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333e:	f000 f8e9 	bl	8003514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800334c:	4803      	ldr	r0, [pc, #12]	@ (800335c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800334e:	f004 fbdf 	bl	8007b10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003352:	4803      	ldr	r0, [pc, #12]	@ (8003360 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003354:	f004 fbdc 	bl	8007b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003358:	bf00      	nop
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000868 	.word	0x20000868
 8003360:	200009d0 	.word	0x200009d0

08003364 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003368:	4802      	ldr	r0, [pc, #8]	@ (8003374 <TIM7_IRQHandler+0x10>)
 800336a:	f004 fbd1 	bl	8007b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000988 	.word	0x20000988

08003378 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800337c:	4802      	ldr	r0, [pc, #8]	@ (8003388 <OTG_FS_IRQHandler+0x10>)
 800337e:	f001 f8ce 	bl	800451e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20002430 	.word	0x20002430

0800338c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003394:	4a14      	ldr	r2, [pc, #80]	@ (80033e8 <_sbrk+0x5c>)
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <_sbrk+0x60>)
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <_sbrk+0x64>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033a8:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <_sbrk+0x64>)
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <_sbrk+0x68>)
 80033ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <_sbrk+0x64>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d207      	bcs.n	80033cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033bc:	f009 fff6 	bl	800d3ac <__errno>
 80033c0:	4603      	mov	r3, r0
 80033c2:	220c      	movs	r2, #12
 80033c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033ca:	e009      	b.n	80033e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033cc:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <_sbrk+0x64>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <_sbrk+0x64>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	4a05      	ldr	r2, [pc, #20]	@ (80033f0 <_sbrk+0x64>)
 80033dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20020000 	.word	0x20020000
 80033ec:	00000400 	.word	0x00000400
 80033f0:	20000f48 	.word	0x20000f48
 80033f4:	20002c80 	.word	0x20002c80

080033f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <SystemInit+0x20>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	4a05      	ldr	r2, [pc, #20]	@ (8003418 <SystemInit+0x20>)
 8003404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800341c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003454 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003420:	f7ff ffea 	bl	80033f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003424:	480c      	ldr	r0, [pc, #48]	@ (8003458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003426:	490d      	ldr	r1, [pc, #52]	@ (800345c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003428:	4a0d      	ldr	r2, [pc, #52]	@ (8003460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800342c:	e002      	b.n	8003434 <LoopCopyDataInit>

0800342e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003432:	3304      	adds	r3, #4

08003434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003438:	d3f9      	bcc.n	800342e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343a:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800343c:	4c0a      	ldr	r4, [pc, #40]	@ (8003468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003440:	e001      	b.n	8003446 <LoopFillZerobss>

08003442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003444:	3204      	adds	r2, #4

08003446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003448:	d3fb      	bcc.n	8003442 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800344a:	f009 ffb5 	bl	800d3b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800344e:	f7fe ff4d 	bl	80022ec <main>
  bx  lr    
 8003452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800345c:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003460:	0800deb4 	.word	0x0800deb4
  ldr r2, =_sbss
 8003464:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003468:	20002c7c 	.word	0x20002c7c

0800346c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800346c:	e7fe      	b.n	800346c <ADC_IRQHandler>
	...

08003470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003474:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <HAL_Init+0x40>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0d      	ldr	r2, [pc, #52]	@ (80034b0 <HAL_Init+0x40>)
 800347a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800347e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_Init+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <HAL_Init+0x40>)
 8003486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800348a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800348c:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <HAL_Init+0x40>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a07      	ldr	r2, [pc, #28]	@ (80034b0 <HAL_Init+0x40>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003498:	2003      	movs	r0, #3
 800349a:	f000 fbc1 	bl	8003c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800349e:	200f      	movs	r0, #15
 80034a0:	f000 f808 	bl	80034b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a4:	f7ff fc2a 	bl	8002cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023c00 	.word	0x40023c00

080034b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034bc:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_InitTick+0x54>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b12      	ldr	r3, [pc, #72]	@ (800350c <HAL_InitTick+0x58>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fbd9 	bl	8003c8a <HAL_SYSTICK_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00e      	b.n	8003500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d80a      	bhi.n	80034fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e8:	2200      	movs	r2, #0
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f0:	f000 fba1 	bl	8003c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034f4:	4a06      	ldr	r2, [pc, #24]	@ (8003510 <HAL_InitTick+0x5c>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000144 	.word	0x20000144
 800350c:	2000014c 	.word	0x2000014c
 8003510:	20000148 	.word	0x20000148

08003514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_IncTick+0x20>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_IncTick+0x24>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4413      	add	r3, r2
 8003524:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <HAL_IncTick+0x24>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	2000014c 	.word	0x2000014c
 8003538:	20000f4c 	.word	0x20000f4c

0800353c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return uwTick;
 8003540:	4b03      	ldr	r3, [pc, #12]	@ (8003550 <HAL_GetTick+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000f4c 	.word	0x20000f4c

08003554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff ffee 	bl	800353c <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800356c:	d005      	beq.n	800357a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_Delay+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800357a:	bf00      	nop
 800357c:	f7ff ffde 	bl	800353c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f7      	bhi.n	800357c <HAL_Delay+0x28>
  {
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000014c 	.word	0x2000014c

0800359c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e033      	b.n	800361a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fbc6 	bl	8002d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035e2:	f023 0302 	bic.w	r3, r3, #2
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f94a 	bl	8003888 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
 800360a:	e001      	b.n	8003610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e113      	b.n	8003868 <HAL_ADC_ConfigChannel+0x244>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b09      	cmp	r3, #9
 800364e:	d925      	bls.n	800369c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68d9      	ldr	r1, [r3, #12]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	3b1e      	subs	r3, #30
 8003666:	2207      	movs	r2, #7
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43da      	mvns	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	400a      	ands	r2, r1
 8003674:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68d9      	ldr	r1, [r3, #12]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	4618      	mov	r0, r3
 8003688:	4603      	mov	r3, r0
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4403      	add	r3, r0
 800368e:	3b1e      	subs	r3, #30
 8003690:	409a      	lsls	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	e022      	b.n	80036e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	2207      	movs	r2, #7
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	400a      	ands	r2, r1
 80036be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6919      	ldr	r1, [r3, #16]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4618      	mov	r0, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4403      	add	r3, r0
 80036d8:	409a      	lsls	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d824      	bhi.n	8003734 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	3b05      	subs	r3, #5
 80036fc:	221f      	movs	r2, #31
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4618      	mov	r0, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	3b05      	subs	r3, #5
 8003726:	fa00 f203 	lsl.w	r2, r0, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34
 8003732:	e04c      	b.n	80037ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d824      	bhi.n	8003786 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	3b23      	subs	r3, #35	@ 0x23
 800374e:	221f      	movs	r2, #31
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43da      	mvns	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	400a      	ands	r2, r1
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	4618      	mov	r0, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	3b23      	subs	r3, #35	@ 0x23
 8003778:	fa00 f203 	lsl.w	r2, r0, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
 8003784:	e023      	b.n	80037ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	3b41      	subs	r3, #65	@ 0x41
 8003798:	221f      	movs	r2, #31
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	400a      	ands	r2, r1
 80037a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4618      	mov	r0, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	3b41      	subs	r3, #65	@ 0x41
 80037c2:	fa00 f203 	lsl.w	r2, r0, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ce:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <HAL_ADC_ConfigChannel+0x250>)
 80037d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a28      	ldr	r2, [pc, #160]	@ (8003878 <HAL_ADC_ConfigChannel+0x254>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d10f      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1d8>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b12      	cmp	r3, #18
 80037e2:	d10b      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1d      	ldr	r2, [pc, #116]	@ (8003878 <HAL_ADC_ConfigChannel+0x254>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d12b      	bne.n	800385e <HAL_ADC_ConfigChannel+0x23a>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <HAL_ADC_ConfigChannel+0x258>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <HAL_ADC_ConfigChannel+0x1f4>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b11      	cmp	r3, #17
 8003816:	d122      	bne.n	800385e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a11      	ldr	r2, [pc, #68]	@ (800387c <HAL_ADC_ConfigChannel+0x258>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d111      	bne.n	800385e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_ADC_ConfigChannel+0x25c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a11      	ldr	r2, [pc, #68]	@ (8003884 <HAL_ADC_ConfigChannel+0x260>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	0c9a      	lsrs	r2, r3, #18
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003850:	e002      	b.n	8003858 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3b01      	subs	r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f9      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40012300 	.word	0x40012300
 8003878:	40012000 	.word	0x40012000
 800387c:	10000012 	.word	0x10000012
 8003880:	20000144 	.word	0x20000144
 8003884:	431bde83 	.word	0x431bde83

08003888 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003890:	4b79      	ldr	r3, [pc, #484]	@ (8003a78 <ADC_Init+0x1f0>)
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80038e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6899      	ldr	r1, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	4a58      	ldr	r2, [pc, #352]	@ (8003a7c <ADC_Init+0x1f4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d022      	beq.n	8003966 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800392e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6899      	ldr	r1, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	e00f      	b.n	8003986 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0202 	bic.w	r2, r2, #2
 8003994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7e1b      	ldrb	r3, [r3, #24]
 80039a0:	005a      	lsls	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80039d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	3b01      	subs	r3, #1
 80039e0:	035a      	lsls	r2, r3, #13
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	e007      	b.n	80039fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	051a      	lsls	r2, r3, #20
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a3e:	025a      	lsls	r2, r3, #9
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	029a      	lsls	r2, r3, #10
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40012300 	.word	0x40012300
 8003a7c:	0f000001 	.word	0x0f000001

08003a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	@ (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	60d3      	str	r3, [r2, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003acc:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0307 	and.w	r3, r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	db0b      	blt.n	8003b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	4907      	ldr	r1, [pc, #28]	@ (8003b1c <__NVIC_EnableIRQ+0x38>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2001      	movs	r0, #1
 8003b06:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db0a      	blt.n	8003b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	490c      	ldr	r1, [pc, #48]	@ (8003b6c <__NVIC_SetPriority+0x4c>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b48:	e00a      	b.n	8003b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4908      	ldr	r1, [pc, #32]	@ (8003b70 <__NVIC_SetPriority+0x50>)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	3b04      	subs	r3, #4
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	761a      	strb	r2, [r3, #24]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e100 	.word	0xe000e100
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	@ 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f1c3 0307 	rsb	r3, r3, #7
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	bf28      	it	cs
 8003b92:	2304      	movcs	r3, #4
 8003b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d902      	bls.n	8003ba4 <NVIC_EncodePriority+0x30>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3b03      	subs	r3, #3
 8003ba2:	e000      	b.n	8003ba6 <NVIC_EncodePriority+0x32>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc6:	43d9      	mvns	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bcc:	4313      	orrs	r3, r2
         );
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3724      	adds	r7, #36	@ 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bec:	d301      	bcc.n	8003bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00f      	b.n	8003c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8003c1c <SysTick_Config+0x40>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c00:	f7ff ff8e 	bl	8003b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <SysTick_Config+0x40>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c0a:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <SysTick_Config+0x40>)
 8003c0c:	2207      	movs	r2, #7
 8003c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	e000e010 	.word	0xe000e010

08003c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff ff29 	bl	8003a80 <__NVIC_SetPriorityGrouping>
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c48:	f7ff ff3e 	bl	8003ac8 <__NVIC_GetPriorityGrouping>
 8003c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f7ff ff8e 	bl	8003b74 <NVIC_EncodePriority>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff5d 	bl	8003b20 <__NVIC_SetPriority>
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff31 	bl	8003ae4 <__NVIC_EnableIRQ>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ffa2 	bl	8003bdc <SysTick_Config>
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	@ 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e165      	b.n	8003f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f040 8154 	bne.w	8003f86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d005      	beq.n	8003cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d130      	bne.n	8003d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 0201 	and.w	r2, r3, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d017      	beq.n	8003d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d123      	bne.n	8003de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	220f      	movs	r2, #15
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	08da      	lsrs	r2, r3, #3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3208      	adds	r2, #8
 8003de2:	69b9      	ldr	r1, [r7, #24]
 8003de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	2203      	movs	r2, #3
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0203 	and.w	r2, r3, #3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80ae 	beq.w	8003f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa4 <HAL_GPIO_Init+0x300>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e46:	4a58      	ldr	r2, [pc, #352]	@ (8003fa8 <HAL_GPIO_Init+0x304>)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8003fac <HAL_GPIO_Init+0x308>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d025      	beq.n	8003ebe <HAL_GPIO_Init+0x21a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb0 <HAL_GPIO_Init+0x30c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <HAL_GPIO_Init+0x216>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb4 <HAL_GPIO_Init+0x310>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d019      	beq.n	8003eb6 <HAL_GPIO_Init+0x212>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4c      	ldr	r2, [pc, #304]	@ (8003fb8 <HAL_GPIO_Init+0x314>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_GPIO_Init+0x20e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003fbc <HAL_GPIO_Init+0x318>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_GPIO_Init+0x20a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc0 <HAL_GPIO_Init+0x31c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <HAL_GPIO_Init+0x206>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a49      	ldr	r2, [pc, #292]	@ (8003fc4 <HAL_GPIO_Init+0x320>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_GPIO_Init+0x202>
 8003ea2:	2306      	movs	r3, #6
 8003ea4:	e00c      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	e00a      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003eaa:	2305      	movs	r3, #5
 8003eac:	e008      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e004      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e002      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f002 0203 	and.w	r2, r2, #3
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed0:	4935      	ldr	r1, [pc, #212]	@ (8003fa8 <HAL_GPIO_Init+0x304>)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ede:	4b3a      	ldr	r3, [pc, #232]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f02:	4a31      	ldr	r2, [pc, #196]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f08:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f2c:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f32:	4b25      	ldr	r3, [pc, #148]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f56:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f80:	4a11      	ldr	r2, [pc, #68]	@ (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	f67f ae96 	bls.w	8003cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3724      	adds	r7, #36	@ 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020c00 	.word	0x40020c00
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40021400 	.word	0x40021400
 8003fc4:	40021800 	.word	0x40021800
 8003fc8:	40013c00 	.word	0x40013c00

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe8:	e003      	b.n	8003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e12b      	b.n	800426a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe fed4 	bl	8002dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	@ 0x24
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004064:	f001 fca0 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4a81      	ldr	r2, [pc, #516]	@ (8004274 <HAL_I2C_Init+0x274>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d807      	bhi.n	8004084 <HAL_I2C_Init+0x84>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a80      	ldr	r2, [pc, #512]	@ (8004278 <HAL_I2C_Init+0x278>)
 8004078:	4293      	cmp	r3, r2
 800407a:	bf94      	ite	ls
 800407c:	2301      	movls	r3, #1
 800407e:	2300      	movhi	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e006      	b.n	8004092 <HAL_I2C_Init+0x92>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a7d      	ldr	r2, [pc, #500]	@ (800427c <HAL_I2C_Init+0x27c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	bf94      	ite	ls
 800408c:	2301      	movls	r3, #1
 800408e:	2300      	movhi	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0e7      	b.n	800426a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a78      	ldr	r2, [pc, #480]	@ (8004280 <HAL_I2C_Init+0x280>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0c9b      	lsrs	r3, r3, #18
 80040a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004274 <HAL_I2C_Init+0x274>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d802      	bhi.n	80040d4 <HAL_I2C_Init+0xd4>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3301      	adds	r3, #1
 80040d2:	e009      	b.n	80040e8 <HAL_I2C_Init+0xe8>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	4a69      	ldr	r2, [pc, #420]	@ (8004284 <HAL_I2C_Init+0x284>)
 80040e0:	fba2 2303 	umull	r2, r3, r2, r3
 80040e4:	099b      	lsrs	r3, r3, #6
 80040e6:	3301      	adds	r3, #1
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	495c      	ldr	r1, [pc, #368]	@ (8004274 <HAL_I2C_Init+0x274>)
 8004104:	428b      	cmp	r3, r1
 8004106:	d819      	bhi.n	800413c <HAL_I2C_Init+0x13c>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e59      	subs	r1, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fbb1 f3f3 	udiv	r3, r1, r3
 8004116:	1c59      	adds	r1, r3, #1
 8004118:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800411c:	400b      	ands	r3, r1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_I2C_Init+0x138>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1e59      	subs	r1, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004130:	3301      	adds	r3, #1
 8004132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004136:	e051      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 8004138:	2304      	movs	r3, #4
 800413a:	e04f      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d111      	bne.n	8004168 <HAL_I2C_Init+0x168>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e58      	subs	r0, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6859      	ldr	r1, [r3, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	440b      	add	r3, r1
 8004152:	fbb0 f3f3 	udiv	r3, r0, r3
 8004156:	3301      	adds	r3, #1
 8004158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e012      	b.n	800418e <HAL_I2C_Init+0x18e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	0099      	lsls	r1, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Init+0x196>
 8004192:	2301      	movs	r3, #1
 8004194:	e022      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10e      	bne.n	80041bc <HAL_I2C_Init+0x1bc>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e58      	subs	r0, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	440b      	add	r3, r1
 80041ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ba:	e00f      	b.n	80041dc <HAL_I2C_Init+0x1dc>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1e58      	subs	r0, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	0099      	lsls	r1, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	6809      	ldr	r1, [r1, #0]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800420a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6911      	ldr	r1, [r2, #16]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68d2      	ldr	r2, [r2, #12]
 8004216:	4311      	orrs	r1, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	430b      	orrs	r3, r1
 800421e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	000186a0 	.word	0x000186a0
 8004278:	001e847f 	.word	0x001e847f
 800427c:	003d08ff 	.word	0x003d08ff
 8004280:	431bde83 	.word	0x431bde83
 8004284:	10624dd3 	.word	0x10624dd3

08004288 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af02      	add	r7, sp, #8
 800428e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e108      	b.n	80044ac <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f008 fcc5 	bl	800cc44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2203      	movs	r2, #3
 80042be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042c8:	d102      	bne.n	80042d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f005 f844 	bl	8009362 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7c1a      	ldrb	r2, [r3, #16]
 80042e2:	f88d 2000 	strb.w	r2, [sp]
 80042e6:	3304      	adds	r3, #4
 80042e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ea:	f004 ff23 	bl	8009134 <USB_CoreInit>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0d5      	b.n	80044ac <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f005 f83c 	bl	8009384 <USB_SetCurrentMode>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0c6      	b.n	80044ac <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e04a      	b.n	80043ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3315      	adds	r3, #21
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3314      	adds	r3, #20
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	b298      	uxth	r0, r3
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	332e      	adds	r3, #46	@ 0x2e
 8004360:	4602      	mov	r2, r0
 8004362:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3318      	adds	r3, #24
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	331c      	adds	r3, #28
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3320      	adds	r3, #32
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	3324      	adds	r3, #36	@ 0x24
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	3301      	adds	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	791b      	ldrb	r3, [r3, #4]
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3af      	bcc.n	8004324 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e044      	b.n	8004454 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	3301      	adds	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	791b      	ldrb	r3, [r3, #4]
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	429a      	cmp	r2, r3
 800445c:	d3b5      	bcc.n	80043ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7c1a      	ldrb	r2, [r3, #16]
 8004466:	f88d 2000 	strb.w	r2, [sp]
 800446a:	3304      	adds	r3, #4
 800446c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800446e:	f004 ffd5 	bl	800941c <USB_DevInit>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e013      	b.n	80044ac <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	7b1b      	ldrb	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f001 f96e 	bl	800577c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f006 f812 	bl	800a4ce <USB_DevDisconnect>

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_PCD_Start+0x1c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e022      	b.n	8004516 <HAL_PCD_Start+0x62>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 ff1f 	bl	8009340 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f005 ffc0 	bl	800a48c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800451e:	b590      	push	{r4, r7, lr}
 8004520:	b08d      	sub	sp, #52	@ 0x34
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f006 f87e 	bl	800a636 <USB_GetMode>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 84b9 	bne.w	8004eb4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f005 ffe2 	bl	800a510 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 84af 	beq.w	8004eb2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f005 ffcf 	bl	800a510 <USB_ReadInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d107      	bne.n	800458c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f002 0202 	and.w	r2, r2, #2
 800458a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f005 ffbd 	bl	800a510 <USB_ReadInterrupts>
 8004596:	4603      	mov	r3, r0
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b10      	cmp	r3, #16
 800459e:	d161      	bne.n	8004664 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0210 	bic.w	r2, r2, #16
 80045ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	4413      	add	r3, r2
 80045cc:	3304      	adds	r3, #4
 80045ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	0c5b      	lsrs	r3, r3, #17
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d124      	bne.n	8004626 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d035      	beq.n	8004654 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6a38      	ldr	r0, [r7, #32]
 80045fc:	f005 fdf4 	bl	800a1e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800460c:	441a      	add	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	695a      	ldr	r2, [r3, #20]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800461e:	441a      	add	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	615a      	str	r2, [r3, #20]
 8004624:	e016      	b.n	8004654 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	0c5b      	lsrs	r3, r3, #17
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	2b06      	cmp	r3, #6
 8004630:	d110      	bne.n	8004654 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004638:	2208      	movs	r2, #8
 800463a:	4619      	mov	r1, r3
 800463c:	6a38      	ldr	r0, [r7, #32]
 800463e:	f005 fdd3 	bl	800a1e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800464e:	441a      	add	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0210 	orr.w	r2, r2, #16
 8004662:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f005 ff51 	bl	800a510 <USB_ReadInterrupts>
 800466e:	4603      	mov	r3, r0
 8004670:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004674:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004678:	f040 80a7 	bne.w	80047ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f005 ff56 	bl	800a536 <USB_ReadDevAllOutEpInterrupt>
 800468a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800468c:	e099      	b.n	80047c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 808e 	beq.w	80047b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f005 ff7a 	bl	800a59e <USB_ReadDevOutEPInterrupt>
 80046aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	2301      	movs	r3, #1
 80046c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fed0 	bl	8005470 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	2308      	movs	r3, #8
 80046ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 ffa6 	bl	8005640 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	461a      	mov	r2, r3
 800470c:	2310      	movs	r3, #16
 800470e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d030      	beq.n	800477c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d109      	bne.n	800473a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004734:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004738:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3304      	adds	r3, #4
 800474e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	78db      	ldrb	r3, [r3, #3]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	b2db      	uxtb	r3, r3
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f008 fb89 	bl	800ce7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	2302      	movs	r3, #2
 800477a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004792:	461a      	mov	r2, r3
 8004794:	2320      	movs	r3, #32
 8004796:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	461a      	mov	r2, r3
 80047b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	3301      	adds	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f af62 	bne.w	800468e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 fe9e 	bl	800a510 <USB_ReadInterrupts>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047de:	f040 80db 	bne.w	8004998 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f005 febf 	bl	800a56a <USB_ReadDevAllInEpInterrupt>
 80047ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80047f2:	e0cd      	b.n	8004990 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80047f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80c2 	beq.w	8004984 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f005 fee5 	bl	800a5da <USB_ReadDevInEPInterrupt>
 8004810:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d057      	beq.n	80048cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	43db      	mvns	r3, r3
 8004836:	69f9      	ldr	r1, [r7, #28]
 8004838:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800483c:	4013      	ands	r3, r2
 800483e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484c:	461a      	mov	r2, r3
 800484e:	2301      	movs	r3, #1
 8004850:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	799b      	ldrb	r3, [r3, #6]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d132      	bne.n	80048c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3320      	adds	r3, #32
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4403      	add	r3, r0
 800487a:	331c      	adds	r3, #28
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4419      	add	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4403      	add	r3, r0
 800488e:	3320      	adds	r3, #32
 8004890:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d113      	bne.n	80048c0 <HAL_PCD_IRQHandler+0x3a2>
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	3324      	adds	r3, #36	@ 0x24
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d108      	bne.n	80048c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048b8:	461a      	mov	r2, r3
 80048ba:	2101      	movs	r1, #1
 80048bc:	f005 feec 	bl	800a698 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f008 fa53 	bl	800cd72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e2:	461a      	mov	r2, r3
 80048e4:	2308      	movs	r3, #8
 80048e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fe:	461a      	mov	r2, r3
 8004900:	2310      	movs	r3, #16
 8004902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491a:	461a      	mov	r2, r3
 800491c:	2340      	movs	r3, #64	@ 0x40
 800491e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d023      	beq.n	8004972 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800492a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800492c:	6a38      	ldr	r0, [r7, #32]
 800492e:	f004 fed3 	bl	80096d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	3310      	adds	r3, #16
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	3304      	adds	r3, #4
 8004944:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	78db      	ldrb	r3, [r3, #3]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d108      	bne.n	8004960 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	b2db      	uxtb	r3, r3
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f008 faa0 	bl	800cea0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496c:	461a      	mov	r2, r3
 800496e:	2302      	movs	r3, #2
 8004970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800497c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fcea 	bl	8005358 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	3301      	adds	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	f47f af2e 	bne.w	80047f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f005 fdb7 	bl	800a510 <USB_ReadInterrupts>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ac:	d122      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d108      	bne.n	80049de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049d4:	2100      	movs	r1, #0
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f008 fc1a 	bl	800d210 <HAL_PCDEx_LPM_Callback>
 80049dc:	e002      	b.n	80049e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f008 fa3e 	bl	800ce60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80049f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f005 fd89 	bl	800a510 <USB_ReadInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a08:	d112      	bne.n	8004a30 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f008 f9fa 	bl	800ce14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004a2e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 fd6b 	bl	800a510 <USB_ReadInterrupts>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a44:	d121      	bne.n	8004a8a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004a54:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d111      	bne.n	8004a84 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	089b      	lsrs	r3, r3, #2
 8004a70:	f003 020f 	and.w	r2, r3, #15
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f008 fbc7 	bl	800d210 <HAL_PCDEx_LPM_Callback>
 8004a82:	e002      	b.n	8004a8a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f008 f9c5 	bl	800ce14 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 fd3e 	bl	800a510 <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9e:	f040 80b7 	bne.w	8004c10 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2110      	movs	r1, #16
 8004abc:	4618      	mov	r0, r3
 8004abe:	f004 fe0b 	bl	80096d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ac6:	e046      	b.n	8004b56 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ada:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004afa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b52:	3301      	adds	r3, #1
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	791b      	ldrb	r3, [r3, #4]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d3b2      	bcc.n	8004ac8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b70:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004b74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7bdb      	ldrb	r3, [r3, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b8e:	f043 030b 	orr.w	r3, r3, #11
 8004b92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ba4:	f043 030b 	orr.w	r3, r3, #11
 8004ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004baa:	e015      	b.n	8004bd8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bbe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004bc2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bd2:	f043 030b 	orr.w	r3, r3, #11
 8004bd6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004bea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f005 fd4c 	bl	800a698 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f005 fc7b 	bl	800a510 <USB_ReadInterrupts>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c24:	d123      	bne.n	8004c6e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f005 fd11 	bl	800a652 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 fdc8 	bl	80097ca <USB_GetDevSpeed>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	f000 fea3 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 8004c4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c50:	461a      	mov	r2, r3
 8004c52:	4620      	mov	r0, r4
 8004c54:	f004 fad2 	bl	80091fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f008 f8b2 	bl	800cdc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f005 fc4c 	bl	800a510 <USB_ReadInterrupts>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d10a      	bne.n	8004c98 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f008 f88f 	bl	800cda6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f002 0208 	and.w	r2, r2, #8
 8004c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f005 fc37 	bl	800a510 <USB_ReadInterrupts>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca8:	2b80      	cmp	r3, #128	@ 0x80
 8004caa:	d123      	bne.n	8004cf4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cb8:	2301      	movs	r3, #1
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbc:	e014      	b.n	8004ce8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d105      	bne.n	8004ce2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fb0a 	bl	80052f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	791b      	ldrb	r3, [r3, #4]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d3e4      	bcc.n	8004cbe <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f005 fc09 	bl	800a510 <USB_ReadInterrupts>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d08:	d13c      	bne.n	8004d84 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	e02b      	b.n	8004d68 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3318      	adds	r3, #24
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d115      	bne.n	8004d62 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da12      	bge.n	8004d62 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	3317      	adds	r3, #23
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 faca 	bl	80052f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	3301      	adds	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	791b      	ldrb	r3, [r3, #4]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d3cd      	bcc.n	8004d10 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f005 fbc1 	bl	800a510 <USB_ReadInterrupts>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d98:	d156      	bne.n	8004e48 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	e045      	b.n	8004e2c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d12e      	bne.n	8004e26 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da2b      	bge.n	8004e26 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004dda:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d121      	bne.n	8004e26 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004df4:	2201      	movs	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e22:	6053      	str	r3, [r2, #4]
            break;
 8004e24:	e008      	b.n	8004e38 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	3301      	adds	r3, #1
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	791b      	ldrb	r3, [r3, #4]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d3b3      	bcc.n	8004da0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f005 fb5f 	bl	800a510 <USB_ReadInterrupts>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5c:	d10a      	bne.n	8004e74 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f008 f830 	bl	800cec4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f005 fb49 	bl	800a510 <USB_ReadInterrupts>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d115      	bne.n	8004eb4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f008 f820 	bl	800cee0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	605a      	str	r2, [r3, #4]
 8004eb0:	e000      	b.n	8004eb4 <HAL_PCD_IRQHandler+0x996>
      return;
 8004eb2:	bf00      	nop
    }
  }
}
 8004eb4:	3734      	adds	r7, #52	@ 0x34
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}

08004eba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_PCD_SetAddress+0x1a>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e012      	b.n	8004efa <HAL_PCD_SetAddress+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f005 faa8 	bl	800a440 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	4608      	mov	r0, r1
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4603      	mov	r3, r0
 8004f12:	70fb      	strb	r3, [r7, #3]
 8004f14:	460b      	mov	r3, r1
 8004f16:	803b      	strh	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	da0f      	bge.n	8004f48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	f003 020f 	and.w	r2, r3, #15
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3310      	adds	r3, #16
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	705a      	strb	r2, [r3, #1]
 8004f46:	e00f      	b.n	8004f68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 020f 	and.w	r2, r3, #15
 8004f4e:	4613      	mov	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3304      	adds	r3, #4
 8004f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004f74:	883b      	ldrh	r3, [r7, #0]
 8004f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	78ba      	ldrb	r2, [r7, #2]
 8004f82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f96:	78bb      	ldrb	r3, [r7, #2]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d102      	bne.n	8004fa2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_PCD_EP_Open+0xae>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e00e      	b.n	8004fce <HAL_PCD_EP_Open+0xcc>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68f9      	ldr	r1, [r7, #12]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f004 fc28 	bl	8009814 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da0f      	bge.n	800500a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f003 020f 	and.w	r2, r3, #15
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	3310      	adds	r3, #16
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3304      	adds	r3, #4
 8005000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	705a      	strb	r2, [r3, #1]
 8005008:	e00f      	b.n	800502a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	4613      	mov	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	3304      	adds	r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_PCD_EP_Close+0x6e>
 8005040:	2302      	movs	r3, #2
 8005042:	e00e      	b.n	8005062 <HAL_PCD_EP_Close+0x8c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68f9      	ldr	r1, [r7, #12]
 8005052:	4618      	mov	r0, r3
 8005054:	f004 fc66 	bl	8009924 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	460b      	mov	r3, r1
 8005078:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	f003 020f 	and.w	r2, r3, #15
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	3304      	adds	r3, #4
 8005092:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ac:	7afb      	ldrb	r3, [r7, #11]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	799b      	ldrb	r3, [r3, #6]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	799b      	ldrb	r3, [r3, #6]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	f004 fd03 	bl	8009adc <USB_EPStartXfer>

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 020f 	and.w	r2, r3, #15
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	460b      	mov	r3, r1
 800511e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005120:	7afb      	ldrb	r3, [r7, #11]
 8005122:	f003 020f 	and.w	r2, r3, #15
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3310      	adds	r3, #16
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	3304      	adds	r3, #4
 8005136:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2201      	movs	r2, #1
 800514e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005150:	7afb      	ldrb	r3, [r7, #11]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	b2da      	uxtb	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	799b      	ldrb	r3, [r3, #6]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d102      	bne.n	800516a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	799b      	ldrb	r3, [r3, #6]
 8005172:	461a      	mov	r2, r3
 8005174:	6979      	ldr	r1, [r7, #20]
 8005176:	f004 fcb1 	bl	8009adc <USB_EPStartXfer>

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	7912      	ldrb	r2, [r2, #4]
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e04f      	b.n	8005242 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da0f      	bge.n	80051ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3310      	adds	r3, #16
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	705a      	strb	r2, [r3, #1]
 80051c8:	e00d      	b.n	80051e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_PCD_EP_SetStall+0x82>
 8005202:	2302      	movs	r3, #2
 8005204:	e01d      	b.n	8005242 <HAL_PCD_EP_SetStall+0xbe>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	f005 f83f 	bl	800a298 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	7999      	ldrb	r1, [r3, #6]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005232:	461a      	mov	r2, r3
 8005234:	f005 fa30 	bl	800a698 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	7912      	ldrb	r2, [r2, #4]
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e042      	b.n	80052ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800526c:	2b00      	cmp	r3, #0
 800526e:	da0f      	bge.n	8005290 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	f003 020f 	and.w	r2, r3, #15
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	3310      	adds	r3, #16
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	3304      	adds	r3, #4
 8005286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	705a      	strb	r2, [r3, #1]
 800528e:	e00f      	b.n	80052b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4413      	add	r3, r2
 80052a6:	3304      	adds	r3, #4
 80052a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_PCD_EP_ClrStall+0x86>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e00e      	b.n	80052ee <HAL_PCD_EP_ClrStall+0xa4>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68f9      	ldr	r1, [r7, #12]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 f848 	bl	800a374 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da0c      	bge.n	8005324 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	3310      	adds	r3, #16
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	3304      	adds	r3, #4
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e00c      	b.n	800533e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 020f 	and.w	r2, r3, #15
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	3304      	adds	r3, #4
 800533c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	4618      	mov	r0, r3
 8005346:	f004 fe67 	bl	800a018 <USB_EPStopXfer>
 800534a:	4603      	mov	r3, r0
 800534c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800534e:	7afb      	ldrb	r3, [r7, #11]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	@ 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3310      	adds	r3, #16
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d901      	bls.n	8005390 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e06b      	b.n	8005468 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d902      	bls.n	80053ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3303      	adds	r3, #3
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053b4:	e02a      	b.n	800540c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d902      	bls.n	80053d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3303      	adds	r3, #3
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68d9      	ldr	r1, [r3, #12]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4603      	mov	r3, r0
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f004 febc 	bl	800a16c <USB_WritePacket>

    ep->xfer_buff  += len;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	695a      	ldr	r2, [r3, #20]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	441a      	add	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	429a      	cmp	r2, r3
 8005420:	d809      	bhi.n	8005436 <PCD_WriteEmptyTxFifo+0xde>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800542a:	429a      	cmp	r2, r3
 800542c:	d203      	bcs.n	8005436 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1bf      	bne.n	80053b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	429a      	cmp	r2, r3
 8005440:	d811      	bhi.n	8005466 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	2201      	movs	r2, #1
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	43db      	mvns	r3, r3
 800545c:	6939      	ldr	r1, [r7, #16]
 800545e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005462:	4013      	ands	r3, r2
 8005464:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	333c      	adds	r3, #60	@ 0x3c
 8005488:	3304      	adds	r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	799b      	ldrb	r3, [r3, #6]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d17b      	bne.n	800559e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4a61      	ldr	r2, [pc, #388]	@ (8005638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	f240 80b9 	bls.w	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80b3 	beq.w	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	461a      	mov	r2, r3
 80054d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054d8:	6093      	str	r3, [r2, #8]
 80054da:	e0a7      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	2320      	movs	r3, #32
 80054f6:	6093      	str	r3, [r2, #8]
 80054f8:	e098      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005500:	2b00      	cmp	r3, #0
 8005502:	f040 8093 	bne.w	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4a4b      	ldr	r2, [pc, #300]	@ (8005638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d90f      	bls.n	800552e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005524:	461a      	mov	r2, r3
 8005526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800552a:	6093      	str	r3, [r2, #8]
 800552c:	e07e      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4413      	add	r3, r2
 8005540:	3304      	adds	r3, #4
 8005542:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	0159      	lsls	r1, r3, #5
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	440b      	add	r3, r1
 8005550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d114      	bne.n	8005590 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005578:	461a      	mov	r2, r3
 800557a:	2101      	movs	r1, #1
 800557c:	f005 f88c 	bl	800a698 <USB_EP0_OutStart>
 8005580:	e006      	b.n	8005590 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f007 fbd0 	bl	800cd3c <HAL_PCD_DataOutStageCallback>
 800559c:	e046      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4a26      	ldr	r2, [pc, #152]	@ (800563c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d124      	bne.n	80055f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c2:	6093      	str	r3, [r2, #8]
 80055c4:	e032      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	461a      	mov	r2, r3
 80055de:	2320      	movs	r3, #32
 80055e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f007 fba7 	bl	800cd3c <HAL_PCD_DataOutStageCallback>
 80055ee:	e01d      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d114      	bne.n	8005620 <PCD_EP_OutXfrComplete_int+0x1b0>
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005618:	461a      	mov	r2, r3
 800561a:	2100      	movs	r1, #0
 800561c:	f005 f83c 	bl	800a698 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f007 fb88 	bl	800cd3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	4f54300a 	.word	0x4f54300a
 800563c:	4f54310a 	.word	0x4f54310a

08005640 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	333c      	adds	r3, #60	@ 0x3c
 8005658:	3304      	adds	r3, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a15      	ldr	r2, [pc, #84]	@ (80056c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d90e      	bls.n	8005694 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568c:	461a      	mov	r2, r3
 800568e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005692:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f007 fb3f 	bl	800cd18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d90c      	bls.n	80056bc <PCD_EP_OutSetupPacket_int+0x7c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	799b      	ldrb	r3, [r3, #6]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d108      	bne.n	80056bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056b4:	461a      	mov	r2, r3
 80056b6:	2101      	movs	r1, #1
 80056b8:	f004 ffee 	bl	800a698 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	4f54300a 	.word	0x4f54300a

080056cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
 80056d8:	4613      	mov	r3, r2
 80056da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056ea:	883b      	ldrh	r3, [r7, #0]
 80056ec:	0419      	lsls	r1, r3, #16
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80056f8:	e028      	b.n	800574c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4413      	add	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]
 800570c:	e00d      	b.n	800572a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	3340      	adds	r3, #64	@ 0x40
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4413      	add	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	3301      	adds	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	3b01      	subs	r3, #1
 8005730:	429a      	cmp	r2, r3
 8005732:	d3ec      	bcc.n	800570e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005734:	883b      	ldrh	r3, [r7, #0]
 8005736:	0418      	lsls	r0, r3, #16
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	3b01      	subs	r3, #1
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4302      	orrs	r2, r0
 8005744:	3340      	adds	r3, #64	@ 0x40
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	f043 0303 	orr.w	r3, r3, #3
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e0cc      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d8:	4b68      	ldr	r3, [pc, #416]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d90c      	bls.n	8005800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e6:	4b65      	ldr	r3, [pc, #404]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b63      	ldr	r3, [pc, #396]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0b8      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005818:	4b59      	ldr	r3, [pc, #356]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a58      	ldr	r2, [pc, #352]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005830:	4b53      	ldr	r3, [pc, #332]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a52      	ldr	r2, [pc, #328]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800583a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800583c:	4b50      	ldr	r3, [pc, #320]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	494d      	ldr	r1, [pc, #308]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d044      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b47      	ldr	r3, [pc, #284]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d119      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d003      	beq.n	8005882 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587e:	2b03      	cmp	r3, #3
 8005880:	d107      	bne.n	8005892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	4b3f      	ldr	r3, [pc, #252]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e06f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005892:	4b3b      	ldr	r3, [pc, #236]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e067      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b37      	ldr	r3, [pc, #220]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4934      	ldr	r1, [pc, #208]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b4:	f7fd fe42 	bl	800353c <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fd fe3e 	bl	800353c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e04f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e4:	4b25      	ldr	r3, [pc, #148]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d20c      	bcs.n	800590c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b22      	ldr	r3, [pc, #136]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b20      	ldr	r3, [pc, #128]	@ (800597c <HAL_RCC_ClockConfig+0x1b8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e032      	b.n	8005972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b19      	ldr	r3, [pc, #100]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4916      	ldr	r1, [pc, #88]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005936:	4b12      	ldr	r3, [pc, #72]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	490e      	ldr	r1, [pc, #56]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800594a:	f000 fb7f 	bl	800604c <HAL_RCC_GetSysClockFreq>
 800594e:	4602      	mov	r2, r0
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	490a      	ldr	r1, [pc, #40]	@ (8005984 <HAL_RCC_ClockConfig+0x1c0>)
 800595c:	5ccb      	ldrb	r3, [r1, r3]
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	4a09      	ldr	r2, [pc, #36]	@ (8005988 <HAL_RCC_ClockConfig+0x1c4>)
 8005964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005966:	4b09      	ldr	r3, [pc, #36]	@ (800598c <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fda2 	bl	80034b4 <HAL_InitTick>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40023c00 	.word	0x40023c00
 8005980:	40023800 	.word	0x40023800
 8005984:	0800de58 	.word	0x0800de58
 8005988:	20000144 	.word	0x20000144
 800598c:	20000148 	.word	0x20000148

08005990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005996:	681b      	ldr	r3, [r3, #0]
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000144 	.word	0x20000144

080059a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059ac:	f7ff fff0 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	0a9b      	lsrs	r3, r3, #10
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4903      	ldr	r1, [pc, #12]	@ (80059cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40023800 	.word	0x40023800
 80059cc:	0800de68 	.word	0x0800de68

080059d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059d4:	f7ff ffdc 	bl	8005990 <HAL_RCC_GetHCLKFreq>
 80059d8:	4602      	mov	r2, r0
 80059da:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	0b5b      	lsrs	r3, r3, #13
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	4903      	ldr	r1, [pc, #12]	@ (80059f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e6:	5ccb      	ldrb	r3, [r1, r3]
 80059e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40023800 	.word	0x40023800
 80059f4:	0800de68 	.word	0x0800de68

080059f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	@ 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005a30:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a36:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3e:	496c      	ldr	r1, [pc, #432]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005a5e:	4b64      	ldr	r3, [pc, #400]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a64:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6c:	4960      	ldr	r1, [pc, #384]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a8c:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	4955      	ldr	r1, [pc, #340]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005aac:	2301      	movs	r3, #1
 8005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d017      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ac8:	4b49      	ldr	r3, [pc, #292]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ace:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad6:	4946      	ldr	r1, [pc, #280]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ae6:	d101      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005af4:	2301      	movs	r3, #1
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 808a 	beq.w	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0e:	4a38      	ldr	r2, [pc, #224]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b16:	4b36      	ldr	r3, [pc, #216]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b22:	4b34      	ldr	r3, [pc, #208]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b2e:	f7fd fd05 	bl	800353c <HAL_GetTick>
 8005b32:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b36:	f7fd fd01 	bl	800353c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e278      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b48:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f0      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b54:	4b26      	ldr	r3, [pc, #152]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d02f      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6c:	6a3a      	ldr	r2, [r7, #32]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d028      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b72:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b7a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b82:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b88:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b8e:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d114      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fd fccf 	bl	800353c <HAL_GetTick>
 8005b9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fd fccb 	bl	800353c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e240      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ee      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd0:	d114      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005bd2:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be6:	4902      	ldr	r1, [pc, #8]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	608b      	str	r3, [r1, #8]
 8005bec:	e00c      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42470e40 	.word	0x42470e40
 8005bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4a49      	ldr	r2, [pc, #292]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c06:	6093      	str	r3, [r2, #8]
 8005c08:	4b47      	ldr	r3, [pc, #284]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c14:	4944      	ldr	r1, [pc, #272]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005c2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4a:	4937      	ldr	r1, [pc, #220]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c5e:	4b32      	ldr	r3, [pc, #200]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c64:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6c:	492e      	ldr	r1, [pc, #184]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c80:	4b29      	ldr	r3, [pc, #164]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8e:	4926      	ldr	r1, [pc, #152]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	491a      	ldr	r1, [pc, #104]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005cd2:	4b15      	ldr	r3, [pc, #84]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce0:	4911      	ldr	r1, [pc, #68]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d04:	f040 80ff 	bne.w	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d08:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0e:	f7fd fc15 	bl	800353c <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d14:	e00e      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d16:	f7fd fc11 	bl	800353c <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d907      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e188      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	424711e0 	.word	0x424711e0
 8005d30:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d34:	4b7e      	ldr	r3, [pc, #504]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1ea      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d028      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d124      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005d68:	4b71      	ldr	r3, [pc, #452]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	3301      	adds	r3, #1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d80:	0e1b      	lsrs	r3, r3, #24
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	019b      	lsls	r3, r3, #6
 8005d92:	431a      	orrs	r2, r3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	071b      	lsls	r3, r3, #28
 8005daa:	4961      	ldr	r1, [pc, #388]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d035      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ddc:	d130      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005dde:	4b54      	ldr	r3, [pc, #336]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	3301      	adds	r3, #1
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005df0:	4b4f      	ldr	r3, [pc, #316]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df6:	0f1b      	lsrs	r3, r3, #28
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	019b      	lsls	r3, r3, #6
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	071b      	lsls	r3, r3, #28
 8005e20:	4943      	ldr	r1, [pc, #268]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e28:	4b41      	ldr	r3, [pc, #260]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e2e:	f023 021f 	bic.w	r2, r3, #31
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	3b01      	subs	r3, #1
 8005e38:	493d      	ldr	r1, [pc, #244]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d029      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e54:	d124      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005e56:	4b36      	ldr	r3, [pc, #216]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e5c:	0c1b      	lsrs	r3, r3, #16
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	3301      	adds	r3, #1
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e68:	4b31      	ldr	r3, [pc, #196]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e6e:	0f1b      	lsrs	r3, r3, #28
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	019b      	lsls	r3, r3, #6
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	431a      	orrs	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	071b      	lsls	r3, r3, #28
 8005e98:	4925      	ldr	r1, [pc, #148]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d016      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	019b      	lsls	r3, r3, #6
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	071b      	lsls	r3, r3, #28
 8005ed2:	4917      	ldr	r1, [pc, #92]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005eda:	4b16      	ldr	r3, [pc, #88]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ee0:	f7fd fb2c 	bl	800353c <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ee8:	f7fd fb28 	bl	800353c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e09f      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005efa:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f040 8095 	bne.w	8006038 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f14:	f7fd fb12 	bl	800353c <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f1a:	e00f      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f1c:	f7fd fb0e 	bl	800353c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d908      	bls.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e085      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800
 8005f34:	42470068 	.word	0x42470068
 8005f38:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f3c:	4b41      	ldr	r3, [pc, #260]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f48:	d0e8      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d02b      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d127      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005f72:	4b34      	ldr	r3, [pc, #208]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	3301      	adds	r3, #1
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	3b01      	subs	r3, #1
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	4928      	ldr	r1, [pc, #160]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fa8:	4b26      	ldr	r3, [pc, #152]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	4922      	ldr	r1, [pc, #136]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01d      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd6:	d118      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fde:	0e1b      	lsrs	r3, r3, #24
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	019b      	lsls	r3, r3, #6
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	4910      	ldr	r1, [pc, #64]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800600a:	4b0f      	ldr	r3, [pc, #60]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800600c:	2201      	movs	r2, #1
 800600e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006010:	f7fd fa94 	bl	800353c <HAL_GetTick>
 8006014:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006016:	e008      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006018:	f7fd fa90 	bl	800353c <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e007      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006036:	d1ef      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3730      	adds	r7, #48	@ 0x30
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40023800 	.word	0x40023800
 8006048:	42470070 	.word	0x42470070

0800604c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800604c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006050:	b0a6      	sub	sp, #152	@ 0x98
 8006052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006072:	4bc8      	ldr	r3, [pc, #800]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	2b0c      	cmp	r3, #12
 800607c:	f200 817e 	bhi.w	800637c <HAL_RCC_GetSysClockFreq+0x330>
 8006080:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060bd 	.word	0x080060bd
 800608c:	0800637d 	.word	0x0800637d
 8006090:	0800637d 	.word	0x0800637d
 8006094:	0800637d 	.word	0x0800637d
 8006098:	080060c5 	.word	0x080060c5
 800609c:	0800637d 	.word	0x0800637d
 80060a0:	0800637d 	.word	0x0800637d
 80060a4:	0800637d 	.word	0x0800637d
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	0800637d 	.word	0x0800637d
 80060b0:	0800637d 	.word	0x0800637d
 80060b4:	0800637d 	.word	0x0800637d
 80060b8:	08006237 	.word	0x08006237
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060bc:	4bb6      	ldr	r3, [pc, #728]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x34c>)
 80060be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80060c2:	e15f      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c4:	4bb5      	ldr	r3, [pc, #724]	@ (800639c <HAL_RCC_GetSysClockFreq+0x350>)
 80060c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80060ca:	e15b      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060cc:	4bb1      	ldr	r3, [pc, #708]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d8:	4bae      	ldr	r3, [pc, #696]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d031      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e4:	4bab      	ldr	r3, [pc, #684]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	099b      	lsrs	r3, r3, #6
 80060ea:	2200      	movs	r2, #0
 80060ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80060f8:	2300      	movs	r3, #0
 80060fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80060fc:	4ba7      	ldr	r3, [pc, #668]	@ (800639c <HAL_RCC_GetSysClockFreq+0x350>)
 80060fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006102:	462a      	mov	r2, r5
 8006104:	fb03 f202 	mul.w	r2, r3, r2
 8006108:	2300      	movs	r3, #0
 800610a:	4621      	mov	r1, r4
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	4413      	add	r3, r2
 8006112:	4aa2      	ldr	r2, [pc, #648]	@ (800639c <HAL_RCC_GetSysClockFreq+0x350>)
 8006114:	4621      	mov	r1, r4
 8006116:	fba1 1202 	umull	r1, r2, r1, r2
 800611a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800611c:	460a      	mov	r2, r1
 800611e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006120:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006122:	4413      	add	r3, r2
 8006124:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800612a:	2200      	movs	r2, #0
 800612c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800612e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006130:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006134:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006138:	f7fa fcd8 	bl	8000aec <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4613      	mov	r3, r2
 8006142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006146:	e064      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006148:	4b92      	ldr	r3, [pc, #584]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	099b      	lsrs	r3, r3, #6
 800614e:	2200      	movs	r2, #0
 8006150:	653b      	str	r3, [r7, #80]	@ 0x50
 8006152:	657a      	str	r2, [r7, #84]	@ 0x54
 8006154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800615c:	2300      	movs	r3, #0
 800615e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006160:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006164:	4622      	mov	r2, r4
 8006166:	462b      	mov	r3, r5
 8006168:	f04f 0000 	mov.w	r0, #0
 800616c:	f04f 0100 	mov.w	r1, #0
 8006170:	0159      	lsls	r1, r3, #5
 8006172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006176:	0150      	lsls	r0, r2, #5
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4621      	mov	r1, r4
 800617e:	1a51      	subs	r1, r2, r1
 8006180:	6139      	str	r1, [r7, #16]
 8006182:	4629      	mov	r1, r5
 8006184:	eb63 0301 	sbc.w	r3, r3, r1
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006196:	4659      	mov	r1, fp
 8006198:	018b      	lsls	r3, r1, #6
 800619a:	4651      	mov	r1, sl
 800619c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061a0:	4651      	mov	r1, sl
 80061a2:	018a      	lsls	r2, r1, #6
 80061a4:	4651      	mov	r1, sl
 80061a6:	ebb2 0801 	subs.w	r8, r2, r1
 80061aa:	4659      	mov	r1, fp
 80061ac:	eb63 0901 	sbc.w	r9, r3, r1
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c4:	4690      	mov	r8, r2
 80061c6:	4699      	mov	r9, r3
 80061c8:	4623      	mov	r3, r4
 80061ca:	eb18 0303 	adds.w	r3, r8, r3
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	462b      	mov	r3, r5
 80061d2:	eb49 0303 	adc.w	r3, r9, r3
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061e4:	4629      	mov	r1, r5
 80061e6:	028b      	lsls	r3, r1, #10
 80061e8:	4621      	mov	r1, r4
 80061ea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061ee:	4621      	mov	r1, r4
 80061f0:	028a      	lsls	r2, r1, #10
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061fa:	2200      	movs	r2, #0
 80061fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006204:	f7fa fc72 	bl	8000aec <__aeabi_uldivmod>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4613      	mov	r3, r2
 800620e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006212:	4b60      	ldr	r3, [pc, #384]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	3301      	adds	r3, #1
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8006224:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006228:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006234:	e0a6      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006236:	4b57      	ldr	r3, [pc, #348]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800623e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006242:	4b54      	ldr	r3, [pc, #336]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02a      	beq.n	80062a4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624e:	4b51      	ldr	r3, [pc, #324]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	099b      	lsrs	r3, r3, #6
 8006254:	2200      	movs	r2, #0
 8006256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006258:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800625a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006260:	2100      	movs	r1, #0
 8006262:	4b4e      	ldr	r3, [pc, #312]	@ (800639c <HAL_RCC_GetSysClockFreq+0x350>)
 8006264:	fb03 f201 	mul.w	r2, r3, r1
 8006268:	2300      	movs	r3, #0
 800626a:	fb00 f303 	mul.w	r3, r0, r3
 800626e:	4413      	add	r3, r2
 8006270:	4a4a      	ldr	r2, [pc, #296]	@ (800639c <HAL_RCC_GetSysClockFreq+0x350>)
 8006272:	fba0 1202 	umull	r1, r2, r0, r2
 8006276:	677a      	str	r2, [r7, #116]	@ 0x74
 8006278:	460a      	mov	r2, r1
 800627a:	673a      	str	r2, [r7, #112]	@ 0x70
 800627c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800627e:	4413      	add	r3, r2
 8006280:	677b      	str	r3, [r7, #116]	@ 0x74
 8006282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006286:	2200      	movs	r2, #0
 8006288:	633b      	str	r3, [r7, #48]	@ 0x30
 800628a:	637a      	str	r2, [r7, #52]	@ 0x34
 800628c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006290:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006294:	f7fa fc2a 	bl	8000aec <__aeabi_uldivmod>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4613      	mov	r3, r2
 800629e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062a2:	e05b      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	2200      	movs	r2, #0
 80062ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80062bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	0159      	lsls	r1, r3, #5
 80062ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d2:	0150      	lsls	r0, r2, #5
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4641      	mov	r1, r8
 80062da:	ebb2 0a01 	subs.w	sl, r2, r1
 80062de:	4649      	mov	r1, r9
 80062e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f8:	ebb2 040a 	subs.w	r4, r2, sl
 80062fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	464b      	mov	r3, r9
 800631c:	eb45 0303 	adc.w	r3, r5, r3
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632e:	4629      	mov	r1, r5
 8006330:	028b      	lsls	r3, r1, #10
 8006332:	4621      	mov	r1, r4
 8006334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006338:	4621      	mov	r1, r4
 800633a:	028a      	lsls	r2, r1, #10
 800633c:	4610      	mov	r0, r2
 800633e:	4619      	mov	r1, r3
 8006340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006344:	2200      	movs	r2, #0
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	61fa      	str	r2, [r7, #28]
 800634a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634e:	f7fa fbcd 	bl	8000aec <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4613      	mov	r3, r2
 8006358:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x348>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	0f1b      	lsrs	r3, r3, #28
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800636a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800636e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800637a:	e003      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x34c>)
 800637e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006382:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006384:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006388:	4618      	mov	r0, r3
 800638a:	3798      	adds	r7, #152	@ 0x98
 800638c:	46bd      	mov	sp, r7
 800638e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006392:	bf00      	nop
 8006394:	40023800 	.word	0x40023800
 8006398:	00f42400 	.word	0x00f42400
 800639c:	00b71b00 	.word	0x00b71b00

080063a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e28d      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8083 	beq.w	80064c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80063c0:	4b94      	ldr	r3, [pc, #592]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 030c 	and.w	r3, r3, #12
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d019      	beq.n	8006400 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80063cc:	4b91      	ldr	r3, [pc, #580]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d106      	bne.n	80063e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80063d8:	4b8e      	ldr	r3, [pc, #568]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063e4:	d00c      	beq.n	8006400 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d112      	bne.n	8006418 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063f2:	4b88      	ldr	r3, [pc, #544]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063fe:	d10b      	bne.n	8006418 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006400:	4b84      	ldr	r3, [pc, #528]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d05b      	beq.n	80064c4 <HAL_RCC_OscConfig+0x124>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d157      	bne.n	80064c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e25a      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006420:	d106      	bne.n	8006430 <HAL_RCC_OscConfig+0x90>
 8006422:	4b7c      	ldr	r3, [pc, #496]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a7b      	ldr	r2, [pc, #492]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e01d      	b.n	800646c <HAL_RCC_OscConfig+0xcc>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006438:	d10c      	bne.n	8006454 <HAL_RCC_OscConfig+0xb4>
 800643a:	4b76      	ldr	r3, [pc, #472]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a75      	ldr	r2, [pc, #468]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b73      	ldr	r3, [pc, #460]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a72      	ldr	r2, [pc, #456]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 800644c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e00b      	b.n	800646c <HAL_RCC_OscConfig+0xcc>
 8006454:	4b6f      	ldr	r3, [pc, #444]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a6e      	ldr	r2, [pc, #440]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 800645a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4b6c      	ldr	r3, [pc, #432]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a6b      	ldr	r2, [pc, #428]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800646a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d013      	beq.n	800649c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fd f862 	bl	800353c <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800647c:	f7fd f85e 	bl	800353c <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b64      	cmp	r3, #100	@ 0x64
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e21f      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b61      	ldr	r3, [pc, #388]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0xdc>
 800649a:	e014      	b.n	80064c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fd f84e 	bl	800353c <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064a4:	f7fd f84a 	bl	800353c <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b64      	cmp	r3, #100	@ 0x64
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e20b      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b6:	4b57      	ldr	r3, [pc, #348]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x104>
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d06f      	beq.n	80065b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064d2:	4b50      	ldr	r3, [pc, #320]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80064de:	4b4d      	ldr	r3, [pc, #308]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d105      	bne.n	80064f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80064ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064f6:	4b47      	ldr	r3, [pc, #284]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80064fe:	2b0c      	cmp	r3, #12
 8006500:	d11c      	bne.n	800653c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006502:	4b44      	ldr	r3, [pc, #272]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d116      	bne.n	800653c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650e:	4b41      	ldr	r3, [pc, #260]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_RCC_OscConfig+0x186>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d001      	beq.n	8006526 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e1d3      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006526:	4b3b      	ldr	r3, [pc, #236]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4937      	ldr	r1, [pc, #220]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	e03a      	b.n	80065b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d020      	beq.n	8006586 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006544:	4b34      	ldr	r3, [pc, #208]	@ (8006618 <HAL_RCC_OscConfig+0x278>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654a:	f7fc fff7 	bl	800353c <HAL_GetTick>
 800654e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006550:	e008      	b.n	8006564 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006552:	f7fc fff3 	bl	800353c <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e1b4      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006564:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006570:	4b28      	ldr	r3, [pc, #160]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4925      	ldr	r1, [pc, #148]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]
 8006584:	e015      	b.n	80065b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006586:	4b24      	ldr	r3, [pc, #144]	@ (8006618 <HAL_RCC_OscConfig+0x278>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fc ffd6 	bl	800353c <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006594:	f7fc ffd2 	bl	800353c <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e193      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d036      	beq.n	800662c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065c6:	4b15      	ldr	r3, [pc, #84]	@ (800661c <HAL_RCC_OscConfig+0x27c>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065cc:	f7fc ffb6 	bl	800353c <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d4:	f7fc ffb2 	bl	800353c <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e173      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <HAL_RCC_OscConfig+0x274>)
 80065e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x234>
 80065f2:	e01b      	b.n	800662c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f4:	4b09      	ldr	r3, [pc, #36]	@ (800661c <HAL_RCC_OscConfig+0x27c>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fa:	f7fc ff9f 	bl	800353c <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006600:	e00e      	b.n	8006620 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006602:	f7fc ff9b 	bl	800353c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d907      	bls.n	8006620 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e15c      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
 8006614:	40023800 	.word	0x40023800
 8006618:	42470000 	.word	0x42470000
 800661c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006620:	4b8a      	ldr	r3, [pc, #552]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1ea      	bne.n	8006602 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8097 	beq.w	8006768 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800663e:	4b83      	ldr	r3, [pc, #524]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	4b7f      	ldr	r3, [pc, #508]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	4a7e      	ldr	r2, [pc, #504]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006658:	6413      	str	r3, [r2, #64]	@ 0x40
 800665a:	4b7c      	ldr	r3, [pc, #496]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666a:	4b79      	ldr	r3, [pc, #484]	@ (8006850 <HAL_RCC_OscConfig+0x4b0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006672:	2b00      	cmp	r3, #0
 8006674:	d118      	bne.n	80066a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006676:	4b76      	ldr	r3, [pc, #472]	@ (8006850 <HAL_RCC_OscConfig+0x4b0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a75      	ldr	r2, [pc, #468]	@ (8006850 <HAL_RCC_OscConfig+0x4b0>)
 800667c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006682:	f7fc ff5b 	bl	800353c <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668a:	f7fc ff57 	bl	800353c <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e118      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800669c:	4b6c      	ldr	r3, [pc, #432]	@ (8006850 <HAL_RCC_OscConfig+0x4b0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d106      	bne.n	80066be <HAL_RCC_OscConfig+0x31e>
 80066b0:	4b66      	ldr	r3, [pc, #408]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b4:	4a65      	ldr	r2, [pc, #404]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80066bc:	e01c      	b.n	80066f8 <HAL_RCC_OscConfig+0x358>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	d10c      	bne.n	80066e0 <HAL_RCC_OscConfig+0x340>
 80066c6:	4b61      	ldr	r3, [pc, #388]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ca:	4a60      	ldr	r2, [pc, #384]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066cc:	f043 0304 	orr.w	r3, r3, #4
 80066d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066d2:	4b5e      	ldr	r3, [pc, #376]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d6:	4a5d      	ldr	r2, [pc, #372]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80066de:	e00b      	b.n	80066f8 <HAL_RCC_OscConfig+0x358>
 80066e0:	4b5a      	ldr	r3, [pc, #360]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e4:	4a59      	ldr	r2, [pc, #356]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ec:	4b57      	ldr	r3, [pc, #348]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	4a56      	ldr	r2, [pc, #344]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80066f2:	f023 0304 	bic.w	r3, r3, #4
 80066f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fc ff1c 	bl	800353c <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006706:	e00a      	b.n	800671e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006708:	f7fc ff18 	bl	800353c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e0d7      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800671e:	4b4b      	ldr	r3, [pc, #300]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0ee      	beq.n	8006708 <HAL_RCC_OscConfig+0x368>
 800672a:	e014      	b.n	8006756 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672c:	f7fc ff06 	bl	800353c <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006732:	e00a      	b.n	800674a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006734:	f7fc ff02 	bl	800353c <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e0c1      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800674a:	4b40      	ldr	r3, [pc, #256]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1ee      	bne.n	8006734 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006756:	7dfb      	ldrb	r3, [r7, #23]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d105      	bne.n	8006768 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800675c:	4b3b      	ldr	r3, [pc, #236]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	4a3a      	ldr	r2, [pc, #232]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006766:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80ad 	beq.w	80068cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006772:	4b36      	ldr	r3, [pc, #216]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b08      	cmp	r3, #8
 800677c:	d060      	beq.n	8006840 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d145      	bne.n	8006812 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006786:	4b33      	ldr	r3, [pc, #204]	@ (8006854 <HAL_RCC_OscConfig+0x4b4>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fc fed6 	bl	800353c <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006794:	f7fc fed2 	bl	800353c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e093      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a6:	4b29      	ldr	r3, [pc, #164]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f0      	bne.n	8006794 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	019b      	lsls	r3, r3, #6
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	3b01      	subs	r3, #1
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	061b      	lsls	r3, r3, #24
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	071b      	lsls	r3, r3, #28
 80067de:	491b      	ldr	r1, [pc, #108]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x4b4>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ea:	f7fc fea7 	bl	800353c <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fc fea3 	bl	800353c <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e064      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006804:	4b11      	ldr	r3, [pc, #68]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x452>
 8006810:	e05c      	b.n	80068cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b10      	ldr	r3, [pc, #64]	@ (8006854 <HAL_RCC_OscConfig+0x4b4>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fc fe90 	bl	800353c <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fc fe8c 	bl	800353c <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e04d      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b06      	ldr	r3, [pc, #24]	@ (800684c <HAL_RCC_OscConfig+0x4ac>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x480>
 800683e:	e045      	b.n	80068cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e040      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
 800684c:	40023800 	.word	0x40023800
 8006850:	40007000 	.word	0x40007000
 8006854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006858:	4b1f      	ldr	r3, [pc, #124]	@ (80068d8 <HAL_RCC_OscConfig+0x538>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d030      	beq.n	80068c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d129      	bne.n	80068c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d122      	bne.n	80068c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800688e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006890:	4293      	cmp	r3, r2
 8006892:	d119      	bne.n	80068c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	3b01      	subs	r3, #1
 80068a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d10f      	bne.n	80068c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d107      	bne.n	80068c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d001      	beq.n	80068cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800

080068dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e07b      	b.n	80069e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d108      	bne.n	8006908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068fe:	d009      	beq.n	8006914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	61da      	str	r2, [r3, #28]
 8006906:	e005      	b.n	8006914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fc faba 	bl	8002ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	ea42 0103 	orr.w	r1, r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	f003 0104 	and.w	r1, r3, #4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	f003 0210 	and.w	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069fe:	f7fc fd9d 	bl	800353c <HAL_GetTick>
 8006a02:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d001      	beq.n	8006a18 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006a14:	2302      	movs	r3, #2
 8006a16:	e12a      	b.n	8006c6e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_SPI_Transmit+0x36>
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e122      	b.n	8006c6e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_SPI_Transmit+0x48>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e11b      	b.n	8006c6e <HAL_SPI_Transmit+0x280>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2203      	movs	r2, #3
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a84:	d10f      	bne.n	8006aa6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006aa4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b40      	cmp	r3, #64	@ 0x40
 8006ab2:	d007      	beq.n	8006ac4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006acc:	d152      	bne.n	8006b74 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_SPI_Transmit+0xee>
 8006ad6:	8b7b      	ldrh	r3, [r7, #26]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d145      	bne.n	8006b68 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aec:	1c9a      	adds	r2, r3, #2
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b00:	e032      	b.n	8006b68 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d112      	bne.n	8006b36 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	1c9a      	adds	r2, r3, #2
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b34:	e018      	b.n	8006b68 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b36:	f7fc fd01 	bl	800353c <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d803      	bhi.n	8006b4e <HAL_SPI_Transmit+0x160>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4c:	d102      	bne.n	8006b54 <HAL_SPI_Transmit+0x166>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e082      	b.n	8006c6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1c7      	bne.n	8006b02 <HAL_SPI_Transmit+0x114>
 8006b72:	e053      	b.n	8006c1c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Transmit+0x194>
 8006b7c:	8b7b      	ldrh	r3, [r7, #26]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d147      	bne.n	8006c12 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ba8:	e033      	b.n	8006c12 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d113      	bne.n	8006be0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006bde:	e018      	b.n	8006c12 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be0:	f7fc fcac 	bl	800353c <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d803      	bhi.n	8006bf8 <HAL_SPI_Transmit+0x20a>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bf6:	d102      	bne.n	8006bfe <HAL_SPI_Transmit+0x210>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e02d      	b.n	8006c6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1c6      	bne.n	8006baa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fbd9 	bl	80073d8 <SPI_EndRxTxTransaction>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
  }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b088      	sub	sp, #32
 8006c7a:	af02      	add	r7, sp, #8
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d001      	beq.n	8006c96 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e104      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c9e:	d112      	bne.n	8006cc6 <HAL_SPI_Receive+0x50>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10e      	bne.n	8006cc6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2204      	movs	r2, #4
 8006cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f8f3 	bl	8006ea8 <HAL_SPI_TransmitReceive>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	e0ec      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cc6:	f7fc fc39 	bl	800353c <HAL_GetTick>
 8006cca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_SPI_Receive+0x62>
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0e1      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_SPI_Receive+0x74>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0da      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	88fa      	ldrh	r2, [r7, #6]
 8006d10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d38:	d10f      	bne.n	8006d5a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d64:	2b40      	cmp	r3, #64	@ 0x40
 8006d66:	d007      	beq.n	8006d78 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d170      	bne.n	8006e62 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d80:	e035      	b.n	8006dee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d115      	bne.n	8006dbc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f103 020c 	add.w	r2, r3, #12
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006dba:	e018      	b.n	8006dee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dbc:	f7fc fbbe 	bl	800353c <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d803      	bhi.n	8006dd4 <HAL_SPI_Receive+0x15e>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dd2:	d102      	bne.n	8006dda <HAL_SPI_Receive+0x164>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e058      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1c4      	bne.n	8006d82 <HAL_SPI_Receive+0x10c>
 8006df8:	e038      	b.n	8006e6c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d113      	bne.n	8006e30 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e12:	b292      	uxth	r2, r2
 8006e14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e2e:	e018      	b.n	8006e62 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e30:	f7fc fb84 	bl	800353c <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d803      	bhi.n	8006e48 <HAL_SPI_Receive+0x1d2>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e46:	d102      	bne.n	8006e4e <HAL_SPI_Receive+0x1d8>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e01e      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1c6      	bne.n	8006dfa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fa4b 	bl	800730c <SPI_EndRxTransaction>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	@ 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eba:	f7fc fb3f 	bl	800353c <HAL_GetTick>
 8006ebe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ec6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ece:	887b      	ldrh	r3, [r7, #2]
 8006ed0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ed2:	7ffb      	ldrb	r3, [r7, #31]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0x4a>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ede:	d106      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x46>
 8006ee8:	7ffb      	ldrb	r3, [r7, #31]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d001      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e17f      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_SPI_TransmitReceive+0x5c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_SPI_TransmitReceive+0x5c>
 8006efe:	887b      	ldrh	r3, [r7, #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e174      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x6e>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e16d      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d003      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2205      	movs	r2, #5
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	887a      	ldrh	r2, [r7, #2]
 8006f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	887a      	ldrh	r2, [r7, #2]
 8006f48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	887a      	ldrh	r2, [r7, #2]
 8006f54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	887a      	ldrh	r2, [r7, #2]
 8006f5a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f72:	2b40      	cmp	r3, #64	@ 0x40
 8006f74:	d007      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f8e:	d17e      	bne.n	800708e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0xf6>
 8006f98:	8afb      	ldrh	r3, [r7, #22]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d16c      	bne.n	8007078 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fc2:	e059      	b.n	8007078 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d11b      	bne.n	800700a <HAL_SPI_TransmitReceive+0x162>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d016      	beq.n	800700a <HAL_SPI_TransmitReceive+0x162>
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d113      	bne.n	800700a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe6:	881a      	ldrh	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	1c9a      	adds	r2, r3, #2
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d119      	bne.n	800704c <HAL_SPI_TransmitReceive+0x1a4>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d014      	beq.n	800704c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702c:	b292      	uxth	r2, r2
 800702e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	1c9a      	adds	r2, r3, #2
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007048:	2301      	movs	r3, #1
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800704c:	f7fc fa76 	bl	800353c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007058:	429a      	cmp	r2, r3
 800705a:	d80d      	bhi.n	8007078 <HAL_SPI_TransmitReceive+0x1d0>
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007062:	d009      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e0bc      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1a0      	bne.n	8006fc4 <HAL_SPI_TransmitReceive+0x11c>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d19b      	bne.n	8006fc4 <HAL_SPI_TransmitReceive+0x11c>
 800708c:	e082      	b.n	8007194 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_SPI_TransmitReceive+0x1f4>
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d171      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070c2:	e05d      	b.n	8007180 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d11c      	bne.n	800710c <HAL_SPI_TransmitReceive+0x264>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <HAL_SPI_TransmitReceive+0x264>
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d114      	bne.n	800710c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	330c      	adds	r3, #12
 80070ec:	7812      	ldrb	r2, [r2, #0]
 80070ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d119      	bne.n	800714e <HAL_SPI_TransmitReceive+0x2a6>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d014      	beq.n	800714e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800714a:	2301      	movs	r3, #1
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800714e:	f7fc f9f5 	bl	800353c <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715a:	429a      	cmp	r2, r3
 800715c:	d803      	bhi.n	8007166 <HAL_SPI_TransmitReceive+0x2be>
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007164:	d102      	bne.n	800716c <HAL_SPI_TransmitReceive+0x2c4>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e038      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d19c      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x21c>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d197      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f91d 	bl	80073d8 <SPI_EndRxTxTransaction>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e01d      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3728      	adds	r7, #40	@ 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800720c:	f7fc f996 	bl	800353c <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4413      	add	r3, r2
 800721a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800721c:	f7fc f98e 	bl	800353c <HAL_GetTick>
 8007220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007222:	4b39      	ldr	r3, [pc, #228]	@ (8007308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	015b      	lsls	r3, r3, #5
 8007228:	0d1b      	lsrs	r3, r3, #20
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	fb02 f303 	mul.w	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	e054      	b.n	80072de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800723a:	d050      	beq.n	80072de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800723c:	f7fc f97e 	bl	800353c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	429a      	cmp	r2, r3
 800724a:	d902      	bls.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d13d      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800726a:	d111      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007274:	d004      	beq.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800727e:	d107      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800728e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007298:	d10f      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e017      	b.n	80072fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3b01      	subs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	bf0c      	ite	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	2300      	movne	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d19b      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000144 	.word	0x20000144

0800730c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007320:	d111      	bne.n	8007346 <SPI_EndRxTransaction+0x3a>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800732a:	d004      	beq.n	8007336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007334:	d107      	bne.n	8007346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007344:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800734e:	d12a      	bne.n	80073a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007358:	d012      	beq.n	8007380 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2200      	movs	r2, #0
 8007362:	2180      	movs	r1, #128	@ 0x80
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff ff49 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02d      	beq.n	80073cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007374:	f043 0220 	orr.w	r2, r3, #32
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e026      	b.n	80073ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	2101      	movs	r1, #1
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff ff36 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01a      	beq.n	80073cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739a:	f043 0220 	orr.w	r2, r3, #32
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e013      	b.n	80073ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2200      	movs	r2, #0
 80073ae:	2101      	movs	r1, #1
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff ff23 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d007      	beq.n	80073cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c0:	f043 0220 	orr.w	r2, r3, #32
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e000      	b.n	80073ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2201      	movs	r2, #1
 80073ec:	2102      	movs	r1, #2
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff ff04 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fe:	f043 0220 	orr.w	r2, r3, #32
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e032      	b.n	8007470 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800740a:	4b1b      	ldr	r3, [pc, #108]	@ (8007478 <SPI_EndRxTxTransaction+0xa0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <SPI_EndRxTxTransaction+0xa4>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	0d5b      	lsrs	r3, r3, #21
 8007416:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007428:	d112      	bne.n	8007450 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2200      	movs	r2, #0
 8007432:	2180      	movs	r1, #128	@ 0x80
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff fee1 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d016      	beq.n	800746e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e00f      	b.n	8007470 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	3b01      	subs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007466:	2b80      	cmp	r3, #128	@ 0x80
 8007468:	d0f2      	beq.n	8007450 <SPI_EndRxTxTransaction+0x78>
 800746a:	e000      	b.n	800746e <SPI_EndRxTxTransaction+0x96>
        break;
 800746c:	bf00      	nop
  }

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000144 	.word	0x20000144
 800747c:	165e9f81 	.word	0x165e9f81

08007480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e041      	b.n	8007516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb fd46 	bl	8002f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f000 fe9e 	bl	8008200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	d001      	beq.n	8007538 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e046      	b.n	80075c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a23      	ldr	r2, [pc, #140]	@ (80075d4 <HAL_TIM_Base_Start+0xb4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d022      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007552:	d01d      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1f      	ldr	r2, [pc, #124]	@ (80075d8 <HAL_TIM_Base_Start+0xb8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d018      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1e      	ldr	r2, [pc, #120]	@ (80075dc <HAL_TIM_Base_Start+0xbc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1c      	ldr	r2, [pc, #112]	@ (80075e0 <HAL_TIM_Base_Start+0xc0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00e      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1b      	ldr	r2, [pc, #108]	@ (80075e4 <HAL_TIM_Base_Start+0xc4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d009      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a19      	ldr	r2, [pc, #100]	@ (80075e8 <HAL_TIM_Base_Start+0xc8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_TIM_Base_Start+0x70>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a18      	ldr	r2, [pc, #96]	@ (80075ec <HAL_TIM_Base_Start+0xcc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d111      	bne.n	80075b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d010      	beq.n	80075c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	e007      	b.n	80075c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40010000 	.word	0x40010000
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40010400 	.word	0x40010400
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40001800 	.word	0x40001800

080075f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e04e      	b.n	80076a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a23      	ldr	r2, [pc, #140]	@ (80076b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d022      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007632:	d01d      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1f      	ldr	r2, [pc, #124]	@ (80076b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d018      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1e      	ldr	r2, [pc, #120]	@ (80076bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1c      	ldr	r2, [pc, #112]	@ (80076c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00e      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1b      	ldr	r2, [pc, #108]	@ (80076c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d009      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a19      	ldr	r2, [pc, #100]	@ (80076c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a18      	ldr	r2, [pc, #96]	@ (80076cc <HAL_TIM_Base_Start_IT+0xdc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d111      	bne.n	8007694 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b06      	cmp	r3, #6
 8007680:	d010      	beq.n	80076a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007692:	e007      	b.n	80076a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40001800 	.word	0x40001800

080076d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e041      	b.n	8007766 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fb fcf6 	bl	80030e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f000 fd76 	bl	8008200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <HAL_TIM_PWM_Start+0x24>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e022      	b.n	80077da <HAL_TIM_PWM_Start+0x6a>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b04      	cmp	r3, #4
 8007798:	d109      	bne.n	80077ae <HAL_TIM_PWM_Start+0x3e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e015      	b.n	80077da <HAL_TIM_PWM_Start+0x6a>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d109      	bne.n	80077c8 <HAL_TIM_PWM_Start+0x58>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e008      	b.n	80077da <HAL_TIM_PWM_Start+0x6a>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	bf14      	ite	ne
 80077d4:	2301      	movne	r3, #1
 80077d6:	2300      	moveq	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e07c      	b.n	80078dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Start+0x82>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077f0:	e013      	b.n	800781a <HAL_TIM_PWM_Start+0xaa>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Start+0x92>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007800:	e00b      	b.n	800781a <HAL_TIM_PWM_Start+0xaa>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Start+0xa2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007810:	e003      	b.n	800781a <HAL_TIM_PWM_Start+0xaa>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2202      	movs	r2, #2
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2201      	movs	r2, #1
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f001 f90c 	bl	8008a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2d      	ldr	r2, [pc, #180]	@ (80078e4 <HAL_TIM_PWM_Start+0x174>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_TIM_PWM_Start+0xcc>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2c      	ldr	r2, [pc, #176]	@ (80078e8 <HAL_TIM_PWM_Start+0x178>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d101      	bne.n	8007840 <HAL_TIM_PWM_Start+0xd0>
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <HAL_TIM_PWM_Start+0xd2>
 8007840:	2300      	movs	r3, #0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007854:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a22      	ldr	r2, [pc, #136]	@ (80078e4 <HAL_TIM_PWM_Start+0x174>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d022      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007868:	d01d      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1f      	ldr	r2, [pc, #124]	@ (80078ec <HAL_TIM_PWM_Start+0x17c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d018      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1d      	ldr	r2, [pc, #116]	@ (80078f0 <HAL_TIM_PWM_Start+0x180>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1c      	ldr	r2, [pc, #112]	@ (80078f4 <HAL_TIM_PWM_Start+0x184>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00e      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a16      	ldr	r2, [pc, #88]	@ (80078e8 <HAL_TIM_PWM_Start+0x178>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d009      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a18      	ldr	r2, [pc, #96]	@ (80078f8 <HAL_TIM_PWM_Start+0x188>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d004      	beq.n	80078a6 <HAL_TIM_PWM_Start+0x136>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a16      	ldr	r2, [pc, #88]	@ (80078fc <HAL_TIM_PWM_Start+0x18c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d111      	bne.n	80078ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b06      	cmp	r3, #6
 80078b6:	d010      	beq.n	80078da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c8:	e007      	b.n	80078da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0201 	orr.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40010400 	.word	0x40010400
 80078ec:	40000400 	.word	0x40000400
 80078f0:	40000800 	.word	0x40000800
 80078f4:	40000c00 	.word	0x40000c00
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40001800 	.word	0x40001800

08007900 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e041      	b.n	8007996 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f839 	bl	800799e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f000 fc5e 	bl	8008200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b0c      	cmp	r3, #12
 80079c6:	d841      	bhi.n	8007a4c <HAL_TIM_IC_Stop_IT+0x98>
 80079c8:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80079ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ce:	bf00      	nop
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007a4d 	.word	0x08007a4d
 80079d8:	08007a4d 	.word	0x08007a4d
 80079dc:	08007a4d 	.word	0x08007a4d
 80079e0:	08007a17 	.word	0x08007a17
 80079e4:	08007a4d 	.word	0x08007a4d
 80079e8:	08007a4d 	.word	0x08007a4d
 80079ec:	08007a4d 	.word	0x08007a4d
 80079f0:	08007a29 	.word	0x08007a29
 80079f4:	08007a4d 	.word	0x08007a4d
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	08007a4d 	.word	0x08007a4d
 8007a00:	08007a3b 	.word	0x08007a3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0202 	bic.w	r2, r2, #2
 8007a12:	60da      	str	r2, [r3, #12]
      break;
 8007a14:	e01d      	b.n	8007a52 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0204 	bic.w	r2, r2, #4
 8007a24:	60da      	str	r2, [r3, #12]
      break;
 8007a26:	e014      	b.n	8007a52 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0208 	bic.w	r2, r2, #8
 8007a36:	60da      	str	r2, [r3, #12]
      break;
 8007a38:	e00b      	b.n	8007a52 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0210 	bic.w	r2, r2, #16
 8007a48:	60da      	str	r2, [r3, #12]
      break;
 8007a4a:	e002      	b.n	8007a52 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a50:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d156      	bne.n	8007b06 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 ffed 	bl	8008a40 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6a1a      	ldr	r2, [r3, #32]
 8007a6c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a70:	4013      	ands	r3, r2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10f      	bne.n	8007a96 <HAL_TIM_IC_Stop_IT+0xe2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a80:	4013      	ands	r3, r2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d107      	bne.n	8007a96 <HAL_TIM_IC_Stop_IT+0xe2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_TIM_IC_Stop_IT+0xf2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aa4:	e013      	b.n	8007ace <HAL_TIM_IC_Stop_IT+0x11a>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d104      	bne.n	8007ab6 <HAL_TIM_IC_Stop_IT+0x102>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab4:	e00b      	b.n	8007ace <HAL_TIM_IC_Stop_IT+0x11a>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_IC_Stop_IT+0x112>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac4:	e003      	b.n	8007ace <HAL_TIM_IC_Stop_IT+0x11a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_IC_Stop_IT+0x12a>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007adc:	e013      	b.n	8007b06 <HAL_TIM_IC_Stop_IT+0x152>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_IC_Stop_IT+0x13a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007aec:	e00b      	b.n	8007b06 <HAL_TIM_IC_Stop_IT+0x152>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_IC_Stop_IT+0x14a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007afc:	e003      	b.n	8007b06 <HAL_TIM_IC_Stop_IT+0x152>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d020      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0202 	mvn.w	r2, #2
 8007b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fa fb28 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 8007b60:	e005      	b.n	8007b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fb2e 	bl	80081c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fb35 	bl	80081d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d020      	beq.n	8007bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01b      	beq.n	8007bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0204 	mvn.w	r2, #4
 8007b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2202      	movs	r2, #2
 8007b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fa fb02 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 8007bac:	e005      	b.n	8007bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fb08 	bl	80081c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb0f 	bl	80081d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d020      	beq.n	8007c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01b      	beq.n	8007c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0208 	mvn.w	r2, #8
 8007bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fa fadc 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 8007bf8:	e005      	b.n	8007c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fae2 	bl	80081c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fae9 	bl	80081d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 0310 	and.w	r3, r3, #16
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d020      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01b      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0210 	mvn.w	r2, #16
 8007c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2208      	movs	r2, #8
 8007c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fa fab6 	bl	80021b0 <HAL_TIM_IC_CaptureCallback>
 8007c44:	e005      	b.n	8007c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fabc 	bl	80081c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fac3 	bl	80081d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00c      	beq.n	8007c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0201 	mvn.w	r2, #1
 8007c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fa f91e 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 ff7c 	bl	8008b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00c      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa94 	bl	80081ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0220 	mvn.w	r2, #32
 8007ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 ff4e 	bl	8008b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e088      	b.n	8007e20 <HAL_TIM_IC_ConfigChannel+0x130>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d11b      	bne.n	8007d54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007d2c:	f000 fcc4 	bl	80086b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699a      	ldr	r2, [r3, #24]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 020c 	bic.w	r2, r2, #12
 8007d3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6999      	ldr	r1, [r3, #24]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	619a      	str	r2, [r3, #24]
 8007d52:	e060      	b.n	8007e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d11c      	bne.n	8007d94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007d6a:	f000 fd48 	bl	80087fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007d7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6999      	ldr	r1, [r3, #24]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	021a      	lsls	r2, r3, #8
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	619a      	str	r2, [r3, #24]
 8007d92:	e040      	b.n	8007e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d11b      	bne.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007daa:	f000 fd95 	bl	80088d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 020c 	bic.w	r2, r2, #12
 8007dbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69d9      	ldr	r1, [r3, #28]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	61da      	str	r2, [r3, #28]
 8007dd0:	e021      	b.n	8007e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	d11c      	bne.n	8007e12 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007de8:	f000 fdb2 	bl	8008950 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69da      	ldr	r2, [r3, #28]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007dfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69d9      	ldr	r1, [r3, #28]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	021a      	lsls	r2, r3, #8
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	61da      	str	r2, [r3, #28]
 8007e10:	e001      	b.n	8007e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e0ae      	b.n	8007fa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	f200 809f 	bhi.w	8007f94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e56:	a201      	add	r2, pc, #4	@ (adr r2, 8007e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5c:	08007e91 	.word	0x08007e91
 8007e60:	08007f95 	.word	0x08007f95
 8007e64:	08007f95 	.word	0x08007f95
 8007e68:	08007f95 	.word	0x08007f95
 8007e6c:	08007ed1 	.word	0x08007ed1
 8007e70:	08007f95 	.word	0x08007f95
 8007e74:	08007f95 	.word	0x08007f95
 8007e78:	08007f95 	.word	0x08007f95
 8007e7c:	08007f13 	.word	0x08007f13
 8007e80:	08007f95 	.word	0x08007f95
 8007e84:	08007f95 	.word	0x08007f95
 8007e88:	08007f95 	.word	0x08007f95
 8007e8c:	08007f53 	.word	0x08007f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fa5e 	bl	8008358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0208 	orr.w	r2, r2, #8
 8007eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0204 	bic.w	r2, r2, #4
 8007eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6999      	ldr	r1, [r3, #24]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	619a      	str	r2, [r3, #24]
      break;
 8007ece:	e064      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68b9      	ldr	r1, [r7, #8]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 faae 	bl	8008438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6999      	ldr	r1, [r3, #24]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	021a      	lsls	r2, r3, #8
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	619a      	str	r2, [r3, #24]
      break;
 8007f10:	e043      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fb03 	bl	8008524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69da      	ldr	r2, [r3, #28]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0208 	orr.w	r2, r2, #8
 8007f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0204 	bic.w	r2, r2, #4
 8007f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69d9      	ldr	r1, [r3, #28]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	61da      	str	r2, [r3, #28]
      break;
 8007f50:	e023      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fb57 	bl	800860c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69da      	ldr	r2, [r3, #28]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69d9      	ldr	r1, [r3, #28]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	021a      	lsls	r2, r3, #8
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	61da      	str	r2, [r3, #28]
      break;
 8007f92:	e002      	b.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	75fb      	strb	r3, [r7, #23]
      break;
 8007f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e0b4      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x186>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008000:	d03e      	beq.n	8008080 <HAL_TIM_ConfigClockSource+0xd4>
 8008002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008006:	f200 8087 	bhi.w	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800800e:	f000 8086 	beq.w	800811e <HAL_TIM_ConfigClockSource+0x172>
 8008012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008016:	d87f      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b70      	cmp	r3, #112	@ 0x70
 800801a:	d01a      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0xa6>
 800801c:	2b70      	cmp	r3, #112	@ 0x70
 800801e:	d87b      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008020:	2b60      	cmp	r3, #96	@ 0x60
 8008022:	d050      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008024:	2b60      	cmp	r3, #96	@ 0x60
 8008026:	d877      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008028:	2b50      	cmp	r3, #80	@ 0x50
 800802a:	d03c      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0xfa>
 800802c:	2b50      	cmp	r3, #80	@ 0x50
 800802e:	d873      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008030:	2b40      	cmp	r3, #64	@ 0x40
 8008032:	d058      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008034:	2b40      	cmp	r3, #64	@ 0x40
 8008036:	d86f      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008038:	2b30      	cmp	r3, #48	@ 0x30
 800803a:	d064      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x15a>
 800803c:	2b30      	cmp	r3, #48	@ 0x30
 800803e:	d86b      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d060      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x15a>
 8008044:	2b20      	cmp	r3, #32
 8008046:	d867      	bhi.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d05c      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x15a>
 800804c:	2b10      	cmp	r3, #16
 800804e:	d05a      	beq.n	8008106 <HAL_TIM_ConfigClockSource+0x15a>
 8008050:	e062      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008062:	f000 fccd 	bl	8008a00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	609a      	str	r2, [r3, #8]
      break;
 800807e:	e04f      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008090:	f000 fcb6 	bl	8008a00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080a2:	609a      	str	r2, [r3, #8]
      break;
 80080a4:	e03c      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b2:	461a      	mov	r2, r3
 80080b4:	f000 fb74 	bl	80087a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2150      	movs	r1, #80	@ 0x50
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fc83 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 80080c4:	e02c      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080d2:	461a      	mov	r2, r3
 80080d4:	f000 fbd0 	bl	8008878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2160      	movs	r1, #96	@ 0x60
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fc73 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 80080e4:	e01c      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080f2:	461a      	mov	r2, r3
 80080f4:	f000 fb54 	bl	80087a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2140      	movs	r1, #64	@ 0x40
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fc63 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 8008104:	e00c      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4619      	mov	r1, r3
 8008110:	4610      	mov	r0, r2
 8008112:	f000 fc5a 	bl	80089ca <TIM_ITRx_SetConfig>
      break;
 8008116:	e003      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	73fb      	strb	r3, [r7, #15]
      break;
 800811c:	e000      	b.n	8008120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800811e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b0c      	cmp	r3, #12
 800814e:	d831      	bhi.n	80081b4 <HAL_TIM_ReadCapturedValue+0x78>
 8008150:	a201      	add	r2, pc, #4	@ (adr r2, 8008158 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	0800818d 	.word	0x0800818d
 800815c:	080081b5 	.word	0x080081b5
 8008160:	080081b5 	.word	0x080081b5
 8008164:	080081b5 	.word	0x080081b5
 8008168:	08008197 	.word	0x08008197
 800816c:	080081b5 	.word	0x080081b5
 8008170:	080081b5 	.word	0x080081b5
 8008174:	080081b5 	.word	0x080081b5
 8008178:	080081a1 	.word	0x080081a1
 800817c:	080081b5 	.word	0x080081b5
 8008180:	080081b5 	.word	0x080081b5
 8008184:	080081b5 	.word	0x080081b5
 8008188:	080081ab 	.word	0x080081ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008192:	60fb      	str	r3, [r7, #12]

      break;
 8008194:	e00f      	b.n	80081b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819c:	60fb      	str	r3, [r7, #12]

      break;
 800819e:	e00a      	b.n	80081b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a6:	60fb      	str	r3, [r7, #12]

      break;
 80081a8:	e005      	b.n	80081b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b0:	60fb      	str	r3, [r7, #12]

      break;
 80081b2:	e000      	b.n	80081b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80081b4:	bf00      	nop
  }

  return tmpreg;
 80081b6:	68fb      	ldr	r3, [r7, #12]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a46      	ldr	r2, [pc, #280]	@ (800832c <TIM_Base_SetConfig+0x12c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800821e:	d00f      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a43      	ldr	r2, [pc, #268]	@ (8008330 <TIM_Base_SetConfig+0x130>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00b      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a42      	ldr	r2, [pc, #264]	@ (8008334 <TIM_Base_SetConfig+0x134>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d007      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a41      	ldr	r2, [pc, #260]	@ (8008338 <TIM_Base_SetConfig+0x138>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a40      	ldr	r2, [pc, #256]	@ (800833c <TIM_Base_SetConfig+0x13c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d108      	bne.n	8008252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a35      	ldr	r2, [pc, #212]	@ (800832c <TIM_Base_SetConfig+0x12c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d02b      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008260:	d027      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a32      	ldr	r2, [pc, #200]	@ (8008330 <TIM_Base_SetConfig+0x130>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d023      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a31      	ldr	r2, [pc, #196]	@ (8008334 <TIM_Base_SetConfig+0x134>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01f      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a30      	ldr	r2, [pc, #192]	@ (8008338 <TIM_Base_SetConfig+0x138>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01b      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2f      	ldr	r2, [pc, #188]	@ (800833c <TIM_Base_SetConfig+0x13c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d017      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a2e      	ldr	r2, [pc, #184]	@ (8008340 <TIM_Base_SetConfig+0x140>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a2d      	ldr	r2, [pc, #180]	@ (8008344 <TIM_Base_SetConfig+0x144>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00f      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2c      	ldr	r2, [pc, #176]	@ (8008348 <TIM_Base_SetConfig+0x148>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a2b      	ldr	r2, [pc, #172]	@ (800834c <TIM_Base_SetConfig+0x14c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a2a      	ldr	r2, [pc, #168]	@ (8008350 <TIM_Base_SetConfig+0x150>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a29      	ldr	r2, [pc, #164]	@ (8008354 <TIM_Base_SetConfig+0x154>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d108      	bne.n	80082c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a10      	ldr	r2, [pc, #64]	@ (800832c <TIM_Base_SetConfig+0x12c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d003      	beq.n	80082f8 <TIM_Base_SetConfig+0xf8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a12      	ldr	r2, [pc, #72]	@ (800833c <TIM_Base_SetConfig+0x13c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d103      	bne.n	8008300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b01      	cmp	r3, #1
 8008310:	d105      	bne.n	800831e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f023 0201 	bic.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	611a      	str	r2, [r3, #16]
  }
}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40010000 	.word	0x40010000
 8008330:	40000400 	.word	0x40000400
 8008334:	40000800 	.word	0x40000800
 8008338:	40000c00 	.word	0x40000c00
 800833c:	40010400 	.word	0x40010400
 8008340:	40014000 	.word	0x40014000
 8008344:	40014400 	.word	0x40014400
 8008348:	40014800 	.word	0x40014800
 800834c:	40001800 	.word	0x40001800
 8008350:	40001c00 	.word	0x40001c00
 8008354:	40002000 	.word	0x40002000

08008358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f023 0201 	bic.w	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f023 0302 	bic.w	r3, r3, #2
 80083a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a20      	ldr	r2, [pc, #128]	@ (8008430 <TIM_OC1_SetConfig+0xd8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d003      	beq.n	80083bc <TIM_OC1_SetConfig+0x64>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <TIM_OC1_SetConfig+0xdc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d10c      	bne.n	80083d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f023 0308 	bic.w	r3, r3, #8
 80083c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f023 0304 	bic.w	r3, r3, #4
 80083d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a15      	ldr	r2, [pc, #84]	@ (8008430 <TIM_OC1_SetConfig+0xd8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_OC1_SetConfig+0x8e>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a14      	ldr	r2, [pc, #80]	@ (8008434 <TIM_OC1_SetConfig+0xdc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d111      	bne.n	800840a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	621a      	str	r2, [r3, #32]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	40010000 	.word	0x40010000
 8008434:	40010400 	.word	0x40010400

08008438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	f023 0210 	bic.w	r2, r3, #16
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800846e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	021b      	lsls	r3, r3, #8
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f023 0320 	bic.w	r3, r3, #32
 8008482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a22      	ldr	r2, [pc, #136]	@ (800851c <TIM_OC2_SetConfig+0xe4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_OC2_SetConfig+0x68>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a21      	ldr	r2, [pc, #132]	@ (8008520 <TIM_OC2_SetConfig+0xe8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10d      	bne.n	80084bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a17      	ldr	r2, [pc, #92]	@ (800851c <TIM_OC2_SetConfig+0xe4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_OC2_SetConfig+0x94>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	@ (8008520 <TIM_OC2_SetConfig+0xe8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d113      	bne.n	80084f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40010000 	.word	0x40010000
 8008520:	40010400 	.word	0x40010400

08008524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800856c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a21      	ldr	r2, [pc, #132]	@ (8008604 <TIM_OC3_SetConfig+0xe0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d003      	beq.n	800858a <TIM_OC3_SetConfig+0x66>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a20      	ldr	r2, [pc, #128]	@ (8008608 <TIM_OC3_SetConfig+0xe4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d10d      	bne.n	80085a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a16      	ldr	r2, [pc, #88]	@ (8008604 <TIM_OC3_SetConfig+0xe0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d003      	beq.n	80085b6 <TIM_OC3_SetConfig+0x92>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a15      	ldr	r2, [pc, #84]	@ (8008608 <TIM_OC3_SetConfig+0xe4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d113      	bne.n	80085de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	40010000 	.word	0x40010000
 8008608:	40010400 	.word	0x40010400

0800860c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800863a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	031b      	lsls	r3, r3, #12
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a12      	ldr	r2, [pc, #72]	@ (80086b0 <TIM_OC4_SetConfig+0xa4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d003      	beq.n	8008674 <TIM_OC4_SetConfig+0x68>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a11      	ldr	r2, [pc, #68]	@ (80086b4 <TIM_OC4_SetConfig+0xa8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d109      	bne.n	8008688 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800867a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	019b      	lsls	r3, r3, #6
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40010400 	.word	0x40010400

080086b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	f023 0201 	bic.w	r2, r3, #1
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4a28      	ldr	r2, [pc, #160]	@ (8008784 <TIM_TI1_SetConfig+0xcc>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d01b      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ec:	d017      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4a25      	ldr	r2, [pc, #148]	@ (8008788 <TIM_TI1_SetConfig+0xd0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d013      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4a24      	ldr	r2, [pc, #144]	@ (800878c <TIM_TI1_SetConfig+0xd4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00f      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a23      	ldr	r2, [pc, #140]	@ (8008790 <TIM_TI1_SetConfig+0xd8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00b      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a22      	ldr	r2, [pc, #136]	@ (8008794 <TIM_TI1_SetConfig+0xdc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d007      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4a21      	ldr	r2, [pc, #132]	@ (8008798 <TIM_TI1_SetConfig+0xe0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d003      	beq.n	800871e <TIM_TI1_SetConfig+0x66>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4a20      	ldr	r2, [pc, #128]	@ (800879c <TIM_TI1_SetConfig+0xe4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <TIM_TI1_SetConfig+0x6a>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <TIM_TI1_SetConfig+0x6c>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d008      	beq.n	800873a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	e003      	b.n	8008742 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	b2db      	uxtb	r3, r3
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f023 030a 	bic.w	r3, r3, #10
 800875c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f003 030a 	and.w	r3, r3, #10
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	40010000 	.word	0x40010000
 8008788:	40000400 	.word	0x40000400
 800878c:	40000800 	.word	0x40000800
 8008790:	40000c00 	.word	0x40000c00
 8008794:	40010400 	.word	0x40010400
 8008798:	40014000 	.word	0x40014000
 800879c:	40001800 	.word	0x40001800

080087a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f023 0201 	bic.w	r2, r3, #1
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f023 030a 	bic.w	r3, r3, #10
 80087dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	621a      	str	r2, [r3, #32]
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0210 	bic.w	r2, r3, #16
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800883c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	031b      	lsls	r3, r3, #12
 8008842:	b29b      	uxth	r3, r3
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008850:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4313      	orrs	r3, r2
 800885e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	621a      	str	r2, [r3, #32]
}
 800886c:	bf00      	nop
 800886e:	371c      	adds	r7, #28
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f023 0210 	bic.w	r2, r3, #16
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	031b      	lsls	r3, r3, #12
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	621a      	str	r2, [r3, #32]
}
 80088cc:	bf00      	nop
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f023 0303 	bic.w	r3, r3, #3
 8008904:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008914:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	b2db      	uxtb	r3, r3
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008928:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	621a      	str	r2, [r3, #32]
}
 8008944:	bf00      	nop
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a1b      	ldr	r3, [r3, #32]
 8008968:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800897c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4313      	orrs	r3, r2
 8008986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800898e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	031b      	lsls	r3, r3, #12
 8008994:	b29b      	uxth	r3, r3
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80089a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	031b      	lsls	r3, r3, #12
 80089a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	621a      	str	r2, [r3, #32]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b085      	sub	sp, #20
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	f043 0307 	orr.w	r3, r3, #7
 80089ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	609a      	str	r2, [r3, #8]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	021a      	lsls	r2, r3, #8
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	609a      	str	r2, [r3, #8]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	2201      	movs	r2, #1
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a1a      	ldr	r2, [r3, #32]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	43db      	mvns	r3, r3
 8008a62:	401a      	ands	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1a      	ldr	r2, [r3, #32]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 031f 	and.w	r3, r3, #31
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	fa01 f303 	lsl.w	r3, r1, r3
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e05a      	b.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a21      	ldr	r2, [pc, #132]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d022      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af0:	d01d      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d018      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a18      	ldr	r2, [pc, #96]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d009      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a17      	ldr	r2, [pc, #92]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d10c      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40010000 	.word	0x40010000
 8008b6c:	40000400 	.word	0x40000400
 8008b70:	40000800 	.word	0x40000800
 8008b74:	40000c00 	.word	0x40000c00
 8008b78:	40010400 	.word	0x40010400
 8008b7c:	40014000 	.word	0x40014000
 8008b80:	40001800 	.word	0x40001800

08008b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e042      	b.n	8008c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fa fb40 	bl	8003258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2224      	movs	r2, #36	@ 0x24
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f82b 	bl	8008c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c50:	b0c0      	sub	sp, #256	@ 0x100
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c68:	68d9      	ldr	r1, [r3, #12]
 8008c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	ea40 0301 	orr.w	r3, r0, r1
 8008c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ca4:	f021 010c 	bic.w	r1, r1, #12
 8008ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008cb2:	430b      	orrs	r3, r1
 8008cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc6:	6999      	ldr	r1, [r3, #24]
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	ea40 0301 	orr.w	r3, r0, r1
 8008cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b8f      	ldr	r3, [pc, #572]	@ (8008f18 <UART_SetConfig+0x2cc>)
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d005      	beq.n	8008cec <UART_SetConfig+0xa0>
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8008f1c <UART_SetConfig+0x2d0>)
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d104      	bne.n	8008cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cec:	f7fc fe70 	bl	80059d0 <HAL_RCC_GetPCLK2Freq>
 8008cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008cf4:	e003      	b.n	8008cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cf6:	f7fc fe57 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8008cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d08:	f040 810c 	bne.w	8008f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d10:	2200      	movs	r2, #0
 8008d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d1e:	4622      	mov	r2, r4
 8008d20:	462b      	mov	r3, r5
 8008d22:	1891      	adds	r1, r2, r2
 8008d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d26:	415b      	adcs	r3, r3
 8008d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d2e:	4621      	mov	r1, r4
 8008d30:	eb12 0801 	adds.w	r8, r2, r1
 8008d34:	4629      	mov	r1, r5
 8008d36:	eb43 0901 	adc.w	r9, r3, r1
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d4e:	4690      	mov	r8, r2
 8008d50:	4699      	mov	r9, r3
 8008d52:	4623      	mov	r3, r4
 8008d54:	eb18 0303 	adds.w	r3, r8, r3
 8008d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	eb49 0303 	adc.w	r3, r9, r3
 8008d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	18db      	adds	r3, r3, r3
 8008d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d80:	4613      	mov	r3, r2
 8008d82:	eb42 0303 	adc.w	r3, r2, r3
 8008d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d90:	f7f7 feac 	bl	8000aec <__aeabi_uldivmod>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4b61      	ldr	r3, [pc, #388]	@ (8008f20 <UART_SetConfig+0x2d4>)
 8008d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d9e:	095b      	lsrs	r3, r3, #5
 8008da0:	011c      	lsls	r4, r3, #4
 8008da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008db4:	4642      	mov	r2, r8
 8008db6:	464b      	mov	r3, r9
 8008db8:	1891      	adds	r1, r2, r2
 8008dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008dbc:	415b      	adcs	r3, r3
 8008dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8008dca:	4649      	mov	r1, r9
 8008dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008de4:	4692      	mov	sl, r2
 8008de6:	469b      	mov	fp, r3
 8008de8:	4643      	mov	r3, r8
 8008dea:	eb1a 0303 	adds.w	r3, sl, r3
 8008dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008df2:	464b      	mov	r3, r9
 8008df4:	eb4b 0303 	adc.w	r3, fp, r3
 8008df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e10:	460b      	mov	r3, r1
 8008e12:	18db      	adds	r3, r3, r3
 8008e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e16:	4613      	mov	r3, r2
 8008e18:	eb42 0303 	adc.w	r3, r2, r3
 8008e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e26:	f7f7 fe61 	bl	8000aec <__aeabi_uldivmod>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4b3b      	ldr	r3, [pc, #236]	@ (8008f20 <UART_SetConfig+0x2d4>)
 8008e32:	fba3 2301 	umull	r2, r3, r3, r1
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	2264      	movs	r2, #100	@ 0x64
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
 8008e3e:	1acb      	subs	r3, r1, r3
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e46:	4b36      	ldr	r3, [pc, #216]	@ (8008f20 <UART_SetConfig+0x2d4>)
 8008e48:	fba3 2302 	umull	r2, r3, r3, r2
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e54:	441c      	add	r4, r3
 8008e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	1891      	adds	r1, r2, r2
 8008e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e70:	415b      	adcs	r3, r3
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e78:	4641      	mov	r1, r8
 8008e7a:	1851      	adds	r1, r2, r1
 8008e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e7e:	4649      	mov	r1, r9
 8008e80:	414b      	adcs	r3, r1
 8008e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e90:	4659      	mov	r1, fp
 8008e92:	00cb      	lsls	r3, r1, #3
 8008e94:	4651      	mov	r1, sl
 8008e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e9a:	4651      	mov	r1, sl
 8008e9c:	00ca      	lsls	r2, r1, #3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	189b      	adds	r3, r3, r2
 8008ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eac:	464b      	mov	r3, r9
 8008eae:	460a      	mov	r2, r1
 8008eb0:	eb42 0303 	adc.w	r3, r2, r3
 8008eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ecc:	460b      	mov	r3, r1
 8008ece:	18db      	adds	r3, r3, r3
 8008ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	eb42 0303 	adc.w	r3, r2, r3
 8008ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008ee2:	f7f7 fe03 	bl	8000aec <__aeabi_uldivmod>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <UART_SetConfig+0x2d4>)
 8008eec:	fba3 1302 	umull	r1, r3, r3, r2
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	2164      	movs	r1, #100	@ 0x64
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	3332      	adds	r3, #50	@ 0x32
 8008efe:	4a08      	ldr	r2, [pc, #32]	@ (8008f20 <UART_SetConfig+0x2d4>)
 8008f00:	fba2 2303 	umull	r2, r3, r2, r3
 8008f04:	095b      	lsrs	r3, r3, #5
 8008f06:	f003 0207 	and.w	r2, r3, #7
 8008f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4422      	add	r2, r4
 8008f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f14:	e106      	b.n	8009124 <UART_SetConfig+0x4d8>
 8008f16:	bf00      	nop
 8008f18:	40011000 	.word	0x40011000
 8008f1c:	40011400 	.word	0x40011400
 8008f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f36:	4642      	mov	r2, r8
 8008f38:	464b      	mov	r3, r9
 8008f3a:	1891      	adds	r1, r2, r2
 8008f3c:	6239      	str	r1, [r7, #32]
 8008f3e:	415b      	adcs	r3, r3
 8008f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f46:	4641      	mov	r1, r8
 8008f48:	1854      	adds	r4, r2, r1
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	eb43 0501 	adc.w	r5, r3, r1
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	00eb      	lsls	r3, r5, #3
 8008f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f5e:	00e2      	lsls	r2, r4, #3
 8008f60:	4614      	mov	r4, r2
 8008f62:	461d      	mov	r5, r3
 8008f64:	4643      	mov	r3, r8
 8008f66:	18e3      	adds	r3, r4, r3
 8008f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	eb45 0303 	adc.w	r3, r5, r3
 8008f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f86:	f04f 0200 	mov.w	r2, #0
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f92:	4629      	mov	r1, r5
 8008f94:	008b      	lsls	r3, r1, #2
 8008f96:	4621      	mov	r1, r4
 8008f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	008a      	lsls	r2, r1, #2
 8008fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008fa4:	f7f7 fda2 	bl	8000aec <__aeabi_uldivmod>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4b60      	ldr	r3, [pc, #384]	@ (8009130 <UART_SetConfig+0x4e4>)
 8008fae:	fba3 2302 	umull	r2, r3, r3, r2
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	011c      	lsls	r4, r3, #4
 8008fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008fc8:	4642      	mov	r2, r8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	1891      	adds	r1, r2, r2
 8008fce:	61b9      	str	r1, [r7, #24]
 8008fd0:	415b      	adcs	r3, r3
 8008fd2:	61fb      	str	r3, [r7, #28]
 8008fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fd8:	4641      	mov	r1, r8
 8008fda:	1851      	adds	r1, r2, r1
 8008fdc:	6139      	str	r1, [r7, #16]
 8008fde:	4649      	mov	r1, r9
 8008fe0:	414b      	adcs	r3, r1
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	00cb      	lsls	r3, r1, #3
 8008ff4:	4651      	mov	r1, sl
 8008ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ffa:	4651      	mov	r1, sl
 8008ffc:	00ca      	lsls	r2, r1, #3
 8008ffe:	4610      	mov	r0, r2
 8009000:	4619      	mov	r1, r3
 8009002:	4603      	mov	r3, r0
 8009004:	4642      	mov	r2, r8
 8009006:	189b      	adds	r3, r3, r2
 8009008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800900c:	464b      	mov	r3, r9
 800900e:	460a      	mov	r2, r1
 8009010:	eb42 0303 	adc.w	r3, r2, r3
 8009014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009030:	4649      	mov	r1, r9
 8009032:	008b      	lsls	r3, r1, #2
 8009034:	4641      	mov	r1, r8
 8009036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800903a:	4641      	mov	r1, r8
 800903c:	008a      	lsls	r2, r1, #2
 800903e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009042:	f7f7 fd53 	bl	8000aec <__aeabi_uldivmod>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4611      	mov	r1, r2
 800904c:	4b38      	ldr	r3, [pc, #224]	@ (8009130 <UART_SetConfig+0x4e4>)
 800904e:	fba3 2301 	umull	r2, r3, r3, r1
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	2264      	movs	r2, #100	@ 0x64
 8009056:	fb02 f303 	mul.w	r3, r2, r3
 800905a:	1acb      	subs	r3, r1, r3
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	3332      	adds	r3, #50	@ 0x32
 8009060:	4a33      	ldr	r2, [pc, #204]	@ (8009130 <UART_SetConfig+0x4e4>)
 8009062:	fba2 2303 	umull	r2, r3, r2, r3
 8009066:	095b      	lsrs	r3, r3, #5
 8009068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800906c:	441c      	add	r4, r3
 800906e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009072:	2200      	movs	r2, #0
 8009074:	673b      	str	r3, [r7, #112]	@ 0x70
 8009076:	677a      	str	r2, [r7, #116]	@ 0x74
 8009078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800907c:	4642      	mov	r2, r8
 800907e:	464b      	mov	r3, r9
 8009080:	1891      	adds	r1, r2, r2
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	415b      	adcs	r3, r3
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800908c:	4641      	mov	r1, r8
 800908e:	1851      	adds	r1, r2, r1
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	4649      	mov	r1, r9
 8009094:	414b      	adcs	r3, r1
 8009096:	607b      	str	r3, [r7, #4]
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090a4:	4659      	mov	r1, fp
 80090a6:	00cb      	lsls	r3, r1, #3
 80090a8:	4651      	mov	r1, sl
 80090aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ae:	4651      	mov	r1, sl
 80090b0:	00ca      	lsls	r2, r1, #3
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	4603      	mov	r3, r0
 80090b8:	4642      	mov	r2, r8
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090be:	464b      	mov	r3, r9
 80090c0:	460a      	mov	r2, r1
 80090c2:	eb42 0303 	adc.w	r3, r2, r3
 80090c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80090d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80090d4:	f04f 0200 	mov.w	r2, #0
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80090e0:	4649      	mov	r1, r9
 80090e2:	008b      	lsls	r3, r1, #2
 80090e4:	4641      	mov	r1, r8
 80090e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090ea:	4641      	mov	r1, r8
 80090ec:	008a      	lsls	r2, r1, #2
 80090ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090f2:	f7f7 fcfb 	bl	8000aec <__aeabi_uldivmod>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009130 <UART_SetConfig+0x4e4>)
 80090fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	2164      	movs	r1, #100	@ 0x64
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	3332      	adds	r3, #50	@ 0x32
 800910e:	4a08      	ldr	r2, [pc, #32]	@ (8009130 <UART_SetConfig+0x4e4>)
 8009110:	fba2 2303 	umull	r2, r3, r2, r3
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	f003 020f 	and.w	r2, r3, #15
 800911a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4422      	add	r2, r4
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800912a:	46bd      	mov	sp, r7
 800912c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009130:	51eb851f 	.word	0x51eb851f

08009134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009134:	b084      	sub	sp, #16
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	f107 001c 	add.w	r0, r7, #28
 8009142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009146:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800914a:	2b01      	cmp	r3, #1
 800914c:	d123      	bne.n	8009196 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009176:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800917a:	2b01      	cmp	r3, #1
 800917c:	d105      	bne.n	800918a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 fae2 	bl	800a754 <USB_CoreReset>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	e01b      	b.n	80091ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fad6 	bl	800a754 <USB_CoreReset>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d106      	bne.n	80091c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	639a      	str	r2, [r3, #56]	@ 0x38
 80091c0:	e005      	b.n	80091ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091ce:	7fbb      	ldrb	r3, [r7, #30]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d10b      	bne.n	80091ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f043 0206 	orr.w	r2, r3, #6
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f043 0220 	orr.w	r2, r3, #32
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091f8:	b004      	add	sp, #16
 80091fa:	4770      	bx	lr

080091fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b02      	cmp	r3, #2
 800920e:	d165      	bne.n	80092dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	4a41      	ldr	r2, [pc, #260]	@ (8009318 <USB_SetTurnaroundTime+0x11c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d906      	bls.n	8009226 <USB_SetTurnaroundTime+0x2a>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	4a40      	ldr	r2, [pc, #256]	@ (800931c <USB_SetTurnaroundTime+0x120>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d202      	bcs.n	8009226 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009220:	230f      	movs	r3, #15
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	e062      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4a3c      	ldr	r2, [pc, #240]	@ (800931c <USB_SetTurnaroundTime+0x120>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d306      	bcc.n	800923c <USB_SetTurnaroundTime+0x40>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4a3b      	ldr	r2, [pc, #236]	@ (8009320 <USB_SetTurnaroundTime+0x124>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d202      	bcs.n	800923c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009236:	230e      	movs	r3, #14
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	e057      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	4a38      	ldr	r2, [pc, #224]	@ (8009320 <USB_SetTurnaroundTime+0x124>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d306      	bcc.n	8009252 <USB_SetTurnaroundTime+0x56>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4a37      	ldr	r2, [pc, #220]	@ (8009324 <USB_SetTurnaroundTime+0x128>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d202      	bcs.n	8009252 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800924c:	230d      	movs	r3, #13
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	e04c      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	4a33      	ldr	r2, [pc, #204]	@ (8009324 <USB_SetTurnaroundTime+0x128>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d306      	bcc.n	8009268 <USB_SetTurnaroundTime+0x6c>
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	4a32      	ldr	r2, [pc, #200]	@ (8009328 <USB_SetTurnaroundTime+0x12c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d802      	bhi.n	8009268 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009262:	230c      	movs	r3, #12
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e041      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4a2f      	ldr	r2, [pc, #188]	@ (8009328 <USB_SetTurnaroundTime+0x12c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d906      	bls.n	800927e <USB_SetTurnaroundTime+0x82>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4a2e      	ldr	r2, [pc, #184]	@ (800932c <USB_SetTurnaroundTime+0x130>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d802      	bhi.n	800927e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009278:	230b      	movs	r3, #11
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	e036      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4a2a      	ldr	r2, [pc, #168]	@ (800932c <USB_SetTurnaroundTime+0x130>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d906      	bls.n	8009294 <USB_SetTurnaroundTime+0x98>
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4a29      	ldr	r2, [pc, #164]	@ (8009330 <USB_SetTurnaroundTime+0x134>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d802      	bhi.n	8009294 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800928e:	230a      	movs	r3, #10
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	e02b      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4a26      	ldr	r2, [pc, #152]	@ (8009330 <USB_SetTurnaroundTime+0x134>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d906      	bls.n	80092aa <USB_SetTurnaroundTime+0xae>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	4a25      	ldr	r2, [pc, #148]	@ (8009334 <USB_SetTurnaroundTime+0x138>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d202      	bcs.n	80092aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092a4:	2309      	movs	r3, #9
 80092a6:	617b      	str	r3, [r7, #20]
 80092a8:	e020      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4a21      	ldr	r2, [pc, #132]	@ (8009334 <USB_SetTurnaroundTime+0x138>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d306      	bcc.n	80092c0 <USB_SetTurnaroundTime+0xc4>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	4a20      	ldr	r2, [pc, #128]	@ (8009338 <USB_SetTurnaroundTime+0x13c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d802      	bhi.n	80092c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092ba:	2308      	movs	r3, #8
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e015      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009338 <USB_SetTurnaroundTime+0x13c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d906      	bls.n	80092d6 <USB_SetTurnaroundTime+0xda>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4a1c      	ldr	r2, [pc, #112]	@ (800933c <USB_SetTurnaroundTime+0x140>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d202      	bcs.n	80092d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80092d0:	2307      	movs	r3, #7
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	e00a      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80092d6:	2306      	movs	r3, #6
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e007      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80092e2:	2309      	movs	r3, #9
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	e001      	b.n	80092ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80092e8:	2309      	movs	r3, #9
 80092ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	029b      	lsls	r3, r3, #10
 8009300:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009304:	431a      	orrs	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	371c      	adds	r7, #28
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	00d8acbf 	.word	0x00d8acbf
 800931c:	00e4e1c0 	.word	0x00e4e1c0
 8009320:	00f42400 	.word	0x00f42400
 8009324:	01067380 	.word	0x01067380
 8009328:	011a499f 	.word	0x011a499f
 800932c:	01312cff 	.word	0x01312cff
 8009330:	014ca43f 	.word	0x014ca43f
 8009334:	016e3600 	.word	0x016e3600
 8009338:	01a6ab1f 	.word	0x01a6ab1f
 800933c:	01e84800 	.word	0x01e84800

08009340 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f043 0201 	orr.w	r2, r3, #1
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f023 0201 	bic.w	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d115      	bne.n	80093d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093b2:	200a      	movs	r0, #10
 80093b4:	f7fa f8ce 	bl	8003554 <HAL_Delay>
      ms += 10U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	330a      	adds	r3, #10
 80093bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 f939 	bl	800a636 <USB_GetMode>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d01e      	beq.n	8009408 <USB_SetCurrentMode+0x84>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80093ce:	d9f0      	bls.n	80093b2 <USB_SetCurrentMode+0x2e>
 80093d0:	e01a      	b.n	8009408 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d115      	bne.n	8009404 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093e4:	200a      	movs	r0, #10
 80093e6:	f7fa f8b5 	bl	8003554 <HAL_Delay>
      ms += 10U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	330a      	adds	r3, #10
 80093ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f920 	bl	800a636 <USB_GetMode>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <USB_SetCurrentMode+0x84>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8009400:	d9f0      	bls.n	80093e4 <USB_SetCurrentMode+0x60>
 8009402:	e001      	b.n	8009408 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e005      	b.n	8009414 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2bc8      	cmp	r3, #200	@ 0xc8
 800940c:	d101      	bne.n	8009412 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e000      	b.n	8009414 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800941c:	b084      	sub	sp, #16
 800941e:	b580      	push	{r7, lr}
 8009420:	b086      	sub	sp, #24
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800942a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009436:	2300      	movs	r3, #0
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	e009      	b.n	8009450 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	3340      	adds	r3, #64	@ 0x40
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	2200      	movs	r2, #0
 8009448:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	3301      	adds	r3, #1
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2b0e      	cmp	r3, #14
 8009454:	d9f2      	bls.n	800943c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009456:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11c      	bne.n	8009498 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800946c:	f043 0302 	orr.w	r3, r3, #2
 8009470:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009476:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	e005      	b.n	80094a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094aa:	461a      	mov	r2, r3
 80094ac:	2300      	movs	r3, #0
 80094ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d10d      	bne.n	80094d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094c0:	2100      	movs	r1, #0
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f968 	bl	8009798 <USB_SetDevSpeed>
 80094c8:	e008      	b.n	80094dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094ca:	2101      	movs	r1, #1
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f963 	bl	8009798 <USB_SetDevSpeed>
 80094d2:	e003      	b.n	80094dc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094d4:	2103      	movs	r1, #3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f95e 	bl	8009798 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094dc:	2110      	movs	r1, #16
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f8fa 	bl	80096d8 <USB_FlushTxFifo>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f924 	bl	800973c <USB_FlushRxFifo>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009504:	461a      	mov	r2, r3
 8009506:	2300      	movs	r3, #0
 8009508:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009510:	461a      	mov	r2, r3
 8009512:	2300      	movs	r3, #0
 8009514:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800951c:	461a      	mov	r2, r3
 800951e:	2300      	movs	r3, #0
 8009520:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009522:	2300      	movs	r3, #0
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	e043      	b.n	80095b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800953a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800953e:	d118      	bne.n	8009572 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009552:	461a      	mov	r2, r3
 8009554:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	e013      	b.n	8009584 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009568:	461a      	mov	r2, r3
 800956a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	e008      	b.n	8009584 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800957e:	461a      	mov	r2, r3
 8009580:	2300      	movs	r3, #0
 8009582:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009590:	461a      	mov	r2, r3
 8009592:	2300      	movs	r3, #0
 8009594:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a2:	461a      	mov	r2, r3
 80095a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80095a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095b4:	461a      	mov	r2, r3
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d3b5      	bcc.n	8009528 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095bc:	2300      	movs	r3, #0
 80095be:	613b      	str	r3, [r7, #16]
 80095c0:	e043      	b.n	800964a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095d8:	d118      	bne.n	800960c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10a      	bne.n	80095f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ec:	461a      	mov	r2, r3
 80095ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	e013      	b.n	800961e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009602:	461a      	mov	r2, r3
 8009604:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	e008      	b.n	800961e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	2300      	movs	r3, #0
 800961c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962a:	461a      	mov	r2, r3
 800962c:	2300      	movs	r3, #0
 800962e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963c:	461a      	mov	r2, r3
 800963e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009642:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	3301      	adds	r3, #1
 8009648:	613b      	str	r3, [r7, #16]
 800964a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800964e:	461a      	mov	r2, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4293      	cmp	r3, r2
 8009654:	d3b5      	bcc.n	80095c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009668:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009676:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f043 0210 	orr.w	r2, r3, #16
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699a      	ldr	r2, [r3, #24]
 8009690:	4b10      	ldr	r3, [pc, #64]	@ (80096d4 <USB_DevInit+0x2b8>)
 8009692:	4313      	orrs	r3, r2
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009698:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f043 0208 	orr.w	r2, r3, #8
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096bc:	f043 0304 	orr.w	r3, r3, #4
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096d0:	b004      	add	sp, #16
 80096d2:	4770      	bx	lr
 80096d4:	803c3800 	.word	0x803c3800

080096d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3301      	adds	r3, #1
 80096ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096f2:	d901      	bls.n	80096f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e01b      	b.n	8009730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	daf2      	bge.n	80096e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	019b      	lsls	r3, r3, #6
 8009708:	f043 0220 	orr.w	r2, r3, #32
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800971c:	d901      	bls.n	8009722 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800971e:	2303      	movs	r3, #3
 8009720:	e006      	b.n	8009730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b20      	cmp	r3, #32
 800972c:	d0f0      	beq.n	8009710 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009754:	d901      	bls.n	800975a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e018      	b.n	800978c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	daf2      	bge.n	8009748 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2210      	movs	r2, #16
 800976a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3301      	adds	r3, #1
 8009770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009778:	d901      	bls.n	800977e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e006      	b.n	800978c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	2b10      	cmp	r3, #16
 8009788:	d0f0      	beq.n	800976c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097b8:	4313      	orrs	r3, r2
 80097ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b087      	sub	sp, #28
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 0306 	and.w	r3, r3, #6
 80097e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75fb      	strb	r3, [r7, #23]
 80097ee:	e00a      	b.n	8009806 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d002      	beq.n	80097fc <USB_GetDevSpeed+0x32>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b06      	cmp	r3, #6
 80097fa:	d102      	bne.n	8009802 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80097fc:	2302      	movs	r3, #2
 80097fe:	75fb      	strb	r3, [r7, #23]
 8009800:	e001      	b.n	8009806 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009802:	230f      	movs	r3, #15
 8009804:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009806:	7dfb      	ldrb	r3, [r7, #23]
}
 8009808:	4618      	mov	r0, r3
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	785b      	ldrb	r3, [r3, #1]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d13a      	bne.n	80098a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	f003 030f 	and.w	r3, r3, #15
 8009840:	2101      	movs	r1, #1
 8009842:	fa01 f303 	lsl.w	r3, r1, r3
 8009846:	b29b      	uxth	r3, r3
 8009848:	68f9      	ldr	r1, [r7, #12]
 800984a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800984e:	4313      	orrs	r3, r2
 8009850:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d155      	bne.n	8009914 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	791b      	ldrb	r3, [r3, #4]
 8009882:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009884:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	059b      	lsls	r3, r3, #22
 800988a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800988c:	4313      	orrs	r3, r2
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800989a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800989e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	e036      	b.n	8009914 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ac:	69da      	ldr	r2, [r3, #28]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	f003 030f 	and.w	r3, r3, #15
 80098b6:	2101      	movs	r1, #1
 80098b8:	fa01 f303 	lsl.w	r3, r1, r3
 80098bc:	041b      	lsls	r3, r3, #16
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098c4:	4313      	orrs	r3, r2
 80098c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d11a      	bne.n	8009914 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	791b      	ldrb	r3, [r3, #4]
 80098f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098fa:	430b      	orrs	r3, r1
 80098fc:	4313      	orrs	r3, r2
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800990e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009912:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
	...

08009924 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	785b      	ldrb	r3, [r3, #1]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d161      	bne.n	8009a04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009952:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009956:	d11f      	bne.n	8009998 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	440a      	add	r2, r1
 800996e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009972:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009976:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	0151      	lsls	r1, r2, #5
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	440a      	add	r2, r1
 800998e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009992:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009996:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800999e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f003 030f 	and.w	r3, r3, #15
 80099a8:	2101      	movs	r1, #1
 80099aa:	fa01 f303 	lsl.w	r3, r1, r3
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	43db      	mvns	r3, r3
 80099b2:	68f9      	ldr	r1, [r7, #12]
 80099b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099b8:	4013      	ands	r3, r2
 80099ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c2:	69da      	ldr	r2, [r3, #28]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	2101      	movs	r1, #1
 80099ce:	fa01 f303 	lsl.w	r3, r1, r3
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099dc:	4013      	ands	r3, r2
 80099de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	0159      	lsls	r1, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	440b      	add	r3, r1
 80099f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fa:	4619      	mov	r1, r3
 80099fc:	4b35      	ldr	r3, [pc, #212]	@ (8009ad4 <USB_DeactivateEndpoint+0x1b0>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	600b      	str	r3, [r1, #0]
 8009a02:	e060      	b.n	8009ac6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	015a      	lsls	r2, r3, #5
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a1a:	d11f      	bne.n	8009a5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	0151      	lsls	r1, r2, #5
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	440a      	add	r2, r1
 8009a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a72:	041b      	lsls	r3, r3, #16
 8009a74:	43db      	mvns	r3, r3
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a86:	69da      	ldr	r2, [r3, #28]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	f003 030f 	and.w	r3, r3, #15
 8009a90:	2101      	movs	r1, #1
 8009a92:	fa01 f303 	lsl.w	r3, r1, r3
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	0159      	lsls	r1, r3, #5
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	440b      	add	r3, r1
 8009aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <USB_DeactivateEndpoint+0x1b4>)
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	ec337800 	.word	0xec337800
 8009ad8:	eff37800 	.word	0xeff37800

08009adc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	@ 0x28
 8009ae0:	af02      	add	r7, sp, #8
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	785b      	ldrb	r3, [r3, #1]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	f040 817f 	bne.w	8009dfc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d132      	bne.n	8009b6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b20:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b24:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	0151      	lsls	r1, r2, #5
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	440a      	add	r2, r1
 8009b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b64:	0cdb      	lsrs	r3, r3, #19
 8009b66:	04db      	lsls	r3, r3, #19
 8009b68:	6113      	str	r3, [r2, #16]
 8009b6a:	e097      	b.n	8009c9c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	0151      	lsls	r1, r2, #5
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	440a      	add	r2, r1
 8009b82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b86:	0cdb      	lsrs	r3, r3, #19
 8009b88:	04db      	lsls	r3, r3, #19
 8009b8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	0151      	lsls	r1, r2, #5
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	440a      	add	r2, r1
 8009ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009baa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d11a      	bne.n	8009bec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	691a      	ldr	r2, [r3, #16]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d903      	bls.n	8009bca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	69fa      	ldr	r2, [r7, #28]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009be8:	6113      	str	r3, [r2, #16]
 8009bea:	e044      	b.n	8009c76 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691a      	ldr	r2, [r3, #16]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	1e5a      	subs	r2, r3, #1
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c00:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	8afb      	ldrh	r3, [r7, #22]
 8009c12:	04d9      	lsls	r1, r3, #19
 8009c14:	4ba4      	ldr	r3, [pc, #656]	@ (8009ea8 <USB_EPStartXfer+0x3cc>)
 8009c16:	400b      	ands	r3, r1
 8009c18:	69b9      	ldr	r1, [r7, #24]
 8009c1a:	0148      	lsls	r0, r1, #5
 8009c1c:	69f9      	ldr	r1, [r7, #28]
 8009c1e:	4401      	add	r1, r0
 8009c20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c24:	4313      	orrs	r3, r2
 8009c26:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	791b      	ldrb	r3, [r3, #4]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d122      	bne.n	8009c76 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c4a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009c4e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5c:	691a      	ldr	r2, [r3, #16]
 8009c5e:	8afb      	ldrh	r3, [r7, #22]
 8009c60:	075b      	lsls	r3, r3, #29
 8009c62:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009c66:	69b9      	ldr	r1, [r7, #24]
 8009c68:	0148      	lsls	r0, r1, #5
 8009c6a:	69f9      	ldr	r1, [r7, #28]
 8009c6c:	4401      	add	r1, r0
 8009c6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c72:	4313      	orrs	r3, r2
 8009c74:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c82:	691a      	ldr	r2, [r3, #16]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c8c:	69b9      	ldr	r1, [r7, #24]
 8009c8e:	0148      	lsls	r0, r1, #5
 8009c90:	69f9      	ldr	r1, [r7, #28]
 8009c92:	4401      	add	r1, r0
 8009c94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d14b      	bne.n	8009d3a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	791b      	ldrb	r3, [r3, #4]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d128      	bne.n	8009d18 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d110      	bne.n	8009cf8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	0151      	lsls	r1, r2, #5
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	440a      	add	r2, r1
 8009cec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	e00f      	b.n	8009d18 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	69fa      	ldr	r2, [r7, #28]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d16:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	0151      	lsls	r1, r2, #5
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	440a      	add	r2, r1
 8009d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	e166      	b.n	800a008 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	0151      	lsls	r1, r2, #5
 8009d4c:	69fa      	ldr	r2, [r7, #28]
 8009d4e:	440a      	add	r2, r1
 8009d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d54:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d58:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	791b      	ldrb	r3, [r3, #4]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d015      	beq.n	8009d8e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 814e 	beq.w	800a008 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 030f 	and.w	r3, r3, #15
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d82:	69f9      	ldr	r1, [r7, #28]
 8009d84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	634b      	str	r3, [r1, #52]	@ 0x34
 8009d8c:	e13c      	b.n	800a008 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d110      	bne.n	8009dc0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	0151      	lsls	r1, r2, #5
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	440a      	add	r2, r1
 8009db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009db8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	e00f      	b.n	8009de0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dde:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	68d9      	ldr	r1, [r3, #12]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	781a      	ldrb	r2, [r3, #0]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	b298      	uxth	r0, r3
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4603      	mov	r3, r0
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f9b9 	bl	800a16c <USB_WritePacket>
 8009dfa:	e105      	b.n	800a008 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e16:	0cdb      	lsrs	r3, r3, #19
 8009e18:	04db      	lsls	r3, r3, #19
 8009e1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e3e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d132      	bne.n	8009eac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	689a      	ldr	r2, [r3, #8]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e74:	69b9      	ldr	r1, [r7, #24]
 8009e76:	0148      	lsls	r0, r1, #5
 8009e78:	69f9      	ldr	r1, [r7, #28]
 8009e7a:	4401      	add	r1, r0
 8009e7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e80:	4313      	orrs	r3, r2
 8009e82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ea2:	6113      	str	r3, [r2, #16]
 8009ea4:	e062      	b.n	8009f6c <USB_EPStartXfer+0x490>
 8009ea6:	bf00      	nop
 8009ea8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d123      	bne.n	8009efc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec0:	691a      	ldr	r2, [r3, #16]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eca:	69b9      	ldr	r1, [r7, #24]
 8009ecc:	0148      	lsls	r0, r1, #5
 8009ece:	69f9      	ldr	r1, [r7, #28]
 8009ed0:	4401      	add	r1, r0
 8009ed2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	0151      	lsls	r1, r2, #5
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	440a      	add	r2, r1
 8009ef0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ef8:	6113      	str	r3, [r2, #16]
 8009efa:	e037      	b.n	8009f6c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	4413      	add	r3, r2
 8009f06:	1e5a      	subs	r2, r3, #1
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f10:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	8afa      	ldrh	r2, [r7, #22]
 8009f18:	fb03 f202 	mul.w	r2, r3, r2
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f2c:	691a      	ldr	r2, [r3, #16]
 8009f2e:	8afb      	ldrh	r3, [r7, #22]
 8009f30:	04d9      	lsls	r1, r3, #19
 8009f32:	4b38      	ldr	r3, [pc, #224]	@ (800a014 <USB_EPStartXfer+0x538>)
 8009f34:	400b      	ands	r3, r1
 8009f36:	69b9      	ldr	r1, [r7, #24]
 8009f38:	0148      	lsls	r0, r1, #5
 8009f3a:	69f9      	ldr	r1, [r7, #28]
 8009f3c:	4401      	add	r1, r0
 8009f3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f42:	4313      	orrs	r3, r2
 8009f44:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f5c:	69b9      	ldr	r1, [r7, #24]
 8009f5e:	0148      	lsls	r0, r1, #5
 8009f60:	69f9      	ldr	r1, [r7, #28]
 8009f62:	4401      	add	r1, r0
 8009f64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d10d      	bne.n	8009f8e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	68d9      	ldr	r1, [r3, #12]
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f8a:	460a      	mov	r2, r1
 8009f8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	791b      	ldrb	r3, [r3, #4]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d128      	bne.n	8009fe8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d110      	bne.n	8009fc8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	69ba      	ldr	r2, [r7, #24]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	69fa      	ldr	r2, [r7, #28]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	e00f      	b.n	8009fe8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	0151      	lsls	r1, r2, #5
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	440a      	add	r2, r1
 8009fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fe6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a002:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	1ff80000 	.word	0x1ff80000

0800a018 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d14a      	bne.n	800a0cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a04a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a04e:	f040 8086 	bne.w	800a15e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	7812      	ldrb	r2, [r2, #0]
 800a066:	0151      	lsls	r1, r2, #5
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	440a      	add	r2, r1
 800a06c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a070:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a074:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	7812      	ldrb	r2, [r2, #0]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a098:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d902      	bls.n	800a0b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ae:	e056      	b.n	800a15e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0c8:	d0e7      	beq.n	800a09a <USB_EPStopXfer+0x82>
 800a0ca:	e048      	b.n	800a15e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0e4:	d13b      	bne.n	800a15e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	7812      	ldrb	r2, [r2, #0]
 800a0fa:	0151      	lsls	r1, r2, #5
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	440a      	add	r2, r1
 800a100:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a104:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a108:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	7812      	ldrb	r2, [r2, #0]
 800a11e:	0151      	lsls	r1, r2, #5
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	440a      	add	r2, r1
 800a124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a128:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a12c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d902      	bls.n	800a144 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	75fb      	strb	r3, [r7, #23]
          break;
 800a142:	e00c      	b.n	800a15e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a15c:	d0e7      	beq.n	800a12e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	371c      	adds	r7, #28
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b089      	sub	sp, #36	@ 0x24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4611      	mov	r1, r2
 800a178:	461a      	mov	r2, r3
 800a17a:	460b      	mov	r3, r1
 800a17c:	71fb      	strb	r3, [r7, #7]
 800a17e:	4613      	mov	r3, r2
 800a180:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a18a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d123      	bne.n	800a1da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a192:	88bb      	ldrh	r3, [r7, #4]
 800a194:	3303      	adds	r3, #3
 800a196:	089b      	lsrs	r3, r3, #2
 800a198:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a19a:	2300      	movs	r3, #0
 800a19c:	61bb      	str	r3, [r7, #24]
 800a19e:	e018      	b.n	800a1d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	031a      	lsls	r2, r3, #12
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d3e2      	bcc.n	800a1a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3724      	adds	r7, #36	@ 0x24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b08b      	sub	sp, #44	@ 0x2c
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	089b      	lsrs	r3, r3, #2
 800a202:	b29b      	uxth	r3, r3
 800a204:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a206:	88fb      	ldrh	r3, [r7, #6]
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a20e:	2300      	movs	r3, #0
 800a210:	623b      	str	r3, [r7, #32]
 800a212:	e014      	b.n	800a23e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a222:	3301      	adds	r3, #1
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	3301      	adds	r3, #1
 800a22a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22e:	3301      	adds	r3, #1
 800a230:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	3301      	adds	r3, #1
 800a236:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	3301      	adds	r3, #1
 800a23c:	623b      	str	r3, [r7, #32]
 800a23e:	6a3a      	ldr	r2, [r7, #32]
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	429a      	cmp	r2, r3
 800a244:	d3e6      	bcc.n	800a214 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a246:	8bfb      	ldrh	r3, [r7, #30]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01e      	beq.n	800a28a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a256:	461a      	mov	r2, r3
 800a258:	f107 0310 	add.w	r3, r7, #16
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	fa22 f303 	lsr.w	r3, r2, r3
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	701a      	strb	r2, [r3, #0]
      i++;
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	3301      	adds	r3, #1
 800a276:	623b      	str	r3, [r7, #32]
      pDest++;
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	3301      	adds	r3, #1
 800a27c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a27e:	8bfb      	ldrh	r3, [r7, #30]
 800a280:	3b01      	subs	r3, #1
 800a282:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a284:	8bfb      	ldrh	r3, [r7, #30]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1ea      	bne.n	800a260 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	372c      	adds	r7, #44	@ 0x2c
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d12c      	bne.n	800a30e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	db12      	blt.n	800a2ec <USB_EPSetStall+0x54>
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00f      	beq.n	800a2ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	0151      	lsls	r1, r2, #5
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	440a      	add	r2, r1
 800a2e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a2ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	0151      	lsls	r1, r2, #5
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	440a      	add	r2, r1
 800a302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a306:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	e02b      	b.n	800a366 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	db12      	blt.n	800a346 <USB_EPSetStall+0xae>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	015a      	lsls	r2, r3, #5
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	0151      	lsls	r1, r2, #5
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	440a      	add	r2, r1
 800a33c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a340:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a344:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	0151      	lsls	r1, r2, #5
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	440a      	add	r2, r1
 800a35c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a364:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	785b      	ldrb	r3, [r3, #1]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d128      	bne.n	800a3e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	0151      	lsls	r1, r2, #5
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	791b      	ldrb	r3, [r3, #4]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d003      	beq.n	800a3c0 <USB_EPClearStall+0x4c>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	791b      	ldrb	r3, [r3, #4]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d138      	bne.n	800a432 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	0151      	lsls	r1, r2, #5
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	440a      	add	r2, r1
 800a3d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e027      	b.n	800a432 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a400:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	791b      	ldrb	r3, [r3, #4]
 800a406:	2b03      	cmp	r3, #3
 800a408:	d003      	beq.n	800a412 <USB_EPClearStall+0x9e>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	791b      	ldrb	r3, [r3, #4]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d10f      	bne.n	800a432 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	0151      	lsls	r1, r2, #5
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	440a      	add	r2, r1
 800a428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a42c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a430:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a45e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a462:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	011b      	lsls	r3, r3, #4
 800a470:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a474:	68f9      	ldr	r1, [r7, #12]
 800a476:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a47a:	4313      	orrs	r3, r2
 800a47c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4a6:	f023 0303 	bic.w	r3, r3, #3
 800a4aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4ba:	f023 0302 	bic.w	r3, r3, #2
 800a4be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
 800a4ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	4013      	ands	r3, r2
 800a526:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a528:	68fb      	ldr	r3, [r7, #12]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	0c1b      	lsrs	r3, r3, #16
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	4013      	ands	r3, r2
 800a58c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	b29b      	uxth	r3, r3
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b085      	sub	sp, #20
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	015a      	lsls	r2, r3, #5
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5cc:	68bb      	ldr	r3, [r7, #8]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b087      	sub	sp, #28
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	fa22 f303 	lsr.w	r3, r2, r3
 800a60a:	01db      	lsls	r3, r3, #7
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4313      	orrs	r3, r2
 800a612:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4013      	ands	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a628:	68bb      	ldr	r3, [r7, #8]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f003 0301 	and.w	r3, r3, #1
}
 800a646:	4618      	mov	r0, r3
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a652:	b480      	push	{r7}
 800a654:	b085      	sub	sp, #20
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a66c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a670:	f023 0307 	bic.w	r3, r3, #7
 800a674:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a688:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	333c      	adds	r3, #60	@ 0x3c
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4a26      	ldr	r2, [pc, #152]	@ (800a750 <USB_EP0_OutStart+0xb8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d90a      	bls.n	800a6d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6cc:	d101      	bne.n	800a6d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e037      	b.n	800a742 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d8:	461a      	mov	r2, r3
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a700:	f043 0318 	orr.w	r3, r3, #24
 800a704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a714:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a718:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d10f      	bne.n	800a740 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a726:	461a      	mov	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a73a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a73e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	4f54300a 	.word	0x4f54300a

0800a754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a76c:	d901      	bls.n	800a772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e01b      	b.n	800a7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	daf2      	bge.n	800a760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f043 0201 	orr.w	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3301      	adds	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a796:	d901      	bls.n	800a79c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e006      	b.n	800a7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d0f0      	beq.n	800a78a <USB_CoreReset+0x36>

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a7c8:	f002 fd70 	bl	800d2ac <USBD_static_malloc>
 800a7cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d109      	bne.n	800a7e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32b0      	adds	r2, #176	@ 0xb0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e0d4      	b.n	800a992 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a7e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f002 fdd4 	bl	800d39c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	32b0      	adds	r2, #176	@ 0xb0
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	32b0      	adds	r2, #176	@ 0xb0
 800a80e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7c1b      	ldrb	r3, [r3, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d138      	bne.n	800a892 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a820:	4b5e      	ldr	r3, [pc, #376]	@ (800a99c <USBD_CDC_Init+0x1e4>)
 800a822:	7819      	ldrb	r1, [r3, #0]
 800a824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a828:	2202      	movs	r2, #2
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f002 fbcd 	bl	800cfca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a830:	4b5a      	ldr	r3, [pc, #360]	@ (800a99c <USBD_CDC_Init+0x1e4>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	f003 020f 	and.w	r2, r3, #15
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	3324      	adds	r3, #36	@ 0x24
 800a846:	2201      	movs	r2, #1
 800a848:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a84a:	4b55      	ldr	r3, [pc, #340]	@ (800a9a0 <USBD_CDC_Init+0x1e8>)
 800a84c:	7819      	ldrb	r1, [r3, #0]
 800a84e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a852:	2202      	movs	r2, #2
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f002 fbb8 	bl	800cfca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a85a:	4b51      	ldr	r3, [pc, #324]	@ (800a9a0 <USBD_CDC_Init+0x1e8>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	f003 020f 	and.w	r2, r3, #15
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	440b      	add	r3, r1
 800a86e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a872:	2201      	movs	r2, #1
 800a874:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a876:	4b4b      	ldr	r3, [pc, #300]	@ (800a9a4 <USBD_CDC_Init+0x1ec>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	f003 020f 	and.w	r2, r3, #15
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	3326      	adds	r3, #38	@ 0x26
 800a88c:	2210      	movs	r2, #16
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	e035      	b.n	800a8fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a892:	4b42      	ldr	r3, [pc, #264]	@ (800a99c <USBD_CDC_Init+0x1e4>)
 800a894:	7819      	ldrb	r1, [r3, #0]
 800a896:	2340      	movs	r3, #64	@ 0x40
 800a898:	2202      	movs	r2, #2
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f002 fb95 	bl	800cfca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8a0:	4b3e      	ldr	r3, [pc, #248]	@ (800a99c <USBD_CDC_Init+0x1e4>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 020f 	and.w	r2, r3, #15
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	3324      	adds	r3, #36	@ 0x24
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8ba:	4b39      	ldr	r3, [pc, #228]	@ (800a9a0 <USBD_CDC_Init+0x1e8>)
 800a8bc:	7819      	ldrb	r1, [r3, #0]
 800a8be:	2340      	movs	r3, #64	@ 0x40
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f002 fb81 	bl	800cfca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8c8:	4b35      	ldr	r3, [pc, #212]	@ (800a9a0 <USBD_CDC_Init+0x1e8>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 020f 	and.w	r2, r3, #15
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	440b      	add	r3, r1
 800a8dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a8e4:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a4 <USBD_CDC_Init+0x1ec>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	f003 020f 	and.w	r2, r3, #15
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3326      	adds	r3, #38	@ 0x26
 800a8fa:	2210      	movs	r2, #16
 800a8fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8fe:	4b29      	ldr	r3, [pc, #164]	@ (800a9a4 <USBD_CDC_Init+0x1ec>)
 800a900:	7819      	ldrb	r1, [r3, #0]
 800a902:	2308      	movs	r3, #8
 800a904:	2203      	movs	r2, #3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f002 fb5f 	bl	800cfca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a90c:	4b25      	ldr	r3, [pc, #148]	@ (800a9a4 <USBD_CDC_Init+0x1ec>)
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	f003 020f 	and.w	r2, r3, #15
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	3324      	adds	r3, #36	@ 0x24
 800a922:	2201      	movs	r2, #1
 800a924:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	33b0      	adds	r3, #176	@ 0xb0
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a95c:	2302      	movs	r3, #2
 800a95e:	e018      	b.n	800a992 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7c1b      	ldrb	r3, [r3, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10a      	bne.n	800a97e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a968:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a0 <USBD_CDC_Init+0x1e8>)
 800a96a:	7819      	ldrb	r1, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f002 fc16 	bl	800d1a8 <USBD_LL_PrepareReceive>
 800a97c:	e008      	b.n	800a990 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a97e:	4b08      	ldr	r3, [pc, #32]	@ (800a9a0 <USBD_CDC_Init+0x1e8>)
 800a980:	7819      	ldrb	r1, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a988:	2340      	movs	r3, #64	@ 0x40
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f002 fc0c 	bl	800d1a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	200001d7 	.word	0x200001d7
 800a9a0:	200001d8 	.word	0x200001d8
 800a9a4:	200001d9 	.word	0x200001d9

0800a9a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a9b4:	4b3a      	ldr	r3, [pc, #232]	@ (800aaa0 <USBD_CDC_DeInit+0xf8>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f002 fb2b 	bl	800d016 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a9c0:	4b37      	ldr	r3, [pc, #220]	@ (800aaa0 <USBD_CDC_DeInit+0xf8>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 020f 	and.w	r2, r3, #15
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	3324      	adds	r3, #36	@ 0x24
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a9da:	4b32      	ldr	r3, [pc, #200]	@ (800aaa4 <USBD_CDC_DeInit+0xfc>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f002 fb18 	bl	800d016 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a9e6:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa4 <USBD_CDC_DeInit+0xfc>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	f003 020f 	and.w	r2, r3, #15
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9fe:	2200      	movs	r2, #0
 800aa00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa02:	4b29      	ldr	r3, [pc, #164]	@ (800aaa8 <USBD_CDC_DeInit+0x100>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f002 fb04 	bl	800d016 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa0e:	4b26      	ldr	r3, [pc, #152]	@ (800aaa8 <USBD_CDC_DeInit+0x100>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	f003 020f 	and.w	r2, r3, #15
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	440b      	add	r3, r1
 800aa22:	3324      	adds	r3, #36	@ 0x24
 800aa24:	2200      	movs	r2, #0
 800aa26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa28:	4b1f      	ldr	r3, [pc, #124]	@ (800aaa8 <USBD_CDC_DeInit+0x100>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	f003 020f 	and.w	r2, r3, #15
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3326      	adds	r3, #38	@ 0x26
 800aa3e:	2200      	movs	r2, #0
 800aa40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	32b0      	adds	r2, #176	@ 0xb0
 800aa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d01f      	beq.n	800aa94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	33b0      	adds	r3, #176	@ 0xb0
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	32b0      	adds	r2, #176	@ 0xb0
 800aa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f002 fc26 	bl	800d2c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	32b0      	adds	r2, #176	@ 0xb0
 800aa86:	2100      	movs	r1, #0
 800aa88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	200001d7 	.word	0x200001d7
 800aaa4:	200001d8 	.word	0x200001d8
 800aaa8:	200001d9 	.word	0x200001d9

0800aaac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	32b0      	adds	r2, #176	@ 0xb0
 800aac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	e0bf      	b.n	800ac5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d050      	beq.n	800ab8a <USBD_CDC_Setup+0xde>
 800aae8:	2b20      	cmp	r3, #32
 800aaea:	f040 80af 	bne.w	800ac4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	88db      	ldrh	r3, [r3, #6]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d03a      	beq.n	800ab6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	da1b      	bge.n	800ab38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	33b0      	adds	r3, #176	@ 0xb0
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	88d2      	ldrh	r2, [r2, #6]
 800ab1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	88db      	ldrh	r3, [r3, #6]
 800ab22:	2b07      	cmp	r3, #7
 800ab24:	bf28      	it	cs
 800ab26:	2307      	movcs	r3, #7
 800ab28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	89fa      	ldrh	r2, [r7, #14]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 fdbd 	bl	800c6b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab36:	e090      	b.n	800ac5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	785a      	ldrb	r2, [r3, #1]
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	88db      	ldrh	r3, [r3, #6]
 800ab46:	2b3f      	cmp	r3, #63	@ 0x3f
 800ab48:	d803      	bhi.n	800ab52 <USBD_CDC_Setup+0xa6>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	88db      	ldrh	r3, [r3, #6]
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	e000      	b.n	800ab54 <USBD_CDC_Setup+0xa8>
 800ab52:	2240      	movs	r2, #64	@ 0x40
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ab5a:	6939      	ldr	r1, [r7, #16]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ab62:	461a      	mov	r2, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 fdcf 	bl	800c708 <USBD_CtlPrepareRx>
      break;
 800ab6a:	e076      	b.n	800ac5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	33b0      	adds	r3, #176	@ 0xb0
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	7850      	ldrb	r0, [r2, #1]
 800ab82:	2200      	movs	r2, #0
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	4798      	blx	r3
      break;
 800ab88:	e067      	b.n	800ac5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	2b0b      	cmp	r3, #11
 800ab90:	d851      	bhi.n	800ac36 <USBD_CDC_Setup+0x18a>
 800ab92:	a201      	add	r2, pc, #4	@ (adr r2, 800ab98 <USBD_CDC_Setup+0xec>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800abc9 	.word	0x0800abc9
 800ab9c:	0800ac45 	.word	0x0800ac45
 800aba0:	0800ac37 	.word	0x0800ac37
 800aba4:	0800ac37 	.word	0x0800ac37
 800aba8:	0800ac37 	.word	0x0800ac37
 800abac:	0800ac37 	.word	0x0800ac37
 800abb0:	0800ac37 	.word	0x0800ac37
 800abb4:	0800ac37 	.word	0x0800ac37
 800abb8:	0800ac37 	.word	0x0800ac37
 800abbc:	0800ac37 	.word	0x0800ac37
 800abc0:	0800abf3 	.word	0x0800abf3
 800abc4:	0800ac1d 	.word	0x0800ac1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d107      	bne.n	800abe4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800abd4:	f107 030a 	add.w	r3, r7, #10
 800abd8:	2202      	movs	r2, #2
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 fd67 	bl	800c6b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800abe2:	e032      	b.n	800ac4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f001 fce5 	bl	800c5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800abec:	2303      	movs	r3, #3
 800abee:	75fb      	strb	r3, [r7, #23]
          break;
 800abf0:	e02b      	b.n	800ac4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	d107      	bne.n	800ac0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800abfe:	f107 030d 	add.w	r3, r7, #13
 800ac02:	2201      	movs	r2, #1
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 fd52 	bl	800c6b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac0c:	e01d      	b.n	800ac4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f001 fcd0 	bl	800c5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac16:	2303      	movs	r3, #3
 800ac18:	75fb      	strb	r3, [r7, #23]
          break;
 800ac1a:	e016      	b.n	800ac4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d00f      	beq.n	800ac48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f001 fcc3 	bl	800c5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac34:	e008      	b.n	800ac48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 fcbc 	bl	800c5b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	75fb      	strb	r3, [r7, #23]
          break;
 800ac42:	e002      	b.n	800ac4a <USBD_CDC_Setup+0x19e>
          break;
 800ac44:	bf00      	nop
 800ac46:	e008      	b.n	800ac5a <USBD_CDC_Setup+0x1ae>
          break;
 800ac48:	bf00      	nop
      }
      break;
 800ac4a:	e006      	b.n	800ac5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 fcb1 	bl	800c5b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	75fb      	strb	r3, [r7, #23]
      break;
 800ac58:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	32b0      	adds	r2, #176	@ 0xb0
 800ac82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e065      	b.n	800ad5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	32b0      	adds	r2, #176	@ 0xb0
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac9e:	78fb      	ldrb	r3, [r7, #3]
 800aca0:	f003 020f 	and.w	r2, r3, #15
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	3318      	adds	r3, #24
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d02f      	beq.n	800ad18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	f003 020f 	and.w	r2, r3, #15
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	440b      	add	r3, r1
 800acca:	3318      	adds	r3, #24
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	f003 010f 	and.w	r1, r3, #15
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	460b      	mov	r3, r1
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	440b      	add	r3, r1
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4403      	add	r3, r0
 800ace0:	331c      	adds	r3, #28
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ace8:	fb01 f303 	mul.w	r3, r1, r3
 800acec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d112      	bne.n	800ad18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	f003 020f 	and.w	r2, r3, #15
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	4613      	mov	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	4413      	add	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	3318      	adds	r3, #24
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad0a:	78f9      	ldrb	r1, [r7, #3]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2200      	movs	r2, #0
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f002 fa28 	bl	800d166 <USBD_LL_Transmit>
 800ad16:	e01f      	b.n	800ad58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	33b0      	adds	r3, #176	@ 0xb0
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d010      	beq.n	800ad58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	33b0      	adds	r3, #176	@ 0xb0
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ad54:	78fa      	ldrb	r2, [r7, #3]
 800ad56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	32b0      	adds	r2, #176	@ 0xb0
 800ad78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	32b0      	adds	r2, #176	@ 0xb0
 800ad88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e01a      	b.n	800adca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f002 fa26 	bl	800d1ea <USBD_LL_GetRxDataSize>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	33b0      	adds	r3, #176	@ 0xb0
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800adc4:	4611      	mov	r1, r2
 800adc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b084      	sub	sp, #16
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	32b0      	adds	r2, #176	@ 0xb0
 800ade4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e024      	b.n	800ae3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	33b0      	adds	r3, #176	@ 0xb0
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d019      	beq.n	800ae3c <USBD_CDC_EP0_RxReady+0x6a>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ae0e:	2bff      	cmp	r3, #255	@ 0xff
 800ae10:	d014      	beq.n	800ae3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	33b0      	adds	r3, #176	@ 0xb0
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	22ff      	movs	r2, #255	@ 0xff
 800ae38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae50:	2182      	movs	r1, #130	@ 0x82
 800ae52:	4818      	ldr	r0, [pc, #96]	@ (800aeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae54:	f000 fd4f 	bl	800b8f6 <USBD_GetEpDesc>
 800ae58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	4815      	ldr	r0, [pc, #84]	@ (800aeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae5e:	f000 fd4a 	bl	800b8f6 <USBD_GetEpDesc>
 800ae62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae64:	2181      	movs	r1, #129	@ 0x81
 800ae66:	4813      	ldr	r0, [pc, #76]	@ (800aeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae68:	f000 fd45 	bl	800b8f6 <USBD_GetEpDesc>
 800ae6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2210      	movs	r2, #16
 800ae78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d006      	beq.n	800ae8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae88:	711a      	strb	r2, [r3, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d006      	beq.n	800aea2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae9c:	711a      	strb	r2, [r3, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2243      	movs	r2, #67	@ 0x43
 800aea6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aea8:	4b02      	ldr	r3, [pc, #8]	@ (800aeb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000194 	.word	0x20000194

0800aeb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aec0:	2182      	movs	r1, #130	@ 0x82
 800aec2:	4818      	ldr	r0, [pc, #96]	@ (800af24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aec4:	f000 fd17 	bl	800b8f6 <USBD_GetEpDesc>
 800aec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aeca:	2101      	movs	r1, #1
 800aecc:	4815      	ldr	r0, [pc, #84]	@ (800af24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aece:	f000 fd12 	bl	800b8f6 <USBD_GetEpDesc>
 800aed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aed4:	2181      	movs	r1, #129	@ 0x81
 800aed6:	4813      	ldr	r0, [pc, #76]	@ (800af24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aed8:	f000 fd0d 	bl	800b8f6 <USBD_GetEpDesc>
 800aedc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2210      	movs	r2, #16
 800aee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d006      	beq.n	800aefe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2200      	movs	r2, #0
 800aef4:	711a      	strb	r2, [r3, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f042 0202 	orr.w	r2, r2, #2
 800aefc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d006      	beq.n	800af12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	711a      	strb	r2, [r3, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f042 0202 	orr.w	r2, r2, #2
 800af10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2243      	movs	r2, #67	@ 0x43
 800af16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af18:	4b02      	ldr	r3, [pc, #8]	@ (800af24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000194 	.word	0x20000194

0800af28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af30:	2182      	movs	r1, #130	@ 0x82
 800af32:	4818      	ldr	r0, [pc, #96]	@ (800af94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af34:	f000 fcdf 	bl	800b8f6 <USBD_GetEpDesc>
 800af38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af3a:	2101      	movs	r1, #1
 800af3c:	4815      	ldr	r0, [pc, #84]	@ (800af94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af3e:	f000 fcda 	bl	800b8f6 <USBD_GetEpDesc>
 800af42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af44:	2181      	movs	r1, #129	@ 0x81
 800af46:	4813      	ldr	r0, [pc, #76]	@ (800af94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af48:	f000 fcd5 	bl	800b8f6 <USBD_GetEpDesc>
 800af4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2210      	movs	r2, #16
 800af58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d006      	beq.n	800af6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2200      	movs	r2, #0
 800af64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af68:	711a      	strb	r2, [r3, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d006      	beq.n	800af82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af7c:	711a      	strb	r2, [r3, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2243      	movs	r2, #67	@ 0x43
 800af86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af88:	4b02      	ldr	r3, [pc, #8]	@ (800af94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20000194 	.word	0x20000194

0800af98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	220a      	movs	r2, #10
 800afa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800afa6:	4b03      	ldr	r3, [pc, #12]	@ (800afb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	20000150 	.word	0x20000150

0800afb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800afc8:	2303      	movs	r3, #3
 800afca:	e009      	b.n	800afe0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	33b0      	adds	r3, #176	@ 0xb0
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	32b0      	adds	r2, #176	@ 0xb0
 800b002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b006:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b00e:	2303      	movs	r3, #3
 800b010:	e008      	b.n	800b024 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	32b0      	adds	r2, #176	@ 0xb0
 800b044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b048:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b050:	2303      	movs	r3, #3
 800b052:	e004      	b.n	800b05e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
	...

0800b06c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	32b0      	adds	r2, #176	@ 0xb0
 800b07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b082:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b084:	2301      	movs	r3, #1
 800b086:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b08e:	2303      	movs	r3, #3
 800b090:	e025      	b.n	800b0de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d11f      	bne.n	800b0dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b0a4:	4b10      	ldr	r3, [pc, #64]	@ (800b0e8 <USBD_CDC_TransmitPacket+0x7c>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 020f 	and.w	r2, r3, #15
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4403      	add	r3, r0
 800b0be:	3318      	adds	r3, #24
 800b0c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b0c2:	4b09      	ldr	r3, [pc, #36]	@ (800b0e8 <USBD_CDC_TransmitPacket+0x7c>)
 800b0c4:	7819      	ldrb	r1, [r3, #0]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f002 f847 	bl	800d166 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200001d7 	.word	0x200001d7

0800b0ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32b0      	adds	r2, #176	@ 0xb0
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	32b0      	adds	r2, #176	@ 0xb0
 800b10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b116:	2303      	movs	r3, #3
 800b118:	e018      	b.n	800b14c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	7c1b      	ldrb	r3, [r3, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b122:	4b0c      	ldr	r3, [pc, #48]	@ (800b154 <USBD_CDC_ReceivePacket+0x68>)
 800b124:	7819      	ldrb	r1, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b12c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f002 f839 	bl	800d1a8 <USBD_LL_PrepareReceive>
 800b136:	e008      	b.n	800b14a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b138:	4b06      	ldr	r3, [pc, #24]	@ (800b154 <USBD_CDC_ReceivePacket+0x68>)
 800b13a:	7819      	ldrb	r1, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b142:	2340      	movs	r3, #64	@ 0x40
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f002 f82f 	bl	800d1a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	200001d8 	.word	0x200001d8

0800b158 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e01f      	b.n	800b1b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f001 fea9 	bl	800cefc <USBD_LL_Init>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e025      	b.n	800b21c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	32ae      	adds	r2, #174	@ 0xae
 800b1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00f      	beq.n	800b20c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	32ae      	adds	r2, #174	@ 0xae
 800b1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fc:	f107 020e 	add.w	r2, r7, #14
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
 800b204:	4602      	mov	r2, r0
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 feb1 	bl	800cf94 <USBD_LL_Start>
 800b232:	4603      	mov	r3, r0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b244:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b246:	4618      	mov	r0, r3
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d009      	beq.n	800b280 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	78fa      	ldrb	r2, [r7, #3]
 800b276:	4611      	mov	r1, r2
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
 800b27c:	4603      	mov	r3, r0
 800b27e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	460b      	mov	r3, r1
 800b294:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	4798      	blx	r3
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 f936 	bl	800c542 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b2f2:	f003 031f 	and.w	r3, r3, #31
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d01a      	beq.n	800b330 <USBD_LL_SetupStage+0x72>
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d822      	bhi.n	800b344 <USBD_LL_SetupStage+0x86>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <USBD_LL_SetupStage+0x4a>
 800b302:	2b01      	cmp	r3, #1
 800b304:	d00a      	beq.n	800b31c <USBD_LL_SetupStage+0x5e>
 800b306:	e01d      	b.n	800b344 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fb63 	bl	800b9dc <USBD_StdDevReq>
 800b316:	4603      	mov	r3, r0
 800b318:	73fb      	strb	r3, [r7, #15]
      break;
 800b31a:	e020      	b.n	800b35e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b322:	4619      	mov	r1, r3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 fbcb 	bl	800bac0 <USBD_StdItfReq>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73fb      	strb	r3, [r7, #15]
      break;
 800b32e:	e016      	b.n	800b35e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fc2d 	bl	800bb98 <USBD_StdEPReq>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]
      break;
 800b342:	e00c      	b.n	800b35e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b34a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f001 fe7e 	bl	800d054 <USBD_LL_StallEP>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
      break;
 800b35c:	bf00      	nop
  }

  return ret;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b086      	sub	sp, #24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	460b      	mov	r3, r1
 800b372:	607a      	str	r2, [r7, #4]
 800b374:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b37a:	7afb      	ldrb	r3, [r7, #11]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d16e      	bne.n	800b45e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b386:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b38e:	2b03      	cmp	r3, #3
 800b390:	f040 8098 	bne.w	800b4c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d913      	bls.n	800b3c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	1ad2      	subs	r2, r2, r3
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	bf28      	it	cs
 800b3ba:	4613      	movcs	r3, r2
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f001 f9be 	bl	800c742 <USBD_CtlContinueRx>
 800b3c6:	e07d      	b.n	800b4c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3ce:	f003 031f 	and.w	r3, r3, #31
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d014      	beq.n	800b400 <USBD_LL_DataOutStage+0x98>
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d81d      	bhi.n	800b416 <USBD_LL_DataOutStage+0xae>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <USBD_LL_DataOutStage+0x7c>
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d003      	beq.n	800b3ea <USBD_LL_DataOutStage+0x82>
 800b3e2:	e018      	b.n	800b416 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b3e8:	e018      	b.n	800b41c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 fa64 	bl	800b8c2 <USBD_CoreFindIF>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b3fe:	e00d      	b.n	800b41c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b406:	b2db      	uxtb	r3, r3
 800b408:	4619      	mov	r1, r3
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f000 fa66 	bl	800b8dc <USBD_CoreFindEP>
 800b410:	4603      	mov	r3, r0
 800b412:	75bb      	strb	r3, [r7, #22]
            break;
 800b414:	e002      	b.n	800b41c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	75bb      	strb	r3, [r7, #22]
            break;
 800b41a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b41c:	7dbb      	ldrb	r3, [r7, #22]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d119      	bne.n	800b456 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d113      	bne.n	800b456 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b42e:	7dba      	ldrb	r2, [r7, #22]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	32ae      	adds	r2, #174	@ 0xae
 800b434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b43e:	7dba      	ldrb	r2, [r7, #22]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b446:	7dba      	ldrb	r2, [r7, #22]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	32ae      	adds	r2, #174	@ 0xae
 800b44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f001 f984 	bl	800c764 <USBD_CtlSendStatus>
 800b45c:	e032      	b.n	800b4c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b45e:	7afb      	ldrb	r3, [r7, #11]
 800b460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b464:	b2db      	uxtb	r3, r3
 800b466:	4619      	mov	r1, r3
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fa37 	bl	800b8dc <USBD_CoreFindEP>
 800b46e:	4603      	mov	r3, r0
 800b470:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b472:	7dbb      	ldrb	r3, [r7, #22]
 800b474:	2bff      	cmp	r3, #255	@ 0xff
 800b476:	d025      	beq.n	800b4c4 <USBD_LL_DataOutStage+0x15c>
 800b478:	7dbb      	ldrb	r3, [r7, #22]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d122      	bne.n	800b4c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b03      	cmp	r3, #3
 800b488:	d117      	bne.n	800b4ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b48a:	7dba      	ldrb	r2, [r7, #22]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	32ae      	adds	r2, #174	@ 0xae
 800b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00f      	beq.n	800b4ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b49a:	7dba      	ldrb	r2, [r7, #22]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b4a2:	7dba      	ldrb	r2, [r7, #22]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	32ae      	adds	r2, #174	@ 0xae
 800b4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	7afa      	ldrb	r2, [r7, #11]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	4798      	blx	r3
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
 800b4c2:	e000      	b.n	800b4c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b086      	sub	sp, #24
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	607a      	str	r2, [r7, #4]
 800b4da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d16f      	bne.n	800b5c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3314      	adds	r3, #20
 800b4e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d15a      	bne.n	800b5a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	689a      	ldr	r2, [r3, #8]
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d914      	bls.n	800b528 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	1ad2      	subs	r2, r2, r3
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	461a      	mov	r2, r3
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f001 f8e6 	bl	800c6e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b51a:	2300      	movs	r3, #0
 800b51c:	2200      	movs	r2, #0
 800b51e:	2100      	movs	r1, #0
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f001 fe41 	bl	800d1a8 <USBD_LL_PrepareReceive>
 800b526:	e03f      	b.n	800b5a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	68da      	ldr	r2, [r3, #12]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	429a      	cmp	r2, r3
 800b532:	d11c      	bne.n	800b56e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	685a      	ldr	r2, [r3, #4]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d316      	bcc.n	800b56e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d20f      	bcs.n	800b56e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b54e:	2200      	movs	r2, #0
 800b550:	2100      	movs	r1, #0
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f001 f8c7 	bl	800c6e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b560:	2300      	movs	r3, #0
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f001 fe1e 	bl	800d1a8 <USBD_LL_PrepareReceive>
 800b56c:	e01c      	b.n	800b5a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b03      	cmp	r3, #3
 800b578:	d10f      	bne.n	800b59a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d009      	beq.n	800b59a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b59a:	2180      	movs	r1, #128	@ 0x80
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f001 fd59 	bl	800d054 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f001 f8f1 	bl	800c78a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d03a      	beq.n	800b628 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fe42 	bl	800b23c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b5c0:	e032      	b.n	800b628 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 f985 	bl	800b8dc <USBD_CoreFindEP>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5d6:	7dfb      	ldrb	r3, [r7, #23]
 800b5d8:	2bff      	cmp	r3, #255	@ 0xff
 800b5da:	d025      	beq.n	800b628 <USBD_LL_DataInStage+0x15a>
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d122      	bne.n	800b628 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d11c      	bne.n	800b628 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b5ee:	7dfa      	ldrb	r2, [r7, #23]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	32ae      	adds	r2, #174	@ 0xae
 800b5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d014      	beq.n	800b628 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b5fe:	7dfa      	ldrb	r2, [r7, #23]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b606:	7dfa      	ldrb	r2, [r7, #23]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	32ae      	adds	r2, #174	@ 0xae
 800b60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	7afa      	ldrb	r2, [r7, #11]
 800b614:	4611      	mov	r1, r2
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	4798      	blx	r3
 800b61a:	4603      	mov	r3, r0
 800b61c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b61e:	7dbb      	ldrb	r3, [r7, #22]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b624:	7dbb      	ldrb	r3, [r7, #22]
 800b626:	e000      	b.n	800b62a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d014      	beq.n	800b698 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00e      	beq.n	800b698 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	6852      	ldr	r2, [r2, #4]
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	4611      	mov	r1, r2
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b694:	2303      	movs	r3, #3
 800b696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b698:	2340      	movs	r3, #64	@ 0x40
 800b69a:	2200      	movs	r2, #0
 800b69c:	2100      	movs	r1, #0
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f001 fc93 	bl	800cfca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2240      	movs	r2, #64	@ 0x40
 800b6b0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6b4:	2340      	movs	r3, #64	@ 0x40
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2180      	movs	r1, #128	@ 0x80
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f001 fc85 	bl	800cfca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2240      	movs	r2, #64	@ 0x40
 800b6ca:	621a      	str	r2, [r3, #32]

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b04      	cmp	r3, #4
 800b708:	d006      	beq.n	800b718 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b710:	b2da      	uxtb	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2204      	movs	r2, #4
 800b71c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d106      	bne.n	800b750 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d110      	bne.n	800b794 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00b      	beq.n	800b794 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d005      	beq.n	800b794 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b78e:	69db      	ldr	r3, [r3, #28]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	32ae      	adds	r2, #174	@ 0xae
 800b7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e01c      	b.n	800b7fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d115      	bne.n	800b7f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	32ae      	adds	r2, #174	@ 0xae
 800b7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00b      	beq.n	800b7f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	32ae      	adds	r2, #174	@ 0xae
 800b7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	78fa      	ldrb	r2, [r7, #3]
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	32ae      	adds	r2, #174	@ 0xae
 800b818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b820:	2303      	movs	r3, #3
 800b822:	e01c      	b.n	800b85e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d115      	bne.n	800b85c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	32ae      	adds	r2, #174	@ 0xae
 800b83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00b      	beq.n	800b85c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	32ae      	adds	r2, #174	@ 0xae
 800b84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	4611      	mov	r1, r2
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00e      	beq.n	800b8b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6852      	ldr	r2, [r2, #4]
 800b8a6:	b2d2      	uxtb	r2, r2
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b083      	sub	sp, #12
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b8ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b8e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b086      	sub	sp, #24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	460b      	mov	r3, r1
 800b900:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	b29b      	uxth	r3, r3
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	7812      	ldrb	r2, [r2, #0]
 800b918:	4293      	cmp	r3, r2
 800b91a:	d91f      	bls.n	800b95c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b922:	e013      	b.n	800b94c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b924:	f107 030a 	add.w	r3, r7, #10
 800b928:	4619      	mov	r1, r3
 800b92a:	6978      	ldr	r0, [r7, #20]
 800b92c:	f000 f81b 	bl	800b966 <USBD_GetNextDesc>
 800b930:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	2b05      	cmp	r3, #5
 800b938:	d108      	bne.n	800b94c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	789b      	ldrb	r3, [r3, #2]
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	429a      	cmp	r2, r3
 800b946:	d008      	beq.n	800b95a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b948:	2300      	movs	r3, #0
 800b94a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	885b      	ldrh	r3, [r3, #2]
 800b950:	b29a      	uxth	r2, r3
 800b952:	897b      	ldrh	r3, [r7, #10]
 800b954:	429a      	cmp	r2, r3
 800b956:	d8e5      	bhi.n	800b924 <USBD_GetEpDesc+0x2e>
 800b958:	e000      	b.n	800b95c <USBD_GetEpDesc+0x66>
          break;
 800b95a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b95c:	693b      	ldr	r3, [r7, #16]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3718      	adds	r7, #24
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b966:	b480      	push	{r7}
 800b968:	b085      	sub	sp, #20
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	7812      	ldrb	r2, [r2, #0]
 800b97c:	4413      	add	r3, r2
 800b97e:	b29a      	uxth	r2, r3
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4413      	add	r3, r2
 800b98e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b990:	68fb      	ldr	r3, [r7, #12]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b087      	sub	sp, #28
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b9bc:	8a3b      	ldrh	r3, [r7, #16]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	b21a      	sxth	r2, r3
 800b9c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	b21b      	sxth	r3, r3
 800b9ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
	...

0800b9dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9f2:	2b40      	cmp	r3, #64	@ 0x40
 800b9f4:	d005      	beq.n	800ba02 <USBD_StdDevReq+0x26>
 800b9f6:	2b40      	cmp	r3, #64	@ 0x40
 800b9f8:	d857      	bhi.n	800baaa <USBD_StdDevReq+0xce>
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00f      	beq.n	800ba1e <USBD_StdDevReq+0x42>
 800b9fe:	2b20      	cmp	r3, #32
 800ba00:	d153      	bne.n	800baaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	32ae      	adds	r2, #174	@ 0xae
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	4798      	blx	r3
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1c:	e04a      	b.n	800bab4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	785b      	ldrb	r3, [r3, #1]
 800ba22:	2b09      	cmp	r3, #9
 800ba24:	d83b      	bhi.n	800ba9e <USBD_StdDevReq+0xc2>
 800ba26:	a201      	add	r2, pc, #4	@ (adr r2, 800ba2c <USBD_StdDevReq+0x50>)
 800ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2c:	0800ba81 	.word	0x0800ba81
 800ba30:	0800ba95 	.word	0x0800ba95
 800ba34:	0800ba9f 	.word	0x0800ba9f
 800ba38:	0800ba8b 	.word	0x0800ba8b
 800ba3c:	0800ba9f 	.word	0x0800ba9f
 800ba40:	0800ba5f 	.word	0x0800ba5f
 800ba44:	0800ba55 	.word	0x0800ba55
 800ba48:	0800ba9f 	.word	0x0800ba9f
 800ba4c:	0800ba77 	.word	0x0800ba77
 800ba50:	0800ba69 	.word	0x0800ba69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fa3c 	bl	800bed4 <USBD_GetDescriptor>
          break;
 800ba5c:	e024      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fbcb 	bl	800c1fc <USBD_SetAddress>
          break;
 800ba66:	e01f      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fc0a 	bl	800c284 <USBD_SetConfig>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
          break;
 800ba74:	e018      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fcad 	bl	800c3d8 <USBD_GetConfig>
          break;
 800ba7e:	e013      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fcde 	bl	800c444 <USBD_GetStatus>
          break;
 800ba88:	e00e      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fd0d 	bl	800c4ac <USBD_SetFeature>
          break;
 800ba92:	e009      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fd31 	bl	800c4fe <USBD_ClrFeature>
          break;
 800ba9c:	e004      	b.n	800baa8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fd88 	bl	800c5b6 <USBD_CtlError>
          break;
 800baa6:	bf00      	nop
      }
      break;
 800baa8:	e004      	b.n	800bab4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fd82 	bl	800c5b6 <USBD_CtlError>
      break;
 800bab2:	bf00      	nop
  }

  return ret;
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop

0800bac0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bad6:	2b40      	cmp	r3, #64	@ 0x40
 800bad8:	d005      	beq.n	800bae6 <USBD_StdItfReq+0x26>
 800bada:	2b40      	cmp	r3, #64	@ 0x40
 800badc:	d852      	bhi.n	800bb84 <USBD_StdItfReq+0xc4>
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <USBD_StdItfReq+0x26>
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	d14e      	bne.n	800bb84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baec:	b2db      	uxtb	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d840      	bhi.n	800bb76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	889b      	ldrh	r3, [r3, #4]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d836      	bhi.n	800bb6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	889b      	ldrh	r3, [r3, #4]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff fedb 	bl	800b8c2 <USBD_CoreFindIF>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb10:	7bbb      	ldrb	r3, [r7, #14]
 800bb12:	2bff      	cmp	r3, #255	@ 0xff
 800bb14:	d01d      	beq.n	800bb52 <USBD_StdItfReq+0x92>
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d11a      	bne.n	800bb52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb1c:	7bba      	ldrb	r2, [r7, #14]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	32ae      	adds	r2, #174	@ 0xae
 800bb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00f      	beq.n	800bb4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bb2c:	7bba      	ldrb	r2, [r7, #14]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb34:	7bba      	ldrb	r2, [r7, #14]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	32ae      	adds	r2, #174	@ 0xae
 800bb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	4798      	blx	r3
 800bb46:	4603      	mov	r3, r0
 800bb48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb4a:	e004      	b.n	800bb56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb50:	e001      	b.n	800bb56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bb52:	2303      	movs	r3, #3
 800bb54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	88db      	ldrh	r3, [r3, #6]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d110      	bne.n	800bb80 <USBD_StdItfReq+0xc0>
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10d      	bne.n	800bb80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fdfd 	bl	800c764 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb6a:	e009      	b.n	800bb80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fd21 	bl	800c5b6 <USBD_CtlError>
          break;
 800bb74:	e004      	b.n	800bb80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fd1c 	bl	800c5b6 <USBD_CtlError>
          break;
 800bb7e:	e000      	b.n	800bb82 <USBD_StdItfReq+0xc2>
          break;
 800bb80:	bf00      	nop
      }
      break;
 800bb82:	e004      	b.n	800bb8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fd15 	bl	800c5b6 <USBD_CtlError>
      break;
 800bb8c:	bf00      	nop
  }

  return ret;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	889b      	ldrh	r3, [r3, #4]
 800bbaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbb4:	2b40      	cmp	r3, #64	@ 0x40
 800bbb6:	d007      	beq.n	800bbc8 <USBD_StdEPReq+0x30>
 800bbb8:	2b40      	cmp	r3, #64	@ 0x40
 800bbba:	f200 817f 	bhi.w	800bebc <USBD_StdEPReq+0x324>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d02a      	beq.n	800bc18 <USBD_StdEPReq+0x80>
 800bbc2:	2b20      	cmp	r3, #32
 800bbc4:	f040 817a 	bne.w	800bebc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff fe85 	bl	800b8dc <USBD_CoreFindEP>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbd6:	7b7b      	ldrb	r3, [r7, #13]
 800bbd8:	2bff      	cmp	r3, #255	@ 0xff
 800bbda:	f000 8174 	beq.w	800bec6 <USBD_StdEPReq+0x32e>
 800bbde:	7b7b      	ldrb	r3, [r7, #13]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f040 8170 	bne.w	800bec6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bbe6:	7b7a      	ldrb	r2, [r7, #13]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bbee:	7b7a      	ldrb	r2, [r7, #13]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	32ae      	adds	r2, #174	@ 0xae
 800bbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 8163 	beq.w	800bec6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc00:	7b7a      	ldrb	r2, [r7, #13]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	32ae      	adds	r2, #174	@ 0xae
 800bc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	4798      	blx	r3
 800bc12:	4603      	mov	r3, r0
 800bc14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc16:	e156      	b.n	800bec6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	785b      	ldrb	r3, [r3, #1]
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d008      	beq.n	800bc32 <USBD_StdEPReq+0x9a>
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	f300 8145 	bgt.w	800beb0 <USBD_StdEPReq+0x318>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f000 809b 	beq.w	800bd62 <USBD_StdEPReq+0x1ca>
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d03c      	beq.n	800bcaa <USBD_StdEPReq+0x112>
 800bc30:	e13e      	b.n	800beb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d002      	beq.n	800bc44 <USBD_StdEPReq+0xac>
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d016      	beq.n	800bc70 <USBD_StdEPReq+0xd8>
 800bc42:	e02c      	b.n	800bc9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00d      	beq.n	800bc66 <USBD_StdEPReq+0xce>
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	2b80      	cmp	r3, #128	@ 0x80
 800bc4e:	d00a      	beq.n	800bc66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 f9fd 	bl	800d054 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc5a:	2180      	movs	r1, #128	@ 0x80
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 f9f9 	bl	800d054 <USBD_LL_StallEP>
 800bc62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc64:	e020      	b.n	800bca8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fca4 	bl	800c5b6 <USBD_CtlError>
              break;
 800bc6e:	e01b      	b.n	800bca8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	885b      	ldrh	r3, [r3, #2]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10e      	bne.n	800bc96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00b      	beq.n	800bc96 <USBD_StdEPReq+0xfe>
 800bc7e:	7bbb      	ldrb	r3, [r7, #14]
 800bc80:	2b80      	cmp	r3, #128	@ 0x80
 800bc82:	d008      	beq.n	800bc96 <USBD_StdEPReq+0xfe>
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	88db      	ldrh	r3, [r3, #6]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d104      	bne.n	800bc96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f9df 	bl	800d054 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fd64 	bl	800c764 <USBD_CtlSendStatus>

              break;
 800bc9c:	e004      	b.n	800bca8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fc88 	bl	800c5b6 <USBD_CtlError>
              break;
 800bca6:	bf00      	nop
          }
          break;
 800bca8:	e107      	b.n	800beba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d002      	beq.n	800bcbc <USBD_StdEPReq+0x124>
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d016      	beq.n	800bce8 <USBD_StdEPReq+0x150>
 800bcba:	e04b      	b.n	800bd54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00d      	beq.n	800bcde <USBD_StdEPReq+0x146>
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	2b80      	cmp	r3, #128	@ 0x80
 800bcc6:	d00a      	beq.n	800bcde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f001 f9c1 	bl	800d054 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcd2:	2180      	movs	r1, #128	@ 0x80
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 f9bd 	bl	800d054 <USBD_LL_StallEP>
 800bcda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcdc:	e040      	b.n	800bd60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fc68 	bl	800c5b6 <USBD_CtlError>
              break;
 800bce6:	e03b      	b.n	800bd60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	885b      	ldrh	r3, [r3, #2]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d136      	bne.n	800bd5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcfa:	7bbb      	ldrb	r3, [r7, #14]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 f9c7 	bl	800d092 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fd2d 	bl	800c764 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd0a:	7bbb      	ldrb	r3, [r7, #14]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff fde4 	bl	800b8dc <USBD_CoreFindEP>
 800bd14:	4603      	mov	r3, r0
 800bd16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd18:	7b7b      	ldrb	r3, [r7, #13]
 800bd1a:	2bff      	cmp	r3, #255	@ 0xff
 800bd1c:	d01f      	beq.n	800bd5e <USBD_StdEPReq+0x1c6>
 800bd1e:	7b7b      	ldrb	r3, [r7, #13]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d11c      	bne.n	800bd5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bd24:	7b7a      	ldrb	r2, [r7, #13]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bd2c:	7b7a      	ldrb	r2, [r7, #13]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	32ae      	adds	r2, #174	@ 0xae
 800bd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d010      	beq.n	800bd5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd3c:	7b7a      	ldrb	r2, [r7, #13]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	32ae      	adds	r2, #174	@ 0xae
 800bd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	4798      	blx	r3
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bd52:	e004      	b.n	800bd5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fc2d 	bl	800c5b6 <USBD_CtlError>
              break;
 800bd5c:	e000      	b.n	800bd60 <USBD_StdEPReq+0x1c8>
              break;
 800bd5e:	bf00      	nop
          }
          break;
 800bd60:	e0ab      	b.n	800beba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d002      	beq.n	800bd74 <USBD_StdEPReq+0x1dc>
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d032      	beq.n	800bdd8 <USBD_StdEPReq+0x240>
 800bd72:	e097      	b.n	800bea4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d007      	beq.n	800bd8a <USBD_StdEPReq+0x1f2>
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
 800bd7c:	2b80      	cmp	r3, #128	@ 0x80
 800bd7e:	d004      	beq.n	800bd8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fc17 	bl	800c5b6 <USBD_CtlError>
                break;
 800bd88:	e091      	b.n	800beae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da0b      	bge.n	800bdaa <USBD_StdEPReq+0x212>
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd98:	4613      	mov	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	3310      	adds	r3, #16
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	4413      	add	r3, r2
 800bda6:	3304      	adds	r3, #4
 800bda8:	e00b      	b.n	800bdc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdaa:	7bbb      	ldrb	r3, [r7, #14]
 800bdac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fc6d 	bl	800c6b0 <USBD_CtlSendData>
              break;
 800bdd6:	e06a      	b.n	800beae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bdd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	da11      	bge.n	800be04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3324      	adds	r3, #36	@ 0x24
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d117      	bne.n	800be2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fbda 	bl	800c5b6 <USBD_CtlError>
                  break;
 800be02:	e054      	b.n	800beae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	f003 020f 	and.w	r2, r3, #15
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d104      	bne.n	800be2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fbc7 	bl	800c5b6 <USBD_CtlError>
                  break;
 800be28:	e041      	b.n	800beae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da0b      	bge.n	800be4a <USBD_StdEPReq+0x2b2>
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	3310      	adds	r3, #16
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	4413      	add	r3, r2
 800be46:	3304      	adds	r3, #4
 800be48:	e00b      	b.n	800be62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be4a:	7bbb      	ldrb	r3, [r7, #14]
 800be4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	4413      	add	r3, r2
 800be60:	3304      	adds	r3, #4
 800be62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <USBD_StdEPReq+0x2d8>
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	2b80      	cmp	r3, #128	@ 0x80
 800be6e:	d103      	bne.n	800be78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
 800be76:	e00e      	b.n	800be96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 f927 	bl	800d0d0 <USBD_LL_IsStallEP>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d003      	beq.n	800be90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2201      	movs	r2, #1
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	e002      	b.n	800be96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2202      	movs	r2, #2
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fc07 	bl	800c6b0 <USBD_CtlSendData>
              break;
 800bea2:	e004      	b.n	800beae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fb85 	bl	800c5b6 <USBD_CtlError>
              break;
 800beac:	bf00      	nop
          }
          break;
 800beae:	e004      	b.n	800beba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fb7f 	bl	800c5b6 <USBD_CtlError>
          break;
 800beb8:	bf00      	nop
      }
      break;
 800beba:	e005      	b.n	800bec8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fb79 	bl	800c5b6 <USBD_CtlError>
      break;
 800bec4:	e000      	b.n	800bec8 <USBD_StdEPReq+0x330>
      break;
 800bec6:	bf00      	nop
  }

  return ret;
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
	...

0800bed4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bede:	2300      	movs	r3, #0
 800bee0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	885b      	ldrh	r3, [r3, #2]
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b01      	subs	r3, #1
 800bef4:	2b0e      	cmp	r3, #14
 800bef6:	f200 8152 	bhi.w	800c19e <USBD_GetDescriptor+0x2ca>
 800befa:	a201      	add	r2, pc, #4	@ (adr r2, 800bf00 <USBD_GetDescriptor+0x2c>)
 800befc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf00:	0800bf71 	.word	0x0800bf71
 800bf04:	0800bf89 	.word	0x0800bf89
 800bf08:	0800bfc9 	.word	0x0800bfc9
 800bf0c:	0800c19f 	.word	0x0800c19f
 800bf10:	0800c19f 	.word	0x0800c19f
 800bf14:	0800c13f 	.word	0x0800c13f
 800bf18:	0800c16b 	.word	0x0800c16b
 800bf1c:	0800c19f 	.word	0x0800c19f
 800bf20:	0800c19f 	.word	0x0800c19f
 800bf24:	0800c19f 	.word	0x0800c19f
 800bf28:	0800c19f 	.word	0x0800c19f
 800bf2c:	0800c19f 	.word	0x0800c19f
 800bf30:	0800c19f 	.word	0x0800c19f
 800bf34:	0800c19f 	.word	0x0800c19f
 800bf38:	0800bf3d 	.word	0x0800bf3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf42:	69db      	ldr	r3, [r3, #28]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00b      	beq.n	800bf60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf4e:	69db      	ldr	r3, [r3, #28]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	7c12      	ldrb	r2, [r2, #16]
 800bf54:	f107 0108 	add.w	r1, r7, #8
 800bf58:	4610      	mov	r0, r2
 800bf5a:	4798      	blx	r3
 800bf5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf5e:	e126      	b.n	800c1ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fb27 	bl	800c5b6 <USBD_CtlError>
        err++;
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	72fb      	strb	r3, [r7, #11]
      break;
 800bf6e:	e11e      	b.n	800c1ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	7c12      	ldrb	r2, [r2, #16]
 800bf7c:	f107 0108 	add.w	r1, r7, #8
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	60f8      	str	r0, [r7, #12]
      break;
 800bf86:	e112      	b.n	800c1ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	7c1b      	ldrb	r3, [r3, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10d      	bne.n	800bfac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf98:	f107 0208 	add.w	r2, r7, #8
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
 800bfa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bfaa:	e100      	b.n	800c1ae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb4:	f107 0208 	add.w	r2, r7, #8
 800bfb8:	4610      	mov	r0, r2
 800bfba:	4798      	blx	r3
 800bfbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	701a      	strb	r2, [r3, #0]
      break;
 800bfc6:	e0f2      	b.n	800c1ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	885b      	ldrh	r3, [r3, #2]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b05      	cmp	r3, #5
 800bfd0:	f200 80ac 	bhi.w	800c12c <USBD_GetDescriptor+0x258>
 800bfd4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfdc <USBD_GetDescriptor+0x108>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800bff5 	.word	0x0800bff5
 800bfe0:	0800c029 	.word	0x0800c029
 800bfe4:	0800c05d 	.word	0x0800c05d
 800bfe8:	0800c091 	.word	0x0800c091
 800bfec:	0800c0c5 	.word	0x0800c0c5
 800bff0:	0800c0f9 	.word	0x0800c0f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00b      	beq.n	800c018 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	7c12      	ldrb	r2, [r2, #16]
 800c00c:	f107 0108 	add.w	r1, r7, #8
 800c010:	4610      	mov	r0, r2
 800c012:	4798      	blx	r3
 800c014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c016:	e091      	b.n	800c13c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 facb 	bl	800c5b6 <USBD_CtlError>
            err++;
 800c020:	7afb      	ldrb	r3, [r7, #11]
 800c022:	3301      	adds	r3, #1
 800c024:	72fb      	strb	r3, [r7, #11]
          break;
 800c026:	e089      	b.n	800c13c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00b      	beq.n	800c04c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	7c12      	ldrb	r2, [r2, #16]
 800c040:	f107 0108 	add.w	r1, r7, #8
 800c044:	4610      	mov	r0, r2
 800c046:	4798      	blx	r3
 800c048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c04a:	e077      	b.n	800c13c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 fab1 	bl	800c5b6 <USBD_CtlError>
            err++;
 800c054:	7afb      	ldrb	r3, [r7, #11]
 800c056:	3301      	adds	r3, #1
 800c058:	72fb      	strb	r3, [r7, #11]
          break;
 800c05a:	e06f      	b.n	800c13c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00b      	beq.n	800c080 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	7c12      	ldrb	r2, [r2, #16]
 800c074:	f107 0108 	add.w	r1, r7, #8
 800c078:	4610      	mov	r0, r2
 800c07a:	4798      	blx	r3
 800c07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c07e:	e05d      	b.n	800c13c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c080:	6839      	ldr	r1, [r7, #0]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fa97 	bl	800c5b6 <USBD_CtlError>
            err++;
 800c088:	7afb      	ldrb	r3, [r7, #11]
 800c08a:	3301      	adds	r3, #1
 800c08c:	72fb      	strb	r3, [r7, #11]
          break;
 800c08e:	e055      	b.n	800c13c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00b      	beq.n	800c0b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	7c12      	ldrb	r2, [r2, #16]
 800c0a8:	f107 0108 	add.w	r1, r7, #8
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	4798      	blx	r3
 800c0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0b2:	e043      	b.n	800c13c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa7d 	bl	800c5b6 <USBD_CtlError>
            err++;
 800c0bc:	7afb      	ldrb	r3, [r7, #11]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0c2:	e03b      	b.n	800c13c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00b      	beq.n	800c0e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	7c12      	ldrb	r2, [r2, #16]
 800c0dc:	f107 0108 	add.w	r1, r7, #8
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	4798      	blx	r3
 800c0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0e6:	e029      	b.n	800c13c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fa63 	bl	800c5b6 <USBD_CtlError>
            err++;
 800c0f0:	7afb      	ldrb	r3, [r7, #11]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0f6:	e021      	b.n	800c13c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	7c12      	ldrb	r2, [r2, #16]
 800c110:	f107 0108 	add.w	r1, r7, #8
 800c114:	4610      	mov	r0, r2
 800c116:	4798      	blx	r3
 800c118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c11a:	e00f      	b.n	800c13c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fa49 	bl	800c5b6 <USBD_CtlError>
            err++;
 800c124:	7afb      	ldrb	r3, [r7, #11]
 800c126:	3301      	adds	r3, #1
 800c128:	72fb      	strb	r3, [r7, #11]
          break;
 800c12a:	e007      	b.n	800c13c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fa41 	bl	800c5b6 <USBD_CtlError>
          err++;
 800c134:	7afb      	ldrb	r3, [r7, #11]
 800c136:	3301      	adds	r3, #1
 800c138:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c13a:	bf00      	nop
      }
      break;
 800c13c:	e037      	b.n	800c1ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7c1b      	ldrb	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14e:	f107 0208 	add.w	r2, r7, #8
 800c152:	4610      	mov	r0, r2
 800c154:	4798      	blx	r3
 800c156:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c158:	e029      	b.n	800c1ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fa2a 	bl	800c5b6 <USBD_CtlError>
        err++;
 800c162:	7afb      	ldrb	r3, [r7, #11]
 800c164:	3301      	adds	r3, #1
 800c166:	72fb      	strb	r3, [r7, #11]
      break;
 800c168:	e021      	b.n	800c1ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7c1b      	ldrb	r3, [r3, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10d      	bne.n	800c18e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c17a:	f107 0208 	add.w	r2, r7, #8
 800c17e:	4610      	mov	r0, r2
 800c180:	4798      	blx	r3
 800c182:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	3301      	adds	r3, #1
 800c188:	2207      	movs	r2, #7
 800c18a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c18c:	e00f      	b.n	800c1ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fa10 	bl	800c5b6 <USBD_CtlError>
        err++;
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	3301      	adds	r3, #1
 800c19a:	72fb      	strb	r3, [r7, #11]
      break;
 800c19c:	e007      	b.n	800c1ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fa08 	bl	800c5b6 <USBD_CtlError>
      err++;
 800c1a6:	7afb      	ldrb	r3, [r7, #11]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c1ac:	bf00      	nop
  }

  if (err != 0U)
 800c1ae:	7afb      	ldrb	r3, [r7, #11]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d11e      	bne.n	800c1f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	88db      	ldrh	r3, [r3, #6]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d016      	beq.n	800c1ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c1bc:	893b      	ldrh	r3, [r7, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00e      	beq.n	800c1e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	88da      	ldrh	r2, [r3, #6]
 800c1c6:	893b      	ldrh	r3, [r7, #8]
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	bf28      	it	cs
 800c1cc:	4613      	movcs	r3, r2
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1d2:	893b      	ldrh	r3, [r7, #8]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68f9      	ldr	r1, [r7, #12]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fa69 	bl	800c6b0 <USBD_CtlSendData>
 800c1de:	e009      	b.n	800c1f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f9e7 	bl	800c5b6 <USBD_CtlError>
 800c1e8:	e004      	b.n	800c1f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 faba 	bl	800c764 <USBD_CtlSendStatus>
 800c1f0:	e000      	b.n	800c1f4 <USBD_GetDescriptor+0x320>
    return;
 800c1f2:	bf00      	nop
  }
}
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop

0800c1fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	889b      	ldrh	r3, [r3, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d131      	bne.n	800c272 <USBD_SetAddress+0x76>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	88db      	ldrh	r3, [r3, #6]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d12d      	bne.n	800c272 <USBD_SetAddress+0x76>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	885b      	ldrh	r3, [r3, #2]
 800c21a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c21c:	d829      	bhi.n	800c272 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	885b      	ldrh	r3, [r3, #2]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c228:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b03      	cmp	r3, #3
 800c234:	d104      	bne.n	800c240 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f9bc 	bl	800c5b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23e:	e01d      	b.n	800c27c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7bfa      	ldrb	r2, [r7, #15]
 800c244:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 ff6b 	bl	800d128 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa86 	bl	800c764 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c258:	7bfb      	ldrb	r3, [r7, #15]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2202      	movs	r2, #2
 800c262:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c266:	e009      	b.n	800c27c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c270:	e004      	b.n	800c27c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f99e 	bl	800c5b6 <USBD_CtlError>
  }
}
 800c27a:	bf00      	nop
 800c27c:	bf00      	nop
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	885b      	ldrh	r3, [r3, #2]
 800c296:	b2da      	uxtb	r2, r3
 800c298:	4b4e      	ldr	r3, [pc, #312]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c29a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c29c:	4b4d      	ldr	r3, [pc, #308]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d905      	bls.n	800c2b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f985 	bl	800c5b6 <USBD_CtlError>
    return USBD_FAIL;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e08c      	b.n	800c3ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d002      	beq.n	800c2c2 <USBD_SetConfig+0x3e>
 800c2bc:	2b03      	cmp	r3, #3
 800c2be:	d029      	beq.n	800c314 <USBD_SetConfig+0x90>
 800c2c0:	e075      	b.n	800c3ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2c2:	4b44      	ldr	r3, [pc, #272]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d020      	beq.n	800c30c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c2ca:	4b42      	ldr	r3, [pc, #264]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2d4:	4b3f      	ldr	r3, [pc, #252]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7fe ffb9 	bl	800b252 <USBD_SetClassConfig>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d008      	beq.n	800c2fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c2ea:	6839      	ldr	r1, [r7, #0]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f962 	bl	800c5b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2202      	movs	r2, #2
 800c2f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2fa:	e065      	b.n	800c3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fa31 	bl	800c764 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2203      	movs	r2, #3
 800c306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c30a:	e05d      	b.n	800c3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fa29 	bl	800c764 <USBD_CtlSendStatus>
      break;
 800c312:	e059      	b.n	800c3c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c314:	4b2f      	ldr	r3, [pc, #188]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d112      	bne.n	800c342 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2202      	movs	r2, #2
 800c320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c324:	4b2b      	ldr	r3, [pc, #172]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	461a      	mov	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c32e:	4b29      	ldr	r3, [pc, #164]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7fe ffa8 	bl	800b28a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fa12 	bl	800c764 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c340:	e042      	b.n	800c3c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c342:	4b24      	ldr	r3, [pc, #144]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d02a      	beq.n	800c3a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7fe ff96 	bl	800b28a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c35e:	4b1d      	ldr	r3, [pc, #116]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c368:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7fe ff6f 	bl	800b252 <USBD_SetClassConfig>
 800c374:	4603      	mov	r3, r0
 800c376:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00f      	beq.n	800c39e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f918 	bl	800c5b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7fe ff7b 	bl	800b28a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c39c:	e014      	b.n	800c3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f9e0 	bl	800c764 <USBD_CtlSendStatus>
      break;
 800c3a4:	e010      	b.n	800c3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 f9dc 	bl	800c764 <USBD_CtlSendStatus>
      break;
 800c3ac:	e00c      	b.n	800c3c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f900 	bl	800c5b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3b6:	4b07      	ldr	r3, [pc, #28]	@ (800c3d4 <USBD_SetConfig+0x150>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7fe ff64 	bl	800b28a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c6:	bf00      	nop
  }

  return ret;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20000f50 	.word	0x20000f50

0800c3d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	88db      	ldrh	r3, [r3, #6]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d004      	beq.n	800c3f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f8e2 	bl	800c5b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c3f2:	e023      	b.n	800c43c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	dc02      	bgt.n	800c406 <USBD_GetConfig+0x2e>
 800c400:	2b00      	cmp	r3, #0
 800c402:	dc03      	bgt.n	800c40c <USBD_GetConfig+0x34>
 800c404:	e015      	b.n	800c432 <USBD_GetConfig+0x5a>
 800c406:	2b03      	cmp	r3, #3
 800c408:	d00b      	beq.n	800c422 <USBD_GetConfig+0x4a>
 800c40a:	e012      	b.n	800c432 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	3308      	adds	r3, #8
 800c416:	2201      	movs	r2, #1
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f948 	bl	800c6b0 <USBD_CtlSendData>
        break;
 800c420:	e00c      	b.n	800c43c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3304      	adds	r3, #4
 800c426:	2201      	movs	r2, #1
 800c428:	4619      	mov	r1, r3
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f940 	bl	800c6b0 <USBD_CtlSendData>
        break;
 800c430:	e004      	b.n	800c43c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c432:	6839      	ldr	r1, [r7, #0]
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f8be 	bl	800c5b6 <USBD_CtlError>
        break;
 800c43a:	bf00      	nop
}
 800c43c:	bf00      	nop
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c454:	b2db      	uxtb	r3, r3
 800c456:	3b01      	subs	r3, #1
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d81e      	bhi.n	800c49a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	88db      	ldrh	r3, [r3, #6]
 800c460:	2b02      	cmp	r3, #2
 800c462:	d004      	beq.n	800c46e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f8a5 	bl	800c5b6 <USBD_CtlError>
        break;
 800c46c:	e01a      	b.n	800c4a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	f043 0202 	orr.w	r2, r3, #2
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	330c      	adds	r3, #12
 800c48e:	2202      	movs	r2, #2
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f90c 	bl	800c6b0 <USBD_CtlSendData>
      break;
 800c498:	e004      	b.n	800c4a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f88a 	bl	800c5b6 <USBD_CtlError>
      break;
 800c4a2:	bf00      	nop
  }
}
 800c4a4:	bf00      	nop
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	885b      	ldrh	r3, [r3, #2]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d107      	bne.n	800c4ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f94c 	bl	800c764 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c4cc:	e013      	b.n	800c4f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	885b      	ldrh	r3, [r3, #2]
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	d10b      	bne.n	800c4ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	889b      	ldrh	r3, [r3, #4]
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f93c 	bl	800c764 <USBD_CtlSendStatus>
}
 800c4ec:	e003      	b.n	800c4f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f860 	bl	800c5b6 <USBD_CtlError>
}
 800c4f6:	bf00      	nop
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	3b01      	subs	r3, #1
 800c512:	2b02      	cmp	r3, #2
 800c514:	d80b      	bhi.n	800c52e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	885b      	ldrh	r3, [r3, #2]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d10c      	bne.n	800c538 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f91c 	bl	800c764 <USBD_CtlSendStatus>
      }
      break;
 800c52c:	e004      	b.n	800c538 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f840 	bl	800c5b6 <USBD_CtlError>
      break;
 800c536:	e000      	b.n	800c53a <USBD_ClrFeature+0x3c>
      break;
 800c538:	bf00      	nop
  }
}
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	781a      	ldrb	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3301      	adds	r3, #1
 800c55c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	781a      	ldrb	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3301      	adds	r3, #1
 800c56a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7ff fa16 	bl	800b99e <SWAPBYTE>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3301      	adds	r3, #1
 800c584:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff fa09 	bl	800b99e <SWAPBYTE>
 800c58c:	4603      	mov	r3, r0
 800c58e:	461a      	mov	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3301      	adds	r3, #1
 800c598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3301      	adds	r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff f9fc 	bl	800b99e <SWAPBYTE>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	80da      	strh	r2, [r3, #6]
}
 800c5ae:	bf00      	nop
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5c0:	2180      	movs	r1, #128	@ 0x80
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fd46 	bl	800d054 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fd42 	bl	800d054 <USBD_LL_StallEP>
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d042      	beq.n	800c674 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c5f2:	6938      	ldr	r0, [r7, #16]
 800c5f4:	f000 f842 	bl	800c67c <USBD_GetLen>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c602:	d808      	bhi.n	800c616 <USBD_GetString+0x3e>
 800c604:	6938      	ldr	r0, [r7, #16]
 800c606:	f000 f839 	bl	800c67c <USBD_GetLen>
 800c60a:	4603      	mov	r3, r0
 800c60c:	3301      	adds	r3, #1
 800c60e:	b29b      	uxth	r3, r3
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	b29a      	uxth	r2, r3
 800c614:	e001      	b.n	800c61a <USBD_GetString+0x42>
 800c616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	4413      	add	r3, r2
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	701a      	strb	r2, [r3, #0]
  idx++;
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	3301      	adds	r3, #1
 800c62e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c630:	7dfb      	ldrb	r3, [r7, #23]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	4413      	add	r3, r2
 800c636:	2203      	movs	r2, #3
 800c638:	701a      	strb	r2, [r3, #0]
  idx++;
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	3301      	adds	r3, #1
 800c63e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c640:	e013      	b.n	800c66a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	4413      	add	r3, r2
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	7812      	ldrb	r2, [r2, #0]
 800c64c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	613b      	str	r3, [r7, #16]
    idx++;
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	3301      	adds	r3, #1
 800c658:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	4413      	add	r3, r2
 800c660:	2200      	movs	r2, #0
 800c662:	701a      	strb	r2, [r3, #0]
    idx++;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	3301      	adds	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1e7      	bne.n	800c642 <USBD_GetString+0x6a>
 800c672:	e000      	b.n	800c676 <USBD_GetString+0x9e>
    return;
 800c674:	bf00      	nop
  }
}
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c68c:	e005      	b.n	800c69a <USBD_GetLen+0x1e>
  {
    len++;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	3301      	adds	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	3301      	adds	r3, #1
 800c698:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f5      	bne.n	800c68e <USBD_GetLen+0x12>
  }

  return len;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 fd45 	bl	800d166 <USBD_LL_Transmit>

  return USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f000 fd34 	bl	800d166 <USBD_LL_Transmit>

  return USBD_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2203      	movs	r2, #3
 800c718:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	2100      	movs	r1, #0
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 fd38 	bl	800d1a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	2100      	movs	r1, #0
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f000 fd27 	bl	800d1a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2204      	movs	r2, #4
 800c770:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c774:	2300      	movs	r3, #0
 800c776:	2200      	movs	r2, #0
 800c778:	2100      	movs	r1, #0
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fcf3 	bl	800d166 <USBD_LL_Transmit>

  return USBD_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2205      	movs	r2, #5
 800c796:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c79a:	2300      	movs	r3, #0
 800c79c:	2200      	movs	r2, #0
 800c79e:	2100      	movs	r1, #0
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fd01 	bl	800d1a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	4912      	ldr	r1, [pc, #72]	@ (800c800 <MX_USB_DEVICE_Init+0x50>)
 800c7b8:	4812      	ldr	r0, [pc, #72]	@ (800c804 <MX_USB_DEVICE_Init+0x54>)
 800c7ba:	f7fe fccd 	bl	800b158 <USBD_Init>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c7c4:	f7f6 fa94 	bl	8002cf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c7c8:	490f      	ldr	r1, [pc, #60]	@ (800c808 <MX_USB_DEVICE_Init+0x58>)
 800c7ca:	480e      	ldr	r0, [pc, #56]	@ (800c804 <MX_USB_DEVICE_Init+0x54>)
 800c7cc:	f7fe fcf4 	bl	800b1b8 <USBD_RegisterClass>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7d6:	f7f6 fa8b 	bl	8002cf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c7da:	490c      	ldr	r1, [pc, #48]	@ (800c80c <MX_USB_DEVICE_Init+0x5c>)
 800c7dc:	4809      	ldr	r0, [pc, #36]	@ (800c804 <MX_USB_DEVICE_Init+0x54>)
 800c7de:	f7fe fbeb 	bl	800afb8 <USBD_CDC_RegisterInterface>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7e8:	f7f6 fa82 	bl	8002cf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7ec:	4805      	ldr	r0, [pc, #20]	@ (800c804 <MX_USB_DEVICE_Init+0x54>)
 800c7ee:	f7fe fd19 	bl	800b224 <USBD_Start>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c7f8:	f7f6 fa7a 	bl	8002cf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c7fc:	bf00      	nop
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	200001f0 	.word	0x200001f0
 800c804:	20000f54 	.word	0x20000f54
 800c808:	2000015c 	.word	0x2000015c
 800c80c:	200001dc 	.word	0x200001dc

0800c810 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c814:	2200      	movs	r2, #0
 800c816:	4905      	ldr	r1, [pc, #20]	@ (800c82c <CDC_Init_FS+0x1c>)
 800c818:	4805      	ldr	r0, [pc, #20]	@ (800c830 <CDC_Init_FS+0x20>)
 800c81a:	f7fe fbe7 	bl	800afec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c81e:	4905      	ldr	r1, [pc, #20]	@ (800c834 <CDC_Init_FS+0x24>)
 800c820:	4803      	ldr	r0, [pc, #12]	@ (800c830 <CDC_Init_FS+0x20>)
 800c822:	f7fe fc05 	bl	800b030 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c826:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c828:	4618      	mov	r0, r3
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20001a30 	.word	0x20001a30
 800c830:	20000f54 	.word	0x20000f54
 800c834:	20001230 	.word	0x20001230

0800c838 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c838:	b480      	push	{r7}
 800c83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c83c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c83e:	4618      	mov	r0, r3
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	6039      	str	r1, [r7, #0]
 800c852:	71fb      	strb	r3, [r7, #7]
 800c854:	4613      	mov	r3, r2
 800c856:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c858:	79fb      	ldrb	r3, [r7, #7]
 800c85a:	2b23      	cmp	r3, #35	@ 0x23
 800c85c:	d84a      	bhi.n	800c8f4 <CDC_Control_FS+0xac>
 800c85e:	a201      	add	r2, pc, #4	@ (adr r2, 800c864 <CDC_Control_FS+0x1c>)
 800c860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c864:	0800c8f5 	.word	0x0800c8f5
 800c868:	0800c8f5 	.word	0x0800c8f5
 800c86c:	0800c8f5 	.word	0x0800c8f5
 800c870:	0800c8f5 	.word	0x0800c8f5
 800c874:	0800c8f5 	.word	0x0800c8f5
 800c878:	0800c8f5 	.word	0x0800c8f5
 800c87c:	0800c8f5 	.word	0x0800c8f5
 800c880:	0800c8f5 	.word	0x0800c8f5
 800c884:	0800c8f5 	.word	0x0800c8f5
 800c888:	0800c8f5 	.word	0x0800c8f5
 800c88c:	0800c8f5 	.word	0x0800c8f5
 800c890:	0800c8f5 	.word	0x0800c8f5
 800c894:	0800c8f5 	.word	0x0800c8f5
 800c898:	0800c8f5 	.word	0x0800c8f5
 800c89c:	0800c8f5 	.word	0x0800c8f5
 800c8a0:	0800c8f5 	.word	0x0800c8f5
 800c8a4:	0800c8f5 	.word	0x0800c8f5
 800c8a8:	0800c8f5 	.word	0x0800c8f5
 800c8ac:	0800c8f5 	.word	0x0800c8f5
 800c8b0:	0800c8f5 	.word	0x0800c8f5
 800c8b4:	0800c8f5 	.word	0x0800c8f5
 800c8b8:	0800c8f5 	.word	0x0800c8f5
 800c8bc:	0800c8f5 	.word	0x0800c8f5
 800c8c0:	0800c8f5 	.word	0x0800c8f5
 800c8c4:	0800c8f5 	.word	0x0800c8f5
 800c8c8:	0800c8f5 	.word	0x0800c8f5
 800c8cc:	0800c8f5 	.word	0x0800c8f5
 800c8d0:	0800c8f5 	.word	0x0800c8f5
 800c8d4:	0800c8f5 	.word	0x0800c8f5
 800c8d8:	0800c8f5 	.word	0x0800c8f5
 800c8dc:	0800c8f5 	.word	0x0800c8f5
 800c8e0:	0800c8f5 	.word	0x0800c8f5
 800c8e4:	0800c8f5 	.word	0x0800c8f5
 800c8e8:	0800c8f5 	.word	0x0800c8f5
 800c8ec:	0800c8f5 	.word	0x0800c8f5
 800c8f0:	0800c8f5 	.word	0x0800c8f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8f4:	bf00      	nop
  }

  return (USBD_OK);
 800c8f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	481d      	ldr	r0, [pc, #116]	@ (800c988 <CDC_Receive_FS+0x84>)
 800c912:	f7fe fb8d 	bl	800b030 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c916:	481c      	ldr	r0, [pc, #112]	@ (800c988 <CDC_Receive_FS+0x84>)
 800c918:	f7fe fbe8 	bl	800b0ec <USBD_CDC_ReceivePacket>

  memset (usbBuffer, '\0', 64);  // clear the buffer
 800c91c:	2240      	movs	r2, #64	@ 0x40
 800c91e:	2100      	movs	r1, #0
 800c920:	481a      	ldr	r0, [pc, #104]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c922:	f000 fd3b 	bl	800d39c <memset>
  uint8_t len = (uint8_t)*Len;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	73fb      	strb	r3, [r7, #15]
  memcpy(usbBuffer, Buf, len);  // copy the data to the buffer
 800c92c:	7bfb      	ldrb	r3, [r7, #15]
 800c92e:	461a      	mov	r2, r3
 800c930:	6879      	ldr	r1, [r7, #4]
 800c932:	4816      	ldr	r0, [pc, #88]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c934:	f000 fd66 	bl	800d404 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	461a      	mov	r2, r3
 800c93c:	2100      	movs	r1, #0
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fd2c 	bl	800d39c <memset>

  if(usbBuffer == 'U'){
 800c944:	4b11      	ldr	r3, [pc, #68]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c946:	2b55      	cmp	r3, #85	@ 0x55
 800c948:	d102      	bne.n	800c950 <CDC_Receive_FS+0x4c>
	  forward();
 800c94a:	f7f5 fb1f 	bl	8001f8c <forward>
 800c94e:	e016      	b.n	800c97e <CDC_Receive_FS+0x7a>
  }
  else if(usbBuffer == 'D'){
 800c950:	4b0e      	ldr	r3, [pc, #56]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c952:	2b44      	cmp	r3, #68	@ 0x44
 800c954:	d102      	bne.n	800c95c <CDC_Receive_FS+0x58>
	  reverse();
 800c956:	f7f5 fb57 	bl	8002008 <reverse>
 800c95a:	e010      	b.n	800c97e <CDC_Receive_FS+0x7a>
  }
  else if(usbBuffer == 'L'){
 800c95c:	4b0b      	ldr	r3, [pc, #44]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c95e:	2b4c      	cmp	r3, #76	@ 0x4c
 800c960:	d102      	bne.n	800c968 <CDC_Receive_FS+0x64>
	  left();
 800c962:	f7f5 fb8f 	bl	8002084 <left>
 800c966:	e00a      	b.n	800c97e <CDC_Receive_FS+0x7a>
  }
  else if(usbBuffer == 'R'){
 800c968:	4b08      	ldr	r3, [pc, #32]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c96a:	2b52      	cmp	r3, #82	@ 0x52
 800c96c:	d102      	bne.n	800c974 <CDC_Receive_FS+0x70>
	  right();
 800c96e:	f7f5 fbc7 	bl	8002100 <right>
 800c972:	e004      	b.n	800c97e <CDC_Receive_FS+0x7a>
  }
  else if(usbBuffer == 'C'){
 800c974:	4b05      	ldr	r3, [pc, #20]	@ (800c98c <CDC_Receive_FS+0x88>)
 800c976:	2b43      	cmp	r3, #67	@ 0x43
 800c978:	d101      	bne.n	800c97e <CDC_Receive_FS+0x7a>
	  stopMotors();
 800c97a:	f7f5 fbff 	bl	800217c <stopMotors>
  }
  return (USBD_OK);
 800c97e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	20000f54 	.word	0x20000f54
 800c98c:	20000f08 	.word	0x20000f08

0800c990 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	460b      	mov	r3, r1
 800c99a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c9a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d8 <CDC_Transmit_FS+0x48>)
 800c9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c9a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e00b      	b.n	800c9ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c9b6:	887b      	ldrh	r3, [r7, #2]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	6879      	ldr	r1, [r7, #4]
 800c9bc:	4806      	ldr	r0, [pc, #24]	@ (800c9d8 <CDC_Transmit_FS+0x48>)
 800c9be:	f7fe fb15 	bl	800afec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c9c2:	4805      	ldr	r0, [pc, #20]	@ (800c9d8 <CDC_Transmit_FS+0x48>)
 800c9c4:	f7fe fb52 	bl	800b06c <USBD_CDC_TransmitPacket>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20000f54 	.word	0x20000f54

0800c9dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c9ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	371c      	adds	r7, #28
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr
	...

0800ca00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	6039      	str	r1, [r7, #0]
 800ca0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2212      	movs	r2, #18
 800ca10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca12:	4b03      	ldr	r3, [pc, #12]	@ (800ca20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr
 800ca20:	20000210 	.word	0x20000210

0800ca24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	2204      	movs	r2, #4
 800ca34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca36:	4b03      	ldr	r3, [pc, #12]	@ (800ca44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	20000230 	.word	0x20000230

0800ca48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	6039      	str	r1, [r7, #0]
 800ca52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d105      	bne.n	800ca66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	4907      	ldr	r1, [pc, #28]	@ (800ca7c <USBD_FS_ProductStrDescriptor+0x34>)
 800ca5e:	4808      	ldr	r0, [pc, #32]	@ (800ca80 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca60:	f7ff fdba 	bl	800c5d8 <USBD_GetString>
 800ca64:	e004      	b.n	800ca70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	4904      	ldr	r1, [pc, #16]	@ (800ca7c <USBD_FS_ProductStrDescriptor+0x34>)
 800ca6a:	4805      	ldr	r0, [pc, #20]	@ (800ca80 <USBD_FS_ProductStrDescriptor+0x38>)
 800ca6c:	f7ff fdb4 	bl	800c5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca70:	4b02      	ldr	r3, [pc, #8]	@ (800ca7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20002230 	.word	0x20002230
 800ca80:	0800ddec 	.word	0x0800ddec

0800ca84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	6039      	str	r1, [r7, #0]
 800ca8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	4904      	ldr	r1, [pc, #16]	@ (800caa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca94:	4804      	ldr	r0, [pc, #16]	@ (800caa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca96:	f7ff fd9f 	bl	800c5d8 <USBD_GetString>
  return USBD_StrDesc;
 800ca9a:	4b02      	ldr	r3, [pc, #8]	@ (800caa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20002230 	.word	0x20002230
 800caa8:	0800de04 	.word	0x0800de04

0800caac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	4603      	mov	r3, r0
 800cab4:	6039      	str	r1, [r7, #0]
 800cab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	221a      	movs	r2, #26
 800cabc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cabe:	f000 f855 	bl	800cb6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cac2:	4b02      	ldr	r3, [pc, #8]	@ (800cacc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	20000234 	.word	0x20000234

0800cad0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	4603      	mov	r3, r0
 800cad8:	6039      	str	r1, [r7, #0]
 800cada:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cadc:	79fb      	ldrb	r3, [r7, #7]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d105      	bne.n	800caee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	4907      	ldr	r1, [pc, #28]	@ (800cb04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cae6:	4808      	ldr	r0, [pc, #32]	@ (800cb08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cae8:	f7ff fd76 	bl	800c5d8 <USBD_GetString>
 800caec:	e004      	b.n	800caf8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	4904      	ldr	r1, [pc, #16]	@ (800cb04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800caf2:	4805      	ldr	r0, [pc, #20]	@ (800cb08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800caf4:	f7ff fd70 	bl	800c5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800caf8:	4b02      	ldr	r3, [pc, #8]	@ (800cb04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20002230 	.word	0x20002230
 800cb08:	0800de18 	.word	0x0800de18

0800cb0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	6039      	str	r1, [r7, #0]
 800cb16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d105      	bne.n	800cb2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	4907      	ldr	r1, [pc, #28]	@ (800cb40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb22:	4808      	ldr	r0, [pc, #32]	@ (800cb44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb24:	f7ff fd58 	bl	800c5d8 <USBD_GetString>
 800cb28:	e004      	b.n	800cb34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	4904      	ldr	r1, [pc, #16]	@ (800cb40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb2e:	4805      	ldr	r0, [pc, #20]	@ (800cb44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb30:	f7ff fd52 	bl	800c5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb34:	4b02      	ldr	r3, [pc, #8]	@ (800cb40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3708      	adds	r7, #8
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20002230 	.word	0x20002230
 800cb44:	0800de24 	.word	0x0800de24

0800cb48 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	6039      	str	r1, [r7, #0]
 800cb52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	220c      	movs	r2, #12
 800cb58:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cb5a:	4b03      	ldr	r3, [pc, #12]	@ (800cb68 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	20000224 	.word	0x20000224

0800cb6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb72:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb0 <Get_SerialNum+0x44>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb78:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb4 <Get_SerialNum+0x48>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb8 <Get_SerialNum+0x4c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4413      	add	r3, r2
 800cb8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d009      	beq.n	800cba6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb92:	2208      	movs	r2, #8
 800cb94:	4909      	ldr	r1, [pc, #36]	@ (800cbbc <Get_SerialNum+0x50>)
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f000 f814 	bl	800cbc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb9c:	2204      	movs	r2, #4
 800cb9e:	4908      	ldr	r1, [pc, #32]	@ (800cbc0 <Get_SerialNum+0x54>)
 800cba0:	68b8      	ldr	r0, [r7, #8]
 800cba2:	f000 f80f 	bl	800cbc4 <IntToUnicode>
  }
}
 800cba6:	bf00      	nop
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	1fff7a10 	.word	0x1fff7a10
 800cbb4:	1fff7a14 	.word	0x1fff7a14
 800cbb8:	1fff7a18 	.word	0x1fff7a18
 800cbbc:	20000236 	.word	0x20000236
 800cbc0:	20000246 	.word	0x20000246

0800cbc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	75fb      	strb	r3, [r7, #23]
 800cbda:	e027      	b.n	800cc2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	0f1b      	lsrs	r3, r3, #28
 800cbe0:	2b09      	cmp	r3, #9
 800cbe2:	d80b      	bhi.n	800cbfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	0f1b      	lsrs	r3, r3, #28
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	005b      	lsls	r3, r3, #1
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	440b      	add	r3, r1
 800cbf4:	3230      	adds	r2, #48	@ 0x30
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	e00a      	b.n	800cc12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	0f1b      	lsrs	r3, r3, #28
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	4619      	mov	r1, r3
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	440b      	add	r3, r1
 800cc0c:	3237      	adds	r2, #55	@ 0x37
 800cc0e:	b2d2      	uxtb	r2, r2
 800cc10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	011b      	lsls	r3, r3, #4
 800cc16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	68ba      	ldr	r2, [r7, #8]
 800cc20:	4413      	add	r3, r2
 800cc22:	2200      	movs	r2, #0
 800cc24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	75fb      	strb	r3, [r7, #23]
 800cc2c:	7dfa      	ldrb	r2, [r7, #23]
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d3d3      	bcc.n	800cbdc <IntToUnicode+0x18>
  }
}
 800cc34:	bf00      	nop
 800cc36:	bf00      	nop
 800cc38:	371c      	adds	r7, #28
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
	...

0800cc44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b0a0      	sub	sp, #128	@ 0x80
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc4c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	605a      	str	r2, [r3, #4]
 800cc56:	609a      	str	r2, [r3, #8]
 800cc58:	60da      	str	r2, [r3, #12]
 800cc5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cc5c:	f107 0310 	add.w	r3, r7, #16
 800cc60:	225c      	movs	r2, #92	@ 0x5c
 800cc62:	2100      	movs	r1, #0
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 fb99 	bl	800d39c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc72:	d149      	bne.n	800cd08 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cc74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cc7e:	f107 0310 	add.w	r3, r7, #16
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f8 feb8 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cc8e:	f7f6 f82f 	bl	8002cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]
 800cc96:	4b1e      	ldr	r3, [pc, #120]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800cc98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc9a:	4a1d      	ldr	r2, [pc, #116]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800cc9c:	f043 0301 	orr.w	r3, r3, #1
 800cca0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cca2:	4b1b      	ldr	r3, [pc, #108]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800cca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ccae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ccb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ccc0:	230a      	movs	r3, #10
 800ccc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccc4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4812      	ldr	r0, [pc, #72]	@ (800cd14 <HAL_PCD_MspInit+0xd0>)
 800cccc:	f7f6 ffea 	bl	8003ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ccd0:	4b0f      	ldr	r3, [pc, #60]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800ccd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd4:	4a0e      	ldr	r2, [pc, #56]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800ccd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccda:	6353      	str	r3, [r2, #52]	@ 0x34
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60bb      	str	r3, [r7, #8]
 800cce0:	4b0b      	ldr	r3, [pc, #44]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800cce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce4:	4a0a      	ldr	r2, [pc, #40]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800cce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ccea:	6453      	str	r3, [r2, #68]	@ 0x44
 800ccec:	4b08      	ldr	r3, [pc, #32]	@ (800cd10 <HAL_PCD_MspInit+0xcc>)
 800ccee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccf4:	60bb      	str	r3, [r7, #8]
 800ccf6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	2043      	movs	r0, #67	@ 0x43
 800ccfe:	f7f6 ff9a 	bl	8003c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd02:	2043      	movs	r0, #67	@ 0x43
 800cd04:	f7f6 ffb3 	bl	8003c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd08:	bf00      	nop
 800cd0a:	3780      	adds	r7, #128	@ 0x80
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	40023800 	.word	0x40023800
 800cd14:	40020000 	.word	0x40020000

0800cd18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4610      	mov	r0, r2
 800cd30:	f7fe fac5 	bl	800b2be <USBD_LL_SetupStage>
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd4e:	78fa      	ldrb	r2, [r7, #3]
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	78fb      	ldrb	r3, [r7, #3]
 800cd64:	4619      	mov	r1, r3
 800cd66:	f7fe faff 	bl	800b368 <USBD_LL_DataOutStage>
}
 800cd6a:	bf00      	nop
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cd84:	78fa      	ldrb	r2, [r7, #3]
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	4413      	add	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	440b      	add	r3, r1
 800cd92:	3320      	adds	r3, #32
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	78fb      	ldrb	r3, [r7, #3]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	f7fe fb98 	bl	800b4ce <USBD_LL_DataInStage>
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b082      	sub	sp, #8
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fcd2 	bl	800b75e <USBD_LL_SOF>
}
 800cdba:	bf00      	nop
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	79db      	ldrb	r3, [r3, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d102      	bne.n	800cddc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]
 800cdda:	e008      	b.n	800cdee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	79db      	ldrb	r3, [r3, #7]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d102      	bne.n	800cdea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cde4:	2301      	movs	r3, #1
 800cde6:	73fb      	strb	r3, [r7, #15]
 800cde8:	e001      	b.n	800cdee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cdea:	f7f5 ff81 	bl	8002cf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdf4:	7bfa      	ldrb	r2, [r7, #15]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fe fc6c 	bl	800b6d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fc14 	bl	800b632 <USBD_LL_Reset>
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
	...

0800ce14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe fc67 	bl	800b6f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	6812      	ldr	r2, [r2, #0]
 800ce36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ce3a:	f043 0301 	orr.w	r3, r3, #1
 800ce3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	7adb      	ldrb	r3, [r3, #11]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce48:	4b04      	ldr	r3, [pc, #16]	@ (800ce5c <HAL_PCD_SuspendCallback+0x48>)
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	4a03      	ldr	r2, [pc, #12]	@ (800ce5c <HAL_PCD_SuspendCallback+0x48>)
 800ce4e:	f043 0306 	orr.w	r3, r3, #6
 800ce52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce54:	bf00      	nop
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	e000ed00 	.word	0xe000ed00

0800ce60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe fc5d 	bl	800b72e <USBD_LL_Resume>
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce8e:	78fa      	ldrb	r2, [r7, #3]
 800ce90:	4611      	mov	r1, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe fcb5 	bl	800b802 <USBD_LL_IsoOUTIncomplete>
}
 800ce98:	bf00      	nop
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceb2:	78fa      	ldrb	r2, [r7, #3]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fe fc71 	bl	800b79e <USBD_LL_IsoINIncomplete>
}
 800cebc:	bf00      	nop
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fcc7 	bl	800b866 <USBD_LL_DevConnected>
}
 800ced8:	bf00      	nop
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fe fcc4 	bl	800b87c <USBD_LL_DevDisconnected>
}
 800cef4:	bf00      	nop
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d13c      	bne.n	800cf86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf0c:	4a20      	ldr	r2, [pc, #128]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a1e      	ldr	r2, [pc, #120]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf18:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf1c:	4b1c      	ldr	r3, [pc, #112]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cf22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cf24:	4b1a      	ldr	r3, [pc, #104]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf26:	2206      	movs	r2, #6
 800cf28:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf2a:	4b19      	ldr	r3, [pc, #100]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf30:	4b17      	ldr	r3, [pc, #92]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf36:	4b16      	ldr	r3, [pc, #88]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf38:	2202      	movs	r2, #2
 800cf3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf3c:	4b14      	ldr	r3, [pc, #80]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cf42:	4b13      	ldr	r3, [pc, #76]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cf48:	4b11      	ldr	r3, [pc, #68]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cf4e:	4b10      	ldr	r3, [pc, #64]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cf54:	4b0e      	ldr	r3, [pc, #56]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cf5a:	480d      	ldr	r0, [pc, #52]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf5c:	f7f7 f994 	bl	8004288 <HAL_PCD_Init>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cf66:	f7f5 fec3 	bl	8002cf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cf6a:	2180      	movs	r1, #128	@ 0x80
 800cf6c:	4808      	ldr	r0, [pc, #32]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf6e:	f7f8 fbf4 	bl	800575a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cf72:	2240      	movs	r2, #64	@ 0x40
 800cf74:	2100      	movs	r1, #0
 800cf76:	4806      	ldr	r0, [pc, #24]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf78:	f7f8 fba8 	bl	80056cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf7c:	2280      	movs	r2, #128	@ 0x80
 800cf7e:	2101      	movs	r1, #1
 800cf80:	4803      	ldr	r0, [pc, #12]	@ (800cf90 <USBD_LL_Init+0x94>)
 800cf82:	f7f8 fba3 	bl	80056cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20002430 	.word	0x20002430

0800cf94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f7 fa82 	bl	80044b4 <HAL_PCD_Start>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 f990 	bl	800d2dc <USBD_Get_USB_Status>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	4608      	mov	r0, r1
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4603      	mov	r3, r0
 800cfda:	70fb      	strb	r3, [r7, #3]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70bb      	strb	r3, [r7, #2]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cff2:	78bb      	ldrb	r3, [r7, #2]
 800cff4:	883a      	ldrh	r2, [r7, #0]
 800cff6:	78f9      	ldrb	r1, [r7, #3]
 800cff8:	f7f7 ff83 	bl	8004f02 <HAL_PCD_EP_Open>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	4618      	mov	r0, r3
 800d004:	f000 f96a 	bl	800d2dc <USBD_Get_USB_Status>
 800d008:	4603      	mov	r3, r0
 800d00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	460b      	mov	r3, r1
 800d020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d030:	78fa      	ldrb	r2, [r7, #3]
 800d032:	4611      	mov	r1, r2
 800d034:	4618      	mov	r0, r3
 800d036:	f7f7 ffce 	bl	8004fd6 <HAL_PCD_EP_Close>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	4618      	mov	r0, r3
 800d042:	f000 f94b 	bl	800d2dc <USBD_Get_USB_Status>
 800d046:	4603      	mov	r3, r0
 800d048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d064:	2300      	movs	r3, #0
 800d066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d06e:	78fa      	ldrb	r2, [r7, #3]
 800d070:	4611      	mov	r1, r2
 800d072:	4618      	mov	r0, r3
 800d074:	f7f8 f886 	bl	8005184 <HAL_PCD_EP_SetStall>
 800d078:	4603      	mov	r3, r0
 800d07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 f92c 	bl	800d2dc <USBD_Get_USB_Status>
 800d084:	4603      	mov	r3, r0
 800d086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d088:	7bbb      	ldrb	r3, [r7, #14]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b084      	sub	sp, #16
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	460b      	mov	r3, r1
 800d09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0ac:	78fa      	ldrb	r2, [r7, #3]
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7f8 f8ca 	bl	800524a <HAL_PCD_EP_ClrStall>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 f90d 	bl	800d2dc <USBD_Get_USB_Status>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d0e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	da0b      	bge.n	800d104 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d0ec:	78fb      	ldrb	r3, [r7, #3]
 800d0ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0f2:	68f9      	ldr	r1, [r7, #12]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	440b      	add	r3, r1
 800d0fe:	3316      	adds	r3, #22
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	e00b      	b.n	800d11c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d10a:	68f9      	ldr	r1, [r7, #12]
 800d10c:	4613      	mov	r3, r2
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	4413      	add	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	440b      	add	r3, r1
 800d116:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d11a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	460b      	mov	r3, r1
 800d132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	4611      	mov	r1, r2
 800d146:	4618      	mov	r0, r3
 800d148:	f7f7 feb7 	bl	8004eba <HAL_PCD_SetAddress>
 800d14c:	4603      	mov	r3, r0
 800d14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	4618      	mov	r0, r3
 800d154:	f000 f8c2 	bl	800d2dc <USBD_Get_USB_Status>
 800d158:	4603      	mov	r3, r0
 800d15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b086      	sub	sp, #24
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	607a      	str	r2, [r7, #4]
 800d170:	603b      	str	r3, [r7, #0]
 800d172:	460b      	mov	r3, r1
 800d174:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d184:	7af9      	ldrb	r1, [r7, #11]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	f7f7 ffc1 	bl	8005110 <HAL_PCD_EP_Transmit>
 800d18e:	4603      	mov	r3, r0
 800d190:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f8a1 	bl	800d2dc <USBD_Get_USB_Status>
 800d19a:	4603      	mov	r3, r0
 800d19c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d19e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	607a      	str	r2, [r7, #4]
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d1c6:	7af9      	ldrb	r1, [r7, #11]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	f7f7 ff4d 	bl	800506a <HAL_PCD_EP_Receive>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 f880 	bl	800d2dc <USBD_Get_USB_Status>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b082      	sub	sp, #8
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1fc:	78fa      	ldrb	r2, [r7, #3]
 800d1fe:	4611      	mov	r1, r2
 800d200:	4618      	mov	r0, r3
 800d202:	f7f7 ff6d 	bl	80050e0 <HAL_PCD_EP_GetRxCount>
 800d206:	4603      	mov	r3, r0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d002      	beq.n	800d228 <HAL_PCDEx_LPM_Callback+0x18>
 800d222:	2b01      	cmp	r3, #1
 800d224:	d01f      	beq.n	800d266 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d226:	e03b      	b.n	800d2a0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	7adb      	ldrb	r3, [r3, #11]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d230:	f7f5 f926 	bl	8002480 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d234:	4b1c      	ldr	r3, [pc, #112]	@ (800d2a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	4a1b      	ldr	r2, [pc, #108]	@ (800d2a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d23a:	f023 0306 	bic.w	r3, r3, #6
 800d23e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	6812      	ldr	r2, [r2, #0]
 800d24e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d252:	f023 0301 	bic.w	r3, r3, #1
 800d256:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fe fa65 	bl	800b72e <USBD_LL_Resume>
    break;
 800d264:	e01c      	b.n	800d2a0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	6812      	ldr	r2, [r2, #0]
 800d274:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d278:	f043 0301 	orr.w	r3, r3, #1
 800d27c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d284:	4618      	mov	r0, r3
 800d286:	f7fe fa36 	bl	800b6f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	7adb      	ldrb	r3, [r3, #11]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d292:	4b05      	ldr	r3, [pc, #20]	@ (800d2a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	4a04      	ldr	r2, [pc, #16]	@ (800d2a8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d298:	f043 0306 	orr.w	r3, r3, #6
 800d29c:	6113      	str	r3, [r2, #16]
    break;
 800d29e:	bf00      	nop
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	e000ed00 	.word	0xe000ed00

0800d2ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d2b4:	4b03      	ldr	r3, [pc, #12]	@ (800d2c4 <USBD_static_malloc+0x18>)
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20002914 	.word	0x20002914

0800d2c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]

}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b085      	sub	sp, #20
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d817      	bhi.n	800d320 <USBD_Get_USB_Status+0x44>
 800d2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2f8 <USBD_Get_USB_Status+0x1c>)
 800d2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f6:	bf00      	nop
 800d2f8:	0800d309 	.word	0x0800d309
 800d2fc:	0800d30f 	.word	0x0800d30f
 800d300:	0800d315 	.word	0x0800d315
 800d304:	0800d31b 	.word	0x0800d31b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]
    break;
 800d30c:	e00b      	b.n	800d326 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d30e:	2303      	movs	r3, #3
 800d310:	73fb      	strb	r3, [r7, #15]
    break;
 800d312:	e008      	b.n	800d326 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d314:	2301      	movs	r3, #1
 800d316:	73fb      	strb	r3, [r7, #15]
    break;
 800d318:	e005      	b.n	800d326 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d31a:	2303      	movs	r3, #3
 800d31c:	73fb      	strb	r3, [r7, #15]
    break;
 800d31e:	e002      	b.n	800d326 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d320:	2303      	movs	r3, #3
 800d322:	73fb      	strb	r3, [r7, #15]
    break;
 800d324:	bf00      	nop
  }
  return usb_status;
 800d326:	7bfb      	ldrb	r3, [r7, #15]
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <sniprintf>:
 800d334:	b40c      	push	{r2, r3}
 800d336:	b530      	push	{r4, r5, lr}
 800d338:	4b17      	ldr	r3, [pc, #92]	@ (800d398 <sniprintf+0x64>)
 800d33a:	1e0c      	subs	r4, r1, #0
 800d33c:	681d      	ldr	r5, [r3, #0]
 800d33e:	b09d      	sub	sp, #116	@ 0x74
 800d340:	da08      	bge.n	800d354 <sniprintf+0x20>
 800d342:	238b      	movs	r3, #139	@ 0x8b
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d34a:	b01d      	add	sp, #116	@ 0x74
 800d34c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d350:	b002      	add	sp, #8
 800d352:	4770      	bx	lr
 800d354:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d358:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d35c:	bf14      	ite	ne
 800d35e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d362:	4623      	moveq	r3, r4
 800d364:	9304      	str	r3, [sp, #16]
 800d366:	9307      	str	r3, [sp, #28]
 800d368:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d36c:	9002      	str	r0, [sp, #8]
 800d36e:	9006      	str	r0, [sp, #24]
 800d370:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d374:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d376:	ab21      	add	r3, sp, #132	@ 0x84
 800d378:	a902      	add	r1, sp, #8
 800d37a:	4628      	mov	r0, r5
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	f000 f8ab 	bl	800d4d8 <_svfiprintf_r>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	bfbc      	itt	lt
 800d386:	238b      	movlt	r3, #139	@ 0x8b
 800d388:	602b      	strlt	r3, [r5, #0]
 800d38a:	2c00      	cmp	r4, #0
 800d38c:	d0dd      	beq.n	800d34a <sniprintf+0x16>
 800d38e:	9b02      	ldr	r3, [sp, #8]
 800d390:	2200      	movs	r2, #0
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	e7d9      	b.n	800d34a <sniprintf+0x16>
 800d396:	bf00      	nop
 800d398:	20000250 	.word	0x20000250

0800d39c <memset>:
 800d39c:	4402      	add	r2, r0
 800d39e:	4603      	mov	r3, r0
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d100      	bne.n	800d3a6 <memset+0xa>
 800d3a4:	4770      	bx	lr
 800d3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d3aa:	e7f9      	b.n	800d3a0 <memset+0x4>

0800d3ac <__errno>:
 800d3ac:	4b01      	ldr	r3, [pc, #4]	@ (800d3b4 <__errno+0x8>)
 800d3ae:	6818      	ldr	r0, [r3, #0]
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	20000250 	.word	0x20000250

0800d3b8 <__libc_init_array>:
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	4d0d      	ldr	r5, [pc, #52]	@ (800d3f0 <__libc_init_array+0x38>)
 800d3bc:	4c0d      	ldr	r4, [pc, #52]	@ (800d3f4 <__libc_init_array+0x3c>)
 800d3be:	1b64      	subs	r4, r4, r5
 800d3c0:	10a4      	asrs	r4, r4, #2
 800d3c2:	2600      	movs	r6, #0
 800d3c4:	42a6      	cmp	r6, r4
 800d3c6:	d109      	bne.n	800d3dc <__libc_init_array+0x24>
 800d3c8:	4d0b      	ldr	r5, [pc, #44]	@ (800d3f8 <__libc_init_array+0x40>)
 800d3ca:	4c0c      	ldr	r4, [pc, #48]	@ (800d3fc <__libc_init_array+0x44>)
 800d3cc:	f000 fc66 	bl	800dc9c <_init>
 800d3d0:	1b64      	subs	r4, r4, r5
 800d3d2:	10a4      	asrs	r4, r4, #2
 800d3d4:	2600      	movs	r6, #0
 800d3d6:	42a6      	cmp	r6, r4
 800d3d8:	d105      	bne.n	800d3e6 <__libc_init_array+0x2e>
 800d3da:	bd70      	pop	{r4, r5, r6, pc}
 800d3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e0:	4798      	blx	r3
 800d3e2:	3601      	adds	r6, #1
 800d3e4:	e7ee      	b.n	800d3c4 <__libc_init_array+0xc>
 800d3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ea:	4798      	blx	r3
 800d3ec:	3601      	adds	r6, #1
 800d3ee:	e7f2      	b.n	800d3d6 <__libc_init_array+0x1e>
 800d3f0:	0800deac 	.word	0x0800deac
 800d3f4:	0800deac 	.word	0x0800deac
 800d3f8:	0800deac 	.word	0x0800deac
 800d3fc:	0800deb0 	.word	0x0800deb0

0800d400 <__retarget_lock_acquire_recursive>:
 800d400:	4770      	bx	lr

0800d402 <__retarget_lock_release_recursive>:
 800d402:	4770      	bx	lr

0800d404 <memcpy>:
 800d404:	440a      	add	r2, r1
 800d406:	4291      	cmp	r1, r2
 800d408:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d40c:	d100      	bne.n	800d410 <memcpy+0xc>
 800d40e:	4770      	bx	lr
 800d410:	b510      	push	{r4, lr}
 800d412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d41a:	4291      	cmp	r1, r2
 800d41c:	d1f9      	bne.n	800d412 <memcpy+0xe>
 800d41e:	bd10      	pop	{r4, pc}

0800d420 <__ssputs_r>:
 800d420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d424:	688e      	ldr	r6, [r1, #8]
 800d426:	461f      	mov	r7, r3
 800d428:	42be      	cmp	r6, r7
 800d42a:	680b      	ldr	r3, [r1, #0]
 800d42c:	4682      	mov	sl, r0
 800d42e:	460c      	mov	r4, r1
 800d430:	4690      	mov	r8, r2
 800d432:	d82d      	bhi.n	800d490 <__ssputs_r+0x70>
 800d434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d438:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d43c:	d026      	beq.n	800d48c <__ssputs_r+0x6c>
 800d43e:	6965      	ldr	r5, [r4, #20]
 800d440:	6909      	ldr	r1, [r1, #16]
 800d442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d446:	eba3 0901 	sub.w	r9, r3, r1
 800d44a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d44e:	1c7b      	adds	r3, r7, #1
 800d450:	444b      	add	r3, r9
 800d452:	106d      	asrs	r5, r5, #1
 800d454:	429d      	cmp	r5, r3
 800d456:	bf38      	it	cc
 800d458:	461d      	movcc	r5, r3
 800d45a:	0553      	lsls	r3, r2, #21
 800d45c:	d527      	bpl.n	800d4ae <__ssputs_r+0x8e>
 800d45e:	4629      	mov	r1, r5
 800d460:	f000 f958 	bl	800d714 <_malloc_r>
 800d464:	4606      	mov	r6, r0
 800d466:	b360      	cbz	r0, 800d4c2 <__ssputs_r+0xa2>
 800d468:	6921      	ldr	r1, [r4, #16]
 800d46a:	464a      	mov	r2, r9
 800d46c:	f7ff ffca 	bl	800d404 <memcpy>
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	6126      	str	r6, [r4, #16]
 800d47e:	6165      	str	r5, [r4, #20]
 800d480:	444e      	add	r6, r9
 800d482:	eba5 0509 	sub.w	r5, r5, r9
 800d486:	6026      	str	r6, [r4, #0]
 800d488:	60a5      	str	r5, [r4, #8]
 800d48a:	463e      	mov	r6, r7
 800d48c:	42be      	cmp	r6, r7
 800d48e:	d900      	bls.n	800d492 <__ssputs_r+0x72>
 800d490:	463e      	mov	r6, r7
 800d492:	6820      	ldr	r0, [r4, #0]
 800d494:	4632      	mov	r2, r6
 800d496:	4641      	mov	r1, r8
 800d498:	f000 fb84 	bl	800dba4 <memmove>
 800d49c:	68a3      	ldr	r3, [r4, #8]
 800d49e:	1b9b      	subs	r3, r3, r6
 800d4a0:	60a3      	str	r3, [r4, #8]
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	4433      	add	r3, r6
 800d4a6:	6023      	str	r3, [r4, #0]
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ae:	462a      	mov	r2, r5
 800d4b0:	f000 fb4a 	bl	800db48 <_realloc_r>
 800d4b4:	4606      	mov	r6, r0
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d1e0      	bne.n	800d47c <__ssputs_r+0x5c>
 800d4ba:	6921      	ldr	r1, [r4, #16]
 800d4bc:	4650      	mov	r0, sl
 800d4be:	f000 fb9b 	bl	800dbf8 <_free_r>
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	f8ca 3000 	str.w	r3, [sl]
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4ce:	81a3      	strh	r3, [r4, #12]
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4d4:	e7e9      	b.n	800d4aa <__ssputs_r+0x8a>
	...

0800d4d8 <_svfiprintf_r>:
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	4698      	mov	r8, r3
 800d4de:	898b      	ldrh	r3, [r1, #12]
 800d4e0:	061b      	lsls	r3, r3, #24
 800d4e2:	b09d      	sub	sp, #116	@ 0x74
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	460d      	mov	r5, r1
 800d4e8:	4614      	mov	r4, r2
 800d4ea:	d510      	bpl.n	800d50e <_svfiprintf_r+0x36>
 800d4ec:	690b      	ldr	r3, [r1, #16]
 800d4ee:	b973      	cbnz	r3, 800d50e <_svfiprintf_r+0x36>
 800d4f0:	2140      	movs	r1, #64	@ 0x40
 800d4f2:	f000 f90f 	bl	800d714 <_malloc_r>
 800d4f6:	6028      	str	r0, [r5, #0]
 800d4f8:	6128      	str	r0, [r5, #16]
 800d4fa:	b930      	cbnz	r0, 800d50a <_svfiprintf_r+0x32>
 800d4fc:	230c      	movs	r3, #12
 800d4fe:	603b      	str	r3, [r7, #0]
 800d500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d504:	b01d      	add	sp, #116	@ 0x74
 800d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50a:	2340      	movs	r3, #64	@ 0x40
 800d50c:	616b      	str	r3, [r5, #20]
 800d50e:	2300      	movs	r3, #0
 800d510:	9309      	str	r3, [sp, #36]	@ 0x24
 800d512:	2320      	movs	r3, #32
 800d514:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d518:	f8cd 800c 	str.w	r8, [sp, #12]
 800d51c:	2330      	movs	r3, #48	@ 0x30
 800d51e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6bc <_svfiprintf_r+0x1e4>
 800d522:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d526:	f04f 0901 	mov.w	r9, #1
 800d52a:	4623      	mov	r3, r4
 800d52c:	469a      	mov	sl, r3
 800d52e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d532:	b10a      	cbz	r2, 800d538 <_svfiprintf_r+0x60>
 800d534:	2a25      	cmp	r2, #37	@ 0x25
 800d536:	d1f9      	bne.n	800d52c <_svfiprintf_r+0x54>
 800d538:	ebba 0b04 	subs.w	fp, sl, r4
 800d53c:	d00b      	beq.n	800d556 <_svfiprintf_r+0x7e>
 800d53e:	465b      	mov	r3, fp
 800d540:	4622      	mov	r2, r4
 800d542:	4629      	mov	r1, r5
 800d544:	4638      	mov	r0, r7
 800d546:	f7ff ff6b 	bl	800d420 <__ssputs_r>
 800d54a:	3001      	adds	r0, #1
 800d54c:	f000 80a7 	beq.w	800d69e <_svfiprintf_r+0x1c6>
 800d550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d552:	445a      	add	r2, fp
 800d554:	9209      	str	r2, [sp, #36]	@ 0x24
 800d556:	f89a 3000 	ldrb.w	r3, [sl]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 809f 	beq.w	800d69e <_svfiprintf_r+0x1c6>
 800d560:	2300      	movs	r3, #0
 800d562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d56a:	f10a 0a01 	add.w	sl, sl, #1
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	9307      	str	r3, [sp, #28]
 800d572:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d576:	931a      	str	r3, [sp, #104]	@ 0x68
 800d578:	4654      	mov	r4, sl
 800d57a:	2205      	movs	r2, #5
 800d57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d580:	484e      	ldr	r0, [pc, #312]	@ (800d6bc <_svfiprintf_r+0x1e4>)
 800d582:	f7f2 fe45 	bl	8000210 <memchr>
 800d586:	9a04      	ldr	r2, [sp, #16]
 800d588:	b9d8      	cbnz	r0, 800d5c2 <_svfiprintf_r+0xea>
 800d58a:	06d0      	lsls	r0, r2, #27
 800d58c:	bf44      	itt	mi
 800d58e:	2320      	movmi	r3, #32
 800d590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d594:	0711      	lsls	r1, r2, #28
 800d596:	bf44      	itt	mi
 800d598:	232b      	movmi	r3, #43	@ 0x2b
 800d59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d59e:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5a4:	d015      	beq.n	800d5d2 <_svfiprintf_r+0xfa>
 800d5a6:	9a07      	ldr	r2, [sp, #28]
 800d5a8:	4654      	mov	r4, sl
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	f04f 0c0a 	mov.w	ip, #10
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5b6:	3b30      	subs	r3, #48	@ 0x30
 800d5b8:	2b09      	cmp	r3, #9
 800d5ba:	d94b      	bls.n	800d654 <_svfiprintf_r+0x17c>
 800d5bc:	b1b0      	cbz	r0, 800d5ec <_svfiprintf_r+0x114>
 800d5be:	9207      	str	r2, [sp, #28]
 800d5c0:	e014      	b.n	800d5ec <_svfiprintf_r+0x114>
 800d5c2:	eba0 0308 	sub.w	r3, r0, r8
 800d5c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	9304      	str	r3, [sp, #16]
 800d5ce:	46a2      	mov	sl, r4
 800d5d0:	e7d2      	b.n	800d578 <_svfiprintf_r+0xa0>
 800d5d2:	9b03      	ldr	r3, [sp, #12]
 800d5d4:	1d19      	adds	r1, r3, #4
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	9103      	str	r1, [sp, #12]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	bfbb      	ittet	lt
 800d5de:	425b      	neglt	r3, r3
 800d5e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d5e4:	9307      	strge	r3, [sp, #28]
 800d5e6:	9307      	strlt	r3, [sp, #28]
 800d5e8:	bfb8      	it	lt
 800d5ea:	9204      	strlt	r2, [sp, #16]
 800d5ec:	7823      	ldrb	r3, [r4, #0]
 800d5ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5f0:	d10a      	bne.n	800d608 <_svfiprintf_r+0x130>
 800d5f2:	7863      	ldrb	r3, [r4, #1]
 800d5f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5f6:	d132      	bne.n	800d65e <_svfiprintf_r+0x186>
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	1d1a      	adds	r2, r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	9203      	str	r2, [sp, #12]
 800d600:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d604:	3402      	adds	r4, #2
 800d606:	9305      	str	r3, [sp, #20]
 800d608:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6cc <_svfiprintf_r+0x1f4>
 800d60c:	7821      	ldrb	r1, [r4, #0]
 800d60e:	2203      	movs	r2, #3
 800d610:	4650      	mov	r0, sl
 800d612:	f7f2 fdfd 	bl	8000210 <memchr>
 800d616:	b138      	cbz	r0, 800d628 <_svfiprintf_r+0x150>
 800d618:	9b04      	ldr	r3, [sp, #16]
 800d61a:	eba0 000a 	sub.w	r0, r0, sl
 800d61e:	2240      	movs	r2, #64	@ 0x40
 800d620:	4082      	lsls	r2, r0
 800d622:	4313      	orrs	r3, r2
 800d624:	3401      	adds	r4, #1
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d62c:	4824      	ldr	r0, [pc, #144]	@ (800d6c0 <_svfiprintf_r+0x1e8>)
 800d62e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d632:	2206      	movs	r2, #6
 800d634:	f7f2 fdec 	bl	8000210 <memchr>
 800d638:	2800      	cmp	r0, #0
 800d63a:	d036      	beq.n	800d6aa <_svfiprintf_r+0x1d2>
 800d63c:	4b21      	ldr	r3, [pc, #132]	@ (800d6c4 <_svfiprintf_r+0x1ec>)
 800d63e:	bb1b      	cbnz	r3, 800d688 <_svfiprintf_r+0x1b0>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	3307      	adds	r3, #7
 800d644:	f023 0307 	bic.w	r3, r3, #7
 800d648:	3308      	adds	r3, #8
 800d64a:	9303      	str	r3, [sp, #12]
 800d64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d64e:	4433      	add	r3, r6
 800d650:	9309      	str	r3, [sp, #36]	@ 0x24
 800d652:	e76a      	b.n	800d52a <_svfiprintf_r+0x52>
 800d654:	fb0c 3202 	mla	r2, ip, r2, r3
 800d658:	460c      	mov	r4, r1
 800d65a:	2001      	movs	r0, #1
 800d65c:	e7a8      	b.n	800d5b0 <_svfiprintf_r+0xd8>
 800d65e:	2300      	movs	r3, #0
 800d660:	3401      	adds	r4, #1
 800d662:	9305      	str	r3, [sp, #20]
 800d664:	4619      	mov	r1, r3
 800d666:	f04f 0c0a 	mov.w	ip, #10
 800d66a:	4620      	mov	r0, r4
 800d66c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d670:	3a30      	subs	r2, #48	@ 0x30
 800d672:	2a09      	cmp	r2, #9
 800d674:	d903      	bls.n	800d67e <_svfiprintf_r+0x1a6>
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0c6      	beq.n	800d608 <_svfiprintf_r+0x130>
 800d67a:	9105      	str	r1, [sp, #20]
 800d67c:	e7c4      	b.n	800d608 <_svfiprintf_r+0x130>
 800d67e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d682:	4604      	mov	r4, r0
 800d684:	2301      	movs	r3, #1
 800d686:	e7f0      	b.n	800d66a <_svfiprintf_r+0x192>
 800d688:	ab03      	add	r3, sp, #12
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	462a      	mov	r2, r5
 800d68e:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c8 <_svfiprintf_r+0x1f0>)
 800d690:	a904      	add	r1, sp, #16
 800d692:	4638      	mov	r0, r7
 800d694:	f3af 8000 	nop.w
 800d698:	1c42      	adds	r2, r0, #1
 800d69a:	4606      	mov	r6, r0
 800d69c:	d1d6      	bne.n	800d64c <_svfiprintf_r+0x174>
 800d69e:	89ab      	ldrh	r3, [r5, #12]
 800d6a0:	065b      	lsls	r3, r3, #25
 800d6a2:	f53f af2d 	bmi.w	800d500 <_svfiprintf_r+0x28>
 800d6a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d6a8:	e72c      	b.n	800d504 <_svfiprintf_r+0x2c>
 800d6aa:	ab03      	add	r3, sp, #12
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	4b05      	ldr	r3, [pc, #20]	@ (800d6c8 <_svfiprintf_r+0x1f0>)
 800d6b2:	a904      	add	r1, sp, #16
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f000 f91b 	bl	800d8f0 <_printf_i>
 800d6ba:	e7ed      	b.n	800d698 <_svfiprintf_r+0x1c0>
 800d6bc:	0800de70 	.word	0x0800de70
 800d6c0:	0800de7a 	.word	0x0800de7a
 800d6c4:	00000000 	.word	0x00000000
 800d6c8:	0800d421 	.word	0x0800d421
 800d6cc:	0800de76 	.word	0x0800de76

0800d6d0 <sbrk_aligned>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	4e0f      	ldr	r6, [pc, #60]	@ (800d710 <sbrk_aligned+0x40>)
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	6831      	ldr	r1, [r6, #0]
 800d6d8:	4605      	mov	r5, r0
 800d6da:	b911      	cbnz	r1, 800d6e2 <sbrk_aligned+0x12>
 800d6dc:	f000 fa7c 	bl	800dbd8 <_sbrk_r>
 800d6e0:	6030      	str	r0, [r6, #0]
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f000 fa77 	bl	800dbd8 <_sbrk_r>
 800d6ea:	1c43      	adds	r3, r0, #1
 800d6ec:	d103      	bne.n	800d6f6 <sbrk_aligned+0x26>
 800d6ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
 800d6f6:	1cc4      	adds	r4, r0, #3
 800d6f8:	f024 0403 	bic.w	r4, r4, #3
 800d6fc:	42a0      	cmp	r0, r4
 800d6fe:	d0f8      	beq.n	800d6f2 <sbrk_aligned+0x22>
 800d700:	1a21      	subs	r1, r4, r0
 800d702:	4628      	mov	r0, r5
 800d704:	f000 fa68 	bl	800dbd8 <_sbrk_r>
 800d708:	3001      	adds	r0, #1
 800d70a:	d1f2      	bne.n	800d6f2 <sbrk_aligned+0x22>
 800d70c:	e7ef      	b.n	800d6ee <sbrk_aligned+0x1e>
 800d70e:	bf00      	nop
 800d710:	20002c70 	.word	0x20002c70

0800d714 <_malloc_r>:
 800d714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d718:	1ccd      	adds	r5, r1, #3
 800d71a:	f025 0503 	bic.w	r5, r5, #3
 800d71e:	3508      	adds	r5, #8
 800d720:	2d0c      	cmp	r5, #12
 800d722:	bf38      	it	cc
 800d724:	250c      	movcc	r5, #12
 800d726:	2d00      	cmp	r5, #0
 800d728:	4606      	mov	r6, r0
 800d72a:	db01      	blt.n	800d730 <_malloc_r+0x1c>
 800d72c:	42a9      	cmp	r1, r5
 800d72e:	d904      	bls.n	800d73a <_malloc_r+0x26>
 800d730:	230c      	movs	r3, #12
 800d732:	6033      	str	r3, [r6, #0]
 800d734:	2000      	movs	r0, #0
 800d736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d810 <_malloc_r+0xfc>
 800d73e:	f000 f9f7 	bl	800db30 <__malloc_lock>
 800d742:	f8d8 3000 	ldr.w	r3, [r8]
 800d746:	461c      	mov	r4, r3
 800d748:	bb44      	cbnz	r4, 800d79c <_malloc_r+0x88>
 800d74a:	4629      	mov	r1, r5
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7ff ffbf 	bl	800d6d0 <sbrk_aligned>
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	4604      	mov	r4, r0
 800d756:	d158      	bne.n	800d80a <_malloc_r+0xf6>
 800d758:	f8d8 4000 	ldr.w	r4, [r8]
 800d75c:	4627      	mov	r7, r4
 800d75e:	2f00      	cmp	r7, #0
 800d760:	d143      	bne.n	800d7ea <_malloc_r+0xd6>
 800d762:	2c00      	cmp	r4, #0
 800d764:	d04b      	beq.n	800d7fe <_malloc_r+0xea>
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	4639      	mov	r1, r7
 800d76a:	4630      	mov	r0, r6
 800d76c:	eb04 0903 	add.w	r9, r4, r3
 800d770:	f000 fa32 	bl	800dbd8 <_sbrk_r>
 800d774:	4581      	cmp	r9, r0
 800d776:	d142      	bne.n	800d7fe <_malloc_r+0xea>
 800d778:	6821      	ldr	r1, [r4, #0]
 800d77a:	1a6d      	subs	r5, r5, r1
 800d77c:	4629      	mov	r1, r5
 800d77e:	4630      	mov	r0, r6
 800d780:	f7ff ffa6 	bl	800d6d0 <sbrk_aligned>
 800d784:	3001      	adds	r0, #1
 800d786:	d03a      	beq.n	800d7fe <_malloc_r+0xea>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	442b      	add	r3, r5
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	f8d8 3000 	ldr.w	r3, [r8]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	bb62      	cbnz	r2, 800d7f0 <_malloc_r+0xdc>
 800d796:	f8c8 7000 	str.w	r7, [r8]
 800d79a:	e00f      	b.n	800d7bc <_malloc_r+0xa8>
 800d79c:	6822      	ldr	r2, [r4, #0]
 800d79e:	1b52      	subs	r2, r2, r5
 800d7a0:	d420      	bmi.n	800d7e4 <_malloc_r+0xd0>
 800d7a2:	2a0b      	cmp	r2, #11
 800d7a4:	d917      	bls.n	800d7d6 <_malloc_r+0xc2>
 800d7a6:	1961      	adds	r1, r4, r5
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	6025      	str	r5, [r4, #0]
 800d7ac:	bf18      	it	ne
 800d7ae:	6059      	strne	r1, [r3, #4]
 800d7b0:	6863      	ldr	r3, [r4, #4]
 800d7b2:	bf08      	it	eq
 800d7b4:	f8c8 1000 	streq.w	r1, [r8]
 800d7b8:	5162      	str	r2, [r4, r5]
 800d7ba:	604b      	str	r3, [r1, #4]
 800d7bc:	4630      	mov	r0, r6
 800d7be:	f000 f9bd 	bl	800db3c <__malloc_unlock>
 800d7c2:	f104 000b 	add.w	r0, r4, #11
 800d7c6:	1d23      	adds	r3, r4, #4
 800d7c8:	f020 0007 	bic.w	r0, r0, #7
 800d7cc:	1ac2      	subs	r2, r0, r3
 800d7ce:	bf1c      	itt	ne
 800d7d0:	1a1b      	subne	r3, r3, r0
 800d7d2:	50a3      	strne	r3, [r4, r2]
 800d7d4:	e7af      	b.n	800d736 <_malloc_r+0x22>
 800d7d6:	6862      	ldr	r2, [r4, #4]
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	bf0c      	ite	eq
 800d7dc:	f8c8 2000 	streq.w	r2, [r8]
 800d7e0:	605a      	strne	r2, [r3, #4]
 800d7e2:	e7eb      	b.n	800d7bc <_malloc_r+0xa8>
 800d7e4:	4623      	mov	r3, r4
 800d7e6:	6864      	ldr	r4, [r4, #4]
 800d7e8:	e7ae      	b.n	800d748 <_malloc_r+0x34>
 800d7ea:	463c      	mov	r4, r7
 800d7ec:	687f      	ldr	r7, [r7, #4]
 800d7ee:	e7b6      	b.n	800d75e <_malloc_r+0x4a>
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	42a3      	cmp	r3, r4
 800d7f6:	d1fb      	bne.n	800d7f0 <_malloc_r+0xdc>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6053      	str	r3, [r2, #4]
 800d7fc:	e7de      	b.n	800d7bc <_malloc_r+0xa8>
 800d7fe:	230c      	movs	r3, #12
 800d800:	6033      	str	r3, [r6, #0]
 800d802:	4630      	mov	r0, r6
 800d804:	f000 f99a 	bl	800db3c <__malloc_unlock>
 800d808:	e794      	b.n	800d734 <_malloc_r+0x20>
 800d80a:	6005      	str	r5, [r0, #0]
 800d80c:	e7d6      	b.n	800d7bc <_malloc_r+0xa8>
 800d80e:	bf00      	nop
 800d810:	20002c74 	.word	0x20002c74

0800d814 <_printf_common>:
 800d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d818:	4616      	mov	r6, r2
 800d81a:	4698      	mov	r8, r3
 800d81c:	688a      	ldr	r2, [r1, #8]
 800d81e:	690b      	ldr	r3, [r1, #16]
 800d820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d824:	4293      	cmp	r3, r2
 800d826:	bfb8      	it	lt
 800d828:	4613      	movlt	r3, r2
 800d82a:	6033      	str	r3, [r6, #0]
 800d82c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d830:	4607      	mov	r7, r0
 800d832:	460c      	mov	r4, r1
 800d834:	b10a      	cbz	r2, 800d83a <_printf_common+0x26>
 800d836:	3301      	adds	r3, #1
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	0699      	lsls	r1, r3, #26
 800d83e:	bf42      	ittt	mi
 800d840:	6833      	ldrmi	r3, [r6, #0]
 800d842:	3302      	addmi	r3, #2
 800d844:	6033      	strmi	r3, [r6, #0]
 800d846:	6825      	ldr	r5, [r4, #0]
 800d848:	f015 0506 	ands.w	r5, r5, #6
 800d84c:	d106      	bne.n	800d85c <_printf_common+0x48>
 800d84e:	f104 0a19 	add.w	sl, r4, #25
 800d852:	68e3      	ldr	r3, [r4, #12]
 800d854:	6832      	ldr	r2, [r6, #0]
 800d856:	1a9b      	subs	r3, r3, r2
 800d858:	42ab      	cmp	r3, r5
 800d85a:	dc26      	bgt.n	800d8aa <_printf_common+0x96>
 800d85c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d860:	6822      	ldr	r2, [r4, #0]
 800d862:	3b00      	subs	r3, #0
 800d864:	bf18      	it	ne
 800d866:	2301      	movne	r3, #1
 800d868:	0692      	lsls	r2, r2, #26
 800d86a:	d42b      	bmi.n	800d8c4 <_printf_common+0xb0>
 800d86c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d870:	4641      	mov	r1, r8
 800d872:	4638      	mov	r0, r7
 800d874:	47c8      	blx	r9
 800d876:	3001      	adds	r0, #1
 800d878:	d01e      	beq.n	800d8b8 <_printf_common+0xa4>
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	6922      	ldr	r2, [r4, #16]
 800d87e:	f003 0306 	and.w	r3, r3, #6
 800d882:	2b04      	cmp	r3, #4
 800d884:	bf02      	ittt	eq
 800d886:	68e5      	ldreq	r5, [r4, #12]
 800d888:	6833      	ldreq	r3, [r6, #0]
 800d88a:	1aed      	subeq	r5, r5, r3
 800d88c:	68a3      	ldr	r3, [r4, #8]
 800d88e:	bf0c      	ite	eq
 800d890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d894:	2500      	movne	r5, #0
 800d896:	4293      	cmp	r3, r2
 800d898:	bfc4      	itt	gt
 800d89a:	1a9b      	subgt	r3, r3, r2
 800d89c:	18ed      	addgt	r5, r5, r3
 800d89e:	2600      	movs	r6, #0
 800d8a0:	341a      	adds	r4, #26
 800d8a2:	42b5      	cmp	r5, r6
 800d8a4:	d11a      	bne.n	800d8dc <_printf_common+0xc8>
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	e008      	b.n	800d8bc <_printf_common+0xa8>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	4652      	mov	r2, sl
 800d8ae:	4641      	mov	r1, r8
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	47c8      	blx	r9
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	d103      	bne.n	800d8c0 <_printf_common+0xac>
 800d8b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c0:	3501      	adds	r5, #1
 800d8c2:	e7c6      	b.n	800d852 <_printf_common+0x3e>
 800d8c4:	18e1      	adds	r1, r4, r3
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	2030      	movs	r0, #48	@ 0x30
 800d8ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8ce:	4422      	add	r2, r4
 800d8d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8d8:	3302      	adds	r3, #2
 800d8da:	e7c7      	b.n	800d86c <_printf_common+0x58>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	4622      	mov	r2, r4
 800d8e0:	4641      	mov	r1, r8
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	47c8      	blx	r9
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d0e6      	beq.n	800d8b8 <_printf_common+0xa4>
 800d8ea:	3601      	adds	r6, #1
 800d8ec:	e7d9      	b.n	800d8a2 <_printf_common+0x8e>
	...

0800d8f0 <_printf_i>:
 800d8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f4:	7e0f      	ldrb	r7, [r1, #24]
 800d8f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8f8:	2f78      	cmp	r7, #120	@ 0x78
 800d8fa:	4691      	mov	r9, r2
 800d8fc:	4680      	mov	r8, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	469a      	mov	sl, r3
 800d902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d906:	d807      	bhi.n	800d918 <_printf_i+0x28>
 800d908:	2f62      	cmp	r7, #98	@ 0x62
 800d90a:	d80a      	bhi.n	800d922 <_printf_i+0x32>
 800d90c:	2f00      	cmp	r7, #0
 800d90e:	f000 80d2 	beq.w	800dab6 <_printf_i+0x1c6>
 800d912:	2f58      	cmp	r7, #88	@ 0x58
 800d914:	f000 80b9 	beq.w	800da8a <_printf_i+0x19a>
 800d918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d91c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d920:	e03a      	b.n	800d998 <_printf_i+0xa8>
 800d922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d926:	2b15      	cmp	r3, #21
 800d928:	d8f6      	bhi.n	800d918 <_printf_i+0x28>
 800d92a:	a101      	add	r1, pc, #4	@ (adr r1, 800d930 <_printf_i+0x40>)
 800d92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d930:	0800d989 	.word	0x0800d989
 800d934:	0800d99d 	.word	0x0800d99d
 800d938:	0800d919 	.word	0x0800d919
 800d93c:	0800d919 	.word	0x0800d919
 800d940:	0800d919 	.word	0x0800d919
 800d944:	0800d919 	.word	0x0800d919
 800d948:	0800d99d 	.word	0x0800d99d
 800d94c:	0800d919 	.word	0x0800d919
 800d950:	0800d919 	.word	0x0800d919
 800d954:	0800d919 	.word	0x0800d919
 800d958:	0800d919 	.word	0x0800d919
 800d95c:	0800da9d 	.word	0x0800da9d
 800d960:	0800d9c7 	.word	0x0800d9c7
 800d964:	0800da57 	.word	0x0800da57
 800d968:	0800d919 	.word	0x0800d919
 800d96c:	0800d919 	.word	0x0800d919
 800d970:	0800dabf 	.word	0x0800dabf
 800d974:	0800d919 	.word	0x0800d919
 800d978:	0800d9c7 	.word	0x0800d9c7
 800d97c:	0800d919 	.word	0x0800d919
 800d980:	0800d919 	.word	0x0800d919
 800d984:	0800da5f 	.word	0x0800da5f
 800d988:	6833      	ldr	r3, [r6, #0]
 800d98a:	1d1a      	adds	r2, r3, #4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6032      	str	r2, [r6, #0]
 800d990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d998:	2301      	movs	r3, #1
 800d99a:	e09d      	b.n	800dad8 <_printf_i+0x1e8>
 800d99c:	6833      	ldr	r3, [r6, #0]
 800d99e:	6820      	ldr	r0, [r4, #0]
 800d9a0:	1d19      	adds	r1, r3, #4
 800d9a2:	6031      	str	r1, [r6, #0]
 800d9a4:	0606      	lsls	r6, r0, #24
 800d9a6:	d501      	bpl.n	800d9ac <_printf_i+0xbc>
 800d9a8:	681d      	ldr	r5, [r3, #0]
 800d9aa:	e003      	b.n	800d9b4 <_printf_i+0xc4>
 800d9ac:	0645      	lsls	r5, r0, #25
 800d9ae:	d5fb      	bpl.n	800d9a8 <_printf_i+0xb8>
 800d9b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9b4:	2d00      	cmp	r5, #0
 800d9b6:	da03      	bge.n	800d9c0 <_printf_i+0xd0>
 800d9b8:	232d      	movs	r3, #45	@ 0x2d
 800d9ba:	426d      	negs	r5, r5
 800d9bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9c0:	4859      	ldr	r0, [pc, #356]	@ (800db28 <_printf_i+0x238>)
 800d9c2:	230a      	movs	r3, #10
 800d9c4:	e011      	b.n	800d9ea <_printf_i+0xfa>
 800d9c6:	6821      	ldr	r1, [r4, #0]
 800d9c8:	6833      	ldr	r3, [r6, #0]
 800d9ca:	0608      	lsls	r0, r1, #24
 800d9cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9d0:	d402      	bmi.n	800d9d8 <_printf_i+0xe8>
 800d9d2:	0649      	lsls	r1, r1, #25
 800d9d4:	bf48      	it	mi
 800d9d6:	b2ad      	uxthmi	r5, r5
 800d9d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9da:	4853      	ldr	r0, [pc, #332]	@ (800db28 <_printf_i+0x238>)
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	bf14      	ite	ne
 800d9e0:	230a      	movne	r3, #10
 800d9e2:	2308      	moveq	r3, #8
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9ea:	6866      	ldr	r6, [r4, #4]
 800d9ec:	60a6      	str	r6, [r4, #8]
 800d9ee:	2e00      	cmp	r6, #0
 800d9f0:	bfa2      	ittt	ge
 800d9f2:	6821      	ldrge	r1, [r4, #0]
 800d9f4:	f021 0104 	bicge.w	r1, r1, #4
 800d9f8:	6021      	strge	r1, [r4, #0]
 800d9fa:	b90d      	cbnz	r5, 800da00 <_printf_i+0x110>
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	d04b      	beq.n	800da98 <_printf_i+0x1a8>
 800da00:	4616      	mov	r6, r2
 800da02:	fbb5 f1f3 	udiv	r1, r5, r3
 800da06:	fb03 5711 	mls	r7, r3, r1, r5
 800da0a:	5dc7      	ldrb	r7, [r0, r7]
 800da0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da10:	462f      	mov	r7, r5
 800da12:	42bb      	cmp	r3, r7
 800da14:	460d      	mov	r5, r1
 800da16:	d9f4      	bls.n	800da02 <_printf_i+0x112>
 800da18:	2b08      	cmp	r3, #8
 800da1a:	d10b      	bne.n	800da34 <_printf_i+0x144>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	07df      	lsls	r7, r3, #31
 800da20:	d508      	bpl.n	800da34 <_printf_i+0x144>
 800da22:	6923      	ldr	r3, [r4, #16]
 800da24:	6861      	ldr	r1, [r4, #4]
 800da26:	4299      	cmp	r1, r3
 800da28:	bfde      	ittt	le
 800da2a:	2330      	movle	r3, #48	@ 0x30
 800da2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da30:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800da34:	1b92      	subs	r2, r2, r6
 800da36:	6122      	str	r2, [r4, #16]
 800da38:	f8cd a000 	str.w	sl, [sp]
 800da3c:	464b      	mov	r3, r9
 800da3e:	aa03      	add	r2, sp, #12
 800da40:	4621      	mov	r1, r4
 800da42:	4640      	mov	r0, r8
 800da44:	f7ff fee6 	bl	800d814 <_printf_common>
 800da48:	3001      	adds	r0, #1
 800da4a:	d14a      	bne.n	800dae2 <_printf_i+0x1f2>
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da50:	b004      	add	sp, #16
 800da52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	f043 0320 	orr.w	r3, r3, #32
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	4833      	ldr	r0, [pc, #204]	@ (800db2c <_printf_i+0x23c>)
 800da60:	2778      	movs	r7, #120	@ 0x78
 800da62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	6831      	ldr	r1, [r6, #0]
 800da6a:	061f      	lsls	r7, r3, #24
 800da6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800da70:	d402      	bmi.n	800da78 <_printf_i+0x188>
 800da72:	065f      	lsls	r7, r3, #25
 800da74:	bf48      	it	mi
 800da76:	b2ad      	uxthmi	r5, r5
 800da78:	6031      	str	r1, [r6, #0]
 800da7a:	07d9      	lsls	r1, r3, #31
 800da7c:	bf44      	itt	mi
 800da7e:	f043 0320 	orrmi.w	r3, r3, #32
 800da82:	6023      	strmi	r3, [r4, #0]
 800da84:	b11d      	cbz	r5, 800da8e <_printf_i+0x19e>
 800da86:	2310      	movs	r3, #16
 800da88:	e7ac      	b.n	800d9e4 <_printf_i+0xf4>
 800da8a:	4827      	ldr	r0, [pc, #156]	@ (800db28 <_printf_i+0x238>)
 800da8c:	e7e9      	b.n	800da62 <_printf_i+0x172>
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	f023 0320 	bic.w	r3, r3, #32
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	e7f6      	b.n	800da86 <_printf_i+0x196>
 800da98:	4616      	mov	r6, r2
 800da9a:	e7bd      	b.n	800da18 <_printf_i+0x128>
 800da9c:	6833      	ldr	r3, [r6, #0]
 800da9e:	6825      	ldr	r5, [r4, #0]
 800daa0:	6961      	ldr	r1, [r4, #20]
 800daa2:	1d18      	adds	r0, r3, #4
 800daa4:	6030      	str	r0, [r6, #0]
 800daa6:	062e      	lsls	r6, r5, #24
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	d501      	bpl.n	800dab0 <_printf_i+0x1c0>
 800daac:	6019      	str	r1, [r3, #0]
 800daae:	e002      	b.n	800dab6 <_printf_i+0x1c6>
 800dab0:	0668      	lsls	r0, r5, #25
 800dab2:	d5fb      	bpl.n	800daac <_printf_i+0x1bc>
 800dab4:	8019      	strh	r1, [r3, #0]
 800dab6:	2300      	movs	r3, #0
 800dab8:	6123      	str	r3, [r4, #16]
 800daba:	4616      	mov	r6, r2
 800dabc:	e7bc      	b.n	800da38 <_printf_i+0x148>
 800dabe:	6833      	ldr	r3, [r6, #0]
 800dac0:	1d1a      	adds	r2, r3, #4
 800dac2:	6032      	str	r2, [r6, #0]
 800dac4:	681e      	ldr	r6, [r3, #0]
 800dac6:	6862      	ldr	r2, [r4, #4]
 800dac8:	2100      	movs	r1, #0
 800daca:	4630      	mov	r0, r6
 800dacc:	f7f2 fba0 	bl	8000210 <memchr>
 800dad0:	b108      	cbz	r0, 800dad6 <_printf_i+0x1e6>
 800dad2:	1b80      	subs	r0, r0, r6
 800dad4:	6060      	str	r0, [r4, #4]
 800dad6:	6863      	ldr	r3, [r4, #4]
 800dad8:	6123      	str	r3, [r4, #16]
 800dada:	2300      	movs	r3, #0
 800dadc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dae0:	e7aa      	b.n	800da38 <_printf_i+0x148>
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	4632      	mov	r2, r6
 800dae6:	4649      	mov	r1, r9
 800dae8:	4640      	mov	r0, r8
 800daea:	47d0      	blx	sl
 800daec:	3001      	adds	r0, #1
 800daee:	d0ad      	beq.n	800da4c <_printf_i+0x15c>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	079b      	lsls	r3, r3, #30
 800daf4:	d413      	bmi.n	800db1e <_printf_i+0x22e>
 800daf6:	68e0      	ldr	r0, [r4, #12]
 800daf8:	9b03      	ldr	r3, [sp, #12]
 800dafa:	4298      	cmp	r0, r3
 800dafc:	bfb8      	it	lt
 800dafe:	4618      	movlt	r0, r3
 800db00:	e7a6      	b.n	800da50 <_printf_i+0x160>
 800db02:	2301      	movs	r3, #1
 800db04:	4632      	mov	r2, r6
 800db06:	4649      	mov	r1, r9
 800db08:	4640      	mov	r0, r8
 800db0a:	47d0      	blx	sl
 800db0c:	3001      	adds	r0, #1
 800db0e:	d09d      	beq.n	800da4c <_printf_i+0x15c>
 800db10:	3501      	adds	r5, #1
 800db12:	68e3      	ldr	r3, [r4, #12]
 800db14:	9903      	ldr	r1, [sp, #12]
 800db16:	1a5b      	subs	r3, r3, r1
 800db18:	42ab      	cmp	r3, r5
 800db1a:	dcf2      	bgt.n	800db02 <_printf_i+0x212>
 800db1c:	e7eb      	b.n	800daf6 <_printf_i+0x206>
 800db1e:	2500      	movs	r5, #0
 800db20:	f104 0619 	add.w	r6, r4, #25
 800db24:	e7f5      	b.n	800db12 <_printf_i+0x222>
 800db26:	bf00      	nop
 800db28:	0800de81 	.word	0x0800de81
 800db2c:	0800de92 	.word	0x0800de92

0800db30 <__malloc_lock>:
 800db30:	4801      	ldr	r0, [pc, #4]	@ (800db38 <__malloc_lock+0x8>)
 800db32:	f7ff bc65 	b.w	800d400 <__retarget_lock_acquire_recursive>
 800db36:	bf00      	nop
 800db38:	20002c6c 	.word	0x20002c6c

0800db3c <__malloc_unlock>:
 800db3c:	4801      	ldr	r0, [pc, #4]	@ (800db44 <__malloc_unlock+0x8>)
 800db3e:	f7ff bc60 	b.w	800d402 <__retarget_lock_release_recursive>
 800db42:	bf00      	nop
 800db44:	20002c6c 	.word	0x20002c6c

0800db48 <_realloc_r>:
 800db48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db4c:	4680      	mov	r8, r0
 800db4e:	4615      	mov	r5, r2
 800db50:	460c      	mov	r4, r1
 800db52:	b921      	cbnz	r1, 800db5e <_realloc_r+0x16>
 800db54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db58:	4611      	mov	r1, r2
 800db5a:	f7ff bddb 	b.w	800d714 <_malloc_r>
 800db5e:	b92a      	cbnz	r2, 800db6c <_realloc_r+0x24>
 800db60:	f000 f84a 	bl	800dbf8 <_free_r>
 800db64:	2400      	movs	r4, #0
 800db66:	4620      	mov	r0, r4
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	f000 f88e 	bl	800dc8c <_malloc_usable_size_r>
 800db70:	4285      	cmp	r5, r0
 800db72:	4606      	mov	r6, r0
 800db74:	d802      	bhi.n	800db7c <_realloc_r+0x34>
 800db76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800db7a:	d8f4      	bhi.n	800db66 <_realloc_r+0x1e>
 800db7c:	4629      	mov	r1, r5
 800db7e:	4640      	mov	r0, r8
 800db80:	f7ff fdc8 	bl	800d714 <_malloc_r>
 800db84:	4607      	mov	r7, r0
 800db86:	2800      	cmp	r0, #0
 800db88:	d0ec      	beq.n	800db64 <_realloc_r+0x1c>
 800db8a:	42b5      	cmp	r5, r6
 800db8c:	462a      	mov	r2, r5
 800db8e:	4621      	mov	r1, r4
 800db90:	bf28      	it	cs
 800db92:	4632      	movcs	r2, r6
 800db94:	f7ff fc36 	bl	800d404 <memcpy>
 800db98:	4621      	mov	r1, r4
 800db9a:	4640      	mov	r0, r8
 800db9c:	f000 f82c 	bl	800dbf8 <_free_r>
 800dba0:	463c      	mov	r4, r7
 800dba2:	e7e0      	b.n	800db66 <_realloc_r+0x1e>

0800dba4 <memmove>:
 800dba4:	4288      	cmp	r0, r1
 800dba6:	b510      	push	{r4, lr}
 800dba8:	eb01 0402 	add.w	r4, r1, r2
 800dbac:	d902      	bls.n	800dbb4 <memmove+0x10>
 800dbae:	4284      	cmp	r4, r0
 800dbb0:	4623      	mov	r3, r4
 800dbb2:	d807      	bhi.n	800dbc4 <memmove+0x20>
 800dbb4:	1e43      	subs	r3, r0, #1
 800dbb6:	42a1      	cmp	r1, r4
 800dbb8:	d008      	beq.n	800dbcc <memmove+0x28>
 800dbba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbc2:	e7f8      	b.n	800dbb6 <memmove+0x12>
 800dbc4:	4402      	add	r2, r0
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	428a      	cmp	r2, r1
 800dbca:	d100      	bne.n	800dbce <memmove+0x2a>
 800dbcc:	bd10      	pop	{r4, pc}
 800dbce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbd6:	e7f7      	b.n	800dbc8 <memmove+0x24>

0800dbd8 <_sbrk_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4d06      	ldr	r5, [pc, #24]	@ (800dbf4 <_sbrk_r+0x1c>)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	f7f5 fbd2 	bl	800338c <_sbrk>
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	d102      	bne.n	800dbf2 <_sbrk_r+0x1a>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b103      	cbz	r3, 800dbf2 <_sbrk_r+0x1a>
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}
 800dbf4:	20002c78 	.word	0x20002c78

0800dbf8 <_free_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	2900      	cmp	r1, #0
 800dbfe:	d041      	beq.n	800dc84 <_free_r+0x8c>
 800dc00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc04:	1f0c      	subs	r4, r1, #4
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	bfb8      	it	lt
 800dc0a:	18e4      	addlt	r4, r4, r3
 800dc0c:	f7ff ff90 	bl	800db30 <__malloc_lock>
 800dc10:	4a1d      	ldr	r2, [pc, #116]	@ (800dc88 <_free_r+0x90>)
 800dc12:	6813      	ldr	r3, [r2, #0]
 800dc14:	b933      	cbnz	r3, 800dc24 <_free_r+0x2c>
 800dc16:	6063      	str	r3, [r4, #4]
 800dc18:	6014      	str	r4, [r2, #0]
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc20:	f7ff bf8c 	b.w	800db3c <__malloc_unlock>
 800dc24:	42a3      	cmp	r3, r4
 800dc26:	d908      	bls.n	800dc3a <_free_r+0x42>
 800dc28:	6820      	ldr	r0, [r4, #0]
 800dc2a:	1821      	adds	r1, r4, r0
 800dc2c:	428b      	cmp	r3, r1
 800dc2e:	bf01      	itttt	eq
 800dc30:	6819      	ldreq	r1, [r3, #0]
 800dc32:	685b      	ldreq	r3, [r3, #4]
 800dc34:	1809      	addeq	r1, r1, r0
 800dc36:	6021      	streq	r1, [r4, #0]
 800dc38:	e7ed      	b.n	800dc16 <_free_r+0x1e>
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	b10b      	cbz	r3, 800dc44 <_free_r+0x4c>
 800dc40:	42a3      	cmp	r3, r4
 800dc42:	d9fa      	bls.n	800dc3a <_free_r+0x42>
 800dc44:	6811      	ldr	r1, [r2, #0]
 800dc46:	1850      	adds	r0, r2, r1
 800dc48:	42a0      	cmp	r0, r4
 800dc4a:	d10b      	bne.n	800dc64 <_free_r+0x6c>
 800dc4c:	6820      	ldr	r0, [r4, #0]
 800dc4e:	4401      	add	r1, r0
 800dc50:	1850      	adds	r0, r2, r1
 800dc52:	4283      	cmp	r3, r0
 800dc54:	6011      	str	r1, [r2, #0]
 800dc56:	d1e0      	bne.n	800dc1a <_free_r+0x22>
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	6053      	str	r3, [r2, #4]
 800dc5e:	4408      	add	r0, r1
 800dc60:	6010      	str	r0, [r2, #0]
 800dc62:	e7da      	b.n	800dc1a <_free_r+0x22>
 800dc64:	d902      	bls.n	800dc6c <_free_r+0x74>
 800dc66:	230c      	movs	r3, #12
 800dc68:	602b      	str	r3, [r5, #0]
 800dc6a:	e7d6      	b.n	800dc1a <_free_r+0x22>
 800dc6c:	6820      	ldr	r0, [r4, #0]
 800dc6e:	1821      	adds	r1, r4, r0
 800dc70:	428b      	cmp	r3, r1
 800dc72:	bf04      	itt	eq
 800dc74:	6819      	ldreq	r1, [r3, #0]
 800dc76:	685b      	ldreq	r3, [r3, #4]
 800dc78:	6063      	str	r3, [r4, #4]
 800dc7a:	bf04      	itt	eq
 800dc7c:	1809      	addeq	r1, r1, r0
 800dc7e:	6021      	streq	r1, [r4, #0]
 800dc80:	6054      	str	r4, [r2, #4]
 800dc82:	e7ca      	b.n	800dc1a <_free_r+0x22>
 800dc84:	bd38      	pop	{r3, r4, r5, pc}
 800dc86:	bf00      	nop
 800dc88:	20002c74 	.word	0x20002c74

0800dc8c <_malloc_usable_size_r>:
 800dc8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc90:	1f18      	subs	r0, r3, #4
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	bfbc      	itt	lt
 800dc96:	580b      	ldrlt	r3, [r1, r0]
 800dc98:	18c0      	addlt	r0, r0, r3
 800dc9a:	4770      	bx	lr

0800dc9c <_init>:
 800dc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9e:	bf00      	nop
 800dca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca2:	bc08      	pop	{r3}
 800dca4:	469e      	mov	lr, r3
 800dca6:	4770      	bx	lr

0800dca8 <_fini>:
 800dca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcaa:	bf00      	nop
 800dcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcae:	bc08      	pop	{r3}
 800dcb0:	469e      	mov	lr, r3
 800dcb2:	4770      	bx	lr
